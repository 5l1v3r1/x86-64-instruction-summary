WARNING | 2018-04-08 20:49:16,746 | [34mangr.analyses.disassembly_utils[0m | [34mYour verison of capstone does not support MIPS instruction groups.[0m
WARNING | 2018-04-08 20:49:16,765 | [37mcle.elf[0m | [37mno segments identified in PT_LOAD[0m
WARNING | 2018-04-08 20:49:16,777 | [33mcle.loader[0m | [33mThe main binary is a position-independent executable. It is being loaded with a base address of 0x400000.[0m
<Arch AMD64 (LE)>
4194304
./instructions/vhaddps_ymm_ymm_ymm/vhaddps_ymm_ymm_ymm.o
IRSB {
   t0:Ity_V256 t1:Ity_V256 t2:Ity_V128 t3:Ity_V128 t4:Ity_V128 t5:Ity_V128 t6:Ity_I64 t7:Ity_I64 t8:Ity_I32 t9:Ity_I32 t10:Ity_I32 t11:Ity_I32 t12:Ity_I64 t13:Ity_I64 t14:Ity_I32 t15:Ity_I32 t16:Ity_I32 t17:Ity_I32 t18:Ity_I64 t19:Ity_I64 t20:Ity_V128 t21:Ity_I64 t22:Ity_I64 t23:Ity_V128 t24:Ity_V128 t25:Ity_I64 t26:Ity_I64 t27:Ity_I32 t28:Ity_I32 t29:Ity_I32 t30:Ity_I32 t31:Ity_I64 t32:Ity_I64 t33:Ity_I32 t34:Ity_I32 t35:Ity_I32 t36:Ity_I32 t37:Ity_I64 t38:Ity_I64 t39:Ity_V128 t40:Ity_I64 t41:Ity_I64 t42:Ity_V128 t43:Ity_V128 t44:Ity_V256 t45:Ity_I64 t46:Ity_I64 t47:Ity_I64 t48:Ity_I64

   00 | ------ IMark(0x400000, 4, 0) ------
   01 | t0 = GET:V256(ymm3)
   02 | t1 = GET:V256(ymm2)
   03 | t2 = V256toV128_1(t1)
   04 | t3 = V256toV128_0(t1)
   05 | t4 = V256toV128_1(t0)
   06 | t5 = V256toV128_0(t0)
   07 | t6 = V128HIto64(t5)
   08 | t7 = V128to64(t5)
   09 | t8 = 64to32(t7)
   10 | t9 = 64HIto32(t7)
   11 | t10 = 64to32(t6)
   12 | t11 = 64HIto32(t6)
   13 | t12 = V128HIto64(t3)
   14 | t13 = V128to64(t3)
   15 | t14 = 64to32(t13)
   16 | t15 = 64HIto32(t13)
   17 | t16 = 64to32(t12)
   18 | t17 = 64HIto32(t12)
   19 | t18 = 32HLto64(t16,t14)
   20 | t19 = 32HLto64(t10,t8)
   21 | t20 = 64HLtoV128(t19,t18)
   22 | t21 = 32HLto64(t17,t15)
   23 | t22 = 32HLto64(t11,t9)
   24 | t23 = 64HLtoV128(t22,t21)
   25 | t24 = Add32Fx4(0x00000000,t20,t23)
   26 | t25 = V128HIto64(t4)
   27 | t26 = V128to64(t4)
   28 | t27 = 64to32(t26)
   29 | t28 = 64HIto32(t26)
   30 | t29 = 64to32(t25)
   31 | t30 = 64HIto32(t25)
   32 | t31 = V128HIto64(t2)
   33 | t32 = V128to64(t2)
   34 | t33 = 64to32(t32)
   35 | t34 = 64HIto32(t32)
   36 | t35 = 64to32(t31)
   37 | t36 = 64HIto32(t31)
   38 | t37 = 32HLto64(t35,t33)
   39 | t38 = 32HLto64(t29,t27)
   40 | t39 = 64HLtoV128(t38,t37)
   41 | t40 = 32HLto64(t36,t34)
   42 | t41 = 32HLto64(t30,t28)
   43 | t42 = 64HLtoV128(t41,t40)
   44 | t43 = Add32Fx4(0x00000000,t39,t42)
   45 | t44 = V128HLtoV256(t43,t24)
   46 | PUT(ymm1) = t44
   47 | PUT(pc) = 0x0000000000400004
   48 | ------ IMark(0x400004, 1, 0) ------
   49 | t45 = GET:I64(rsp)
   50 | t46 = LDle:I64(t45)
   51 | t47 = Add64(t45,0x0000000000000008)
   52 | PUT(rsp) = t47
   53 | t48 = Sub64(t47,0x0000000000000080)
   54 | ====== AbiHint(0xt48, 128, t46) ======
   NEXT: PUT(rip) = t46; Ijk_Ret
}
