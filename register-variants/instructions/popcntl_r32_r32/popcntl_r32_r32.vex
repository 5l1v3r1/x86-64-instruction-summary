WARNING | 2018-04-08 20:47:42,490 | [34mangr.analyses.disassembly_utils[0m | [34mYour verison of capstone does not support MIPS instruction groups.[0m
WARNING | 2018-04-08 20:47:42,516 | [37mcle.elf[0m | [37mno segments identified in PT_LOAD[0m
WARNING | 2018-04-08 20:47:42,553 | [33mcle.loader[0m | [33mThe main binary is a position-independent executable. It is being loaded with a base address of 0x400000.[0m
<Arch AMD64 (LE)>
4194304
./instructions/popcntl_r32_r32/popcntl_r32_r32.o
IRSB {
   t0:Ity_I64 t1:Ity_I32 t2:Ity_I32 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I32 t7:Ity_I32 t8:Ity_I32 t9:Ity_I32 t10:Ity_I32 t11:Ity_I32 t12:Ity_I32 t13:Ity_I32 t14:Ity_I32 t15:Ity_I32 t16:Ity_I32 t17:Ity_I32 t18:Ity_I32 t19:Ity_I32 t20:Ity_I32 t21:Ity_I32 t22:Ity_I64 t23:Ity_I64 t24:Ity_I1 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64

   00 | ------ IMark(0x400000, 4, 0) ------
   01 | t0 = GET:I64(rcx)
   02 | t1 = 64to32(t0)
   03 | t2 = Shr32(t1,0x01)
   04 | t3 = And32(t2,0x55555555)
   05 | t4 = And32(t1,0x55555555)
   06 | t5 = Add32(t4,t3)
   07 | t6 = Shr32(t5,0x02)
   08 | t7 = And32(t6,0x33333333)
   09 | t8 = And32(t5,0x33333333)
   10 | t9 = Add32(t8,t7)
   11 | t10 = Shr32(t9,0x04)
   12 | t11 = And32(t10,0x0f0f0f0f)
   13 | t12 = And32(t9,0x0f0f0f0f)
   14 | t13 = Add32(t12,t11)
   15 | t14 = Shr32(t13,0x08)
   16 | t15 = And32(t14,0x00ff00ff)
   17 | t16 = And32(t13,0x00ff00ff)
   18 | t17 = Add32(t16,t15)
   19 | t18 = Shr32(t17,0x10)
   20 | t19 = And32(t18,0x0000ffff)
   21 | t20 = And32(t17,0x0000ffff)
   22 | t21 = Add32(t20,t19)
   23 | t22 = 32Uto64(t21)
   24 | PUT(rbx) = t22
   25 | PUT(cc_op) = 0x0000000000000000
   26 | PUT(cc_dep2) = 0x0000000000000000
   27 | PUT(cc_ndep) = 0x0000000000000000
   28 | t23 = 32Uto64(t1)
   29 | t24 = CmpEQ64(t23,0x0000000000000000)
   30 | t25 = 1Uto64(t24)
   31 | t26 = Shl64(t25,0x06)
   32 | PUT(cc_dep1) = t26
   33 | PUT(pc) = 0x0000000000400004
   34 | ------ IMark(0x400004, 1, 0) ------
   35 | t27 = GET:I64(rsp)
   36 | t28 = LDle:I64(t27)
   37 | t29 = Add64(t27,0x0000000000000008)
   38 | PUT(rsp) = t29
   39 | t30 = Sub64(t29,0x0000000000000080)
   40 | ====== AbiHint(0xt30, 128, t28) ======
   NEXT: PUT(rip) = t28; Ijk_Ret
}
