WARNING | 2018-04-08 20:50:45,016 | [34mangr.analyses.disassembly_utils[0m | [34mYour verison of capstone does not support MIPS instruction groups.[0m
WARNING | 2018-04-08 20:50:45,032 | [37mcle.elf[0m | [37mno segments identified in PT_LOAD[0m
WARNING | 2018-04-08 20:50:45,056 | [33mcle.loader[0m | [33mThe main binary is a position-independent executable. It is being loaded with a base address of 0x400000.[0m
<Arch AMD64 (LE)>
4194304
./instructions/vtestps_xmm_xmm/vtestps_xmm_xmm.o
IRSB {
   t0:Ity_V128 t1:Ity_V128 t2:Ity_V128 t3:Ity_V128 t4:Ity_V128 t5:Ity_V128 t6:Ity_V128 t7:Ity_V128 t8:Ity_I64 t9:Ity_V128 t10:Ity_V128 t11:Ity_V128 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I64 t23:Ity_I64 t24:Ity_I64 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64

   00 | ------ IMark(0x400000, 5, 0) ------
   01 | t0 = GET:V128(xmm2)
   02 | t1 = GET:V128(xmm1)
   03 | t2 = AndV128(t0,t1)
   04 | t3 = XorV128(t1,ffffffffffffffffffffffffffffffff)
   05 | t4 = AndV128(t0,t3)
   06 | t5 = InterleaveHI64x2(t2,t2)
   07 | t6 = InterleaveLO64x2(t2,t2)
   08 | t7 = OrV128(t6,t5)
   09 | t8 = V128to64(t7)
   10 | t9 = InterleaveHI64x2(t4,t4)
   11 | t10 = InterleaveLO64x2(t4,t4)
   12 | t11 = OrV128(t10,t9)
   13 | t12 = V128to64(t11)
   14 | t13 = And64(t8,0x8000000080000000)
   15 | t14 = And64(t12,0x8000000080000000)
   16 | t15 = Sub64(0x0000000000000000,t13)
   17 | t16 = Or64(t15,t13)
   18 | t17 = Sar64(t16,0x3f)
   19 | t18 = Not64(t17)
   20 | t19 = Sub64(0x0000000000000000,t14)
   21 | t20 = Or64(t19,t14)
   22 | t21 = Sar64(t20,0x3f)
   23 | t22 = Not64(t21)
   24 | t23 = And64(t22,0x0000000000000001)
   25 | t24 = And64(t18,0x0000000000000040)
   26 | t25 = Or64(t24,t23)
   27 | PUT(cc_dep1) = t25
   28 | PUT(cc_op) = 0x0000000000000000
   29 | PUT(cc_dep2) = 0x0000000000000000
   30 | PUT(cc_ndep) = 0x0000000000000000
   31 | PUT(pc) = 0x0000000000400005
   32 | ------ IMark(0x400005, 1, 0) ------
   33 | t26 = GET:I64(rsp)
   34 | t27 = LDle:I64(t26)
   35 | t28 = Add64(t26,0x0000000000000008)
   36 | PUT(rsp) = t28
   37 | t29 = Sub64(t28,0x0000000000000080)
   38 | ====== AbiHint(0xt29, 128, t27) ======
   NEXT: PUT(rip) = t27; Ijk_Ret
}
