code: vblendps $0x0, %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Formula:

%ymm1  : concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 0)) #then extractMInt( %ymm2, 0, 32) #else extractMInt( %ymm3, 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 0)) #then extractMInt( %ymm2, 32, 64) #else extractMInt( %ymm3, 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 0)) #then extractMInt( %ymm2, 64, 96) #else extractMInt( %ymm3, 64, 96) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 0)) #then extractMInt( %ymm2, 96, 128) #else extractMInt( %ymm3, 96, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 0)) #then extractMInt( %ymm2, 128, 160) #else extractMInt( %ymm3, 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 5, 6), mi(1, 0)) #then extractMInt( %ymm2, 160, 192) #else extractMInt( %ymm3, 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 0)) #then extractMInt( %ymm2, 192, 224) #else extractMInt( %ymm3, 192, 224) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 7, 8), mi(1, 0)) #then extractMInt( %ymm2, 224, 256) #else extractMInt( %ymm3, 224, 256) #fi))))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
