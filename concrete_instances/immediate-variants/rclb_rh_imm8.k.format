code: rclb $0x0, %ah

  maybe read:      { %ah %cf }
  must read:       { %ah %cf }
  maybe write:     { %ah %cf %of }
  must write:      { %ah }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : concatenateMInt( concatenateMInt( extractMInt( %rax, 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rax, 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9))), 1, 9)), extractMInt( %rax, 56, 64))

%cf    : extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rax, 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9))), 0, 1)
%of    : (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rax, 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rax, 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool TMP_BOOL_0) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( Imm8, mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool %of)))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
