code: testq $0x0, %rax

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%cf    : mi(1, 0)
%pf    : (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( %rax, 63, 64), extractMInt( Imm32, 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( %rax, 62, 63), extractMInt( Imm32, 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rax, 61, 62), extractMInt( Imm32, 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rax, 60, 61), extractMInt( Imm32, 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rax, 59, 60), extractMInt( Imm32, 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rax, 58, 59), extractMInt( Imm32, 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rax, 57, 58), extractMInt( Imm32, 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rax, 56, 57), extractMInt( Imm32, 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_0 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( andMInt( %rax, mi(64, svalueMInt(Imm32))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : andMInt( extractMInt( %rax, 0, 1), extractMInt( mi(64, svalueMInt(Imm32)), 0, 1))
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
