code: andl $0x0, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( mi(32, 0), andMInt( extractMInt( %rbx, 32, 64), mi(32, svalueMInt(Imm8))))

%cf    : mi(1, 0)
%pf    : (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( %rbx, 63, 64), extractMInt( Imm8, 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( %rbx, 62, 63), extractMInt( Imm8, 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rbx, 61, 62), extractMInt( Imm8, 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rbx, 60, 61), extractMInt( Imm8, 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rbx, 59, 60), extractMInt( Imm8, 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rbx, 58, 59), extractMInt( Imm8, 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rbx, 57, 58), extractMInt( Imm8, 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( %rbx, 56, 57), extractMInt( Imm8, 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_0 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( andMInt( extractMInt( %rbx, 32, 64), mi(32, svalueMInt(Imm8))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : andMInt( extractMInt( %rbx, 32, 33), extractMInt( mi(32, svalueMInt(Imm8)), 0, 1))
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
