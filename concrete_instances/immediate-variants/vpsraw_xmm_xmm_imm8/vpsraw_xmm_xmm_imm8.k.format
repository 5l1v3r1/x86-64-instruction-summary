code: vpsraw $0x0, %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Formula:

%ymm1  : concatenateMInt( mi(128, 0), concatenateMInt( ashrMInt( extractMInt( %ymm2, 128, 144), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( ashrMInt( extractMInt( %ymm2, 144, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( ashrMInt( extractMInt( %ymm2, 160, 176), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( ashrMInt( extractMInt( %ymm2, 176, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( ashrMInt( extractMInt( %ymm2, 192, 208), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( ashrMInt( extractMInt( %ymm2, 208, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), concatenateMInt( ashrMInt( extractMInt( %ymm2, 224, 240), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi))), ashrMInt( extractMInt( %ymm2, 240, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), Imm8), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), Imm8) #fi)))))))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
