code: vdpps $0x0, %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Formula:

%ymm1  : concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 96, 128), extractMInt( %ymm3, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 64, 96), extractMInt( %ymm3, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 32, 64), extractMInt( %ymm3, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 0, 32), extractMInt( %ymm3, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 96, 128), extractMInt( %ymm3, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 64, 96), extractMInt( %ymm3, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 32, 64), extractMInt( %ymm3, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 0, 32), extractMInt( %ymm3, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 96, 128), extractMInt( %ymm3, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 64, 96), extractMInt( %ymm3, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 32, 64), extractMInt( %ymm3, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 0, 32), extractMInt( %ymm3, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( Imm8, 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 96, 128), extractMInt( %ymm3, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 64, 96), extractMInt( %ymm3, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 32, 64), extractMInt( %ymm3, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 0, 32), extractMInt( %ymm3, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 224, 256), extractMInt( %ymm3, 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 192, 224), extractMInt( %ymm3, 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 160, 192), extractMInt( %ymm3, 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 128, 160), extractMInt( %ymm3, 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 224, 256), extractMInt( %ymm3, 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 192, 224), extractMInt( %ymm3, 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 160, 192), extractMInt( %ymm3, 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 128, 160), extractMInt( %ymm3, 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( Imm8, 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 224, 256), extractMInt( %ymm3, 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 192, 224), extractMInt( %ymm3, 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 160, 192), extractMInt( %ymm3, 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 128, 160), extractMInt( %ymm3, 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( Imm8, 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( Imm8, 3, 4), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 224, 256), extractMInt( %ymm3, 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 2, 3), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 192, 224), extractMInt( %ymm3, 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( Imm8, 1, 2), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 160, 192), extractMInt( %ymm3, 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 0, 1), mi(1, 1)) #then mul_single(extractMInt( %ymm2, 128, 160), extractMInt( %ymm3, 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
