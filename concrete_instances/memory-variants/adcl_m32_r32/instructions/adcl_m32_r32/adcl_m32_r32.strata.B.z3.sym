code: adcl %ecx, (%rbx)

  maybe read:      { %ecx %rbx %cf }
  must read:       { %ecx %rbx %cf }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
  ((_ extract 32 32) (bvadd a!1 (concat #b0 TMP_BV_32_0))))

%pf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
(let ((a!2 (= ((_ extract 0 0) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!3 (= ((_ extract 1 1) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!4 (= ((_ extract 2 2) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!5 (= ((_ extract 3 3) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!6 (= ((_ extract 4 4) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!7 (= ((_ extract 5 5) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!8 (= ((_ extract 6 6) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1))
      (a!9 (= ((_ extract 7 7) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1)))
  (ite (not (xor a!2 a!3 a!4 a!5 a!6 a!7 a!8 a!9)) #b1 #b0)))

%af    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
  (bvxor ((_ extract 4 4) %rcx)
         ((_ extract 4 4) TMP_BV_32_0)
         ((_ extract 4 4) (bvadd a!1 (concat #b0 TMP_BV_32_0)))))

%zf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
(let ((a!2 (= ((_ extract 31 0) (bvadd a!1 (concat #b0 TMP_BV_32_0)))
              #x00000000)))
  (ite a!2 #b1 #b0)))

%sf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
  ((_ extract 31 31) (bvadd a!1 (concat #b0 TMP_BV_32_0))))

%of    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
(let ((a!2 (= ((_ extract 31 31) (bvadd a!1 (concat #b0 TMP_BV_32_0))) #b1)))
(let ((a!3 (not (= (= ((_ extract 31 31) %rcx) #b1) a!2))))
(let ((a!4 (and (= (= ((_ extract 31 31) %rcx) #b1)
                   (= ((_ extract 31 31) TMP_BV_32_0) #b1))
                a!3)))
  (ite a!4 #b1 #b0)))))


Information about memory reads:
  Value TMP_BV_32_0
 (4 bytes)
    was read at address %rbx
.

Information about memory writes:
  Address %rbx
 was updated to
    (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 31 0) %rcx))
                       #b000000000000000000000000000000001)
                (concat #b0 ((_ extract 31 0) %rcx)))))
  ((_ extract 31 0) (bvadd a!1 (concat #b0 TMP_BV_32_0))))
 (4 bytes).

sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))

