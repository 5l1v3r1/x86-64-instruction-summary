code: cmpxchgq %rcx, (%rbx)

  maybe read:      { %rax %rcx %rbx }
  must read:       { %rax %rcx %rbx }
  maybe write:     { %rax %cf %pf %af %zf %sf %of }
  must write:      { %rax %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (#ifMInt eqMInt( %rax, TMP_BV_64_0) #then %rax #else TMP_BV_64_0 #fi)

%cf    : (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : xorMInt( xorMInt( extractMInt( TMP_BV_64_0, 59, 60), extractMInt( %rax, 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 60, 61))
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 1, 2)
%of    : (#ifMInt ((eqMInt( negMInt( extractMInt( TMP_BV_64_0, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( %rax, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( TMP_BV_64_0, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_64_0)), mi(65, 1)), concatenateMInt( mi(1, 0), %rax)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    Value (#ifMInt eqMInt( %rax, TMP_BV_64_0) #then %rcx #else TMP_BV_64_0 #fi) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
