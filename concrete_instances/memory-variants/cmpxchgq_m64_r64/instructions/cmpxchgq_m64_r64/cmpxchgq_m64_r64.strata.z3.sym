code: cmpxchgq %rcx, (%rbx)

  maybe read:      { %rax %rcx %rbx }
  must read:       { %rax %rcx %rbx }
  maybe write:     { %rax %cf %pf %af %zf %sf %of }
  must write:      { %rax %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (let ((a!1 ((_ extract 63 0)
             (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
(let ((a!2 ((_ extract 7 0)
             (bvadd (ite (= a!1 #x0000000000000000) #b000000001 #b000000000)
                    (ite (= a!1 #x0000000000000000) #b000000001 #b000000000)))))
  (ite (= a!2 #x00) TMP_BV_64_1 %rax)))

%cf    : (let ((a!1 ((_ extract 64 64)
             (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
(let ((a!2 ((_ extract 8 8)
             (bvadd (ite (= a!1 #b1) #b000000000 #b011111111)
                    (ite (= a!1 #b1) #b000000000 #b011111111)))))
  (= a!2 #b1)))
%pf    : (let ((a!1 (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                  #b00000000000000000000000000000000000000000000000000000000000000001
                  (concat #b0 %rax))))
  (not (xor (= ((_ extract 0 0) a!1) #b1)
            (= ((_ extract 1 1) a!1) #b1)
            (= ((_ extract 2 2) a!1) #b1)
            (= ((_ extract 3 3) a!1) #b1)
            (= ((_ extract 4 4) a!1) #b1)
            (= ((_ extract 5 5) a!1) #b1)
            (= ((_ extract 6 6) a!1) #b1)
            (= ((_ extract 7 7) a!1) #b1))))
%af    : (let ((a!1 (bvadd (concat #b0 (bvxor ((_ extract 3 0) TMP_BV_64_3) #xf))
                  (concat #b0 ((_ extract 3 0) %rax)))))
  (= ((_ extract 4 4) a!1) #b1))
%zf    : (let ((a!1 ((_ extract 63 0)
             (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
  (= a!1 #x0000000000000000))
%sf    : (let ((a!1 ((_ extract 63 63)
             (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
  (= a!1 #b1))
%of    : (let ((a!1 (= (= (bvxor ((_ extract 63 63) TMP_BV_64_4) #b1) #b1)
              (= ((_ extract 63 63) %rax) #b1)))
      (a!2 ((_ extract 63 63)
             (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
(let ((a!3 (= (= (bvxor ((_ extract 63 63) TMP_BV_64_4) #b1) #b1) (= a!2 #b1))))
  (and a!1 (not a!3))))

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rbx.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rbx.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rbx.
  Value TMP_BV_64_3 (8 bytes)
    was read at address %rbx.
  Value TMP_BV_64_4 (8 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    (let ((a!1 ((_ extract 63 0)
             (bvadd (concat #b0 (bvxor TMP_BV_64_0 #xffffffffffffffff))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
  (ite (= a!1 #x0000000000000000) %rcx TMP_BV_64_2)) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
