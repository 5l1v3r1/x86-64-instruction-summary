code: vpshufd $0x0, (%rax), %ymm1

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

vpshufd $0x0, (%rax), %ymm1: Hindex2(10)
vpshufd $0x0, (%rax), %ymm1: Hindex2(10)
Formula:

%ymm1  : (let ((a!1 (concat ((_ extract 31 0)
                     (bvlshr ((_ extract 127 0) TMP_BV_256_0)
                             #x00000000000000000000000000000000))
                   ((_ extract 31 0)
                     (bvlshr ((_ extract 127 0) TMP_BV_256_0)
                             #x00000000000000000000000000000000)))))
(let ((a!2 (concat ((_ extract 31 0)
                     (bvlshr ((_ extract 127 0) TMP_BV_256_0)
                             #x00000000000000000000000000000000))
                   a!1)))
(let ((a!3 (concat ((_ extract 31 0)
                     (bvlshr ((_ extract 127 0) TMP_BV_256_0)
                             #x00000000000000000000000000000000))
                   a!2)))
(let ((a!4 (concat ((_ extract 31 0)
                     (bvlshr ((_ extract 255 128) TMP_BV_256_0)
                             #x00000000000000000000000000000000))
                   a!3)))
(let ((a!5 (concat ((_ extract 31 0)
                     (bvlshr ((_ extract 255 128) TMP_BV_256_0)
                             #x00000000000000000000000000000000))
                   a!4)))
(let ((a!6 (concat ((_ extract 31 0)
                     (bvlshr ((_ extract 255 128) TMP_BV_256_0)
                             #x00000000000000000000000000000000))
                   a!5)))
  (concat ((_ extract 31 0)
            (bvlshr ((_ extract 255 128) TMP_BV_256_0)
                    #x00000000000000000000000000000000))
          a!6)))))))

Information about memory reads:
  Value TMP_BV_256_0 (32 bytes)
    was read at address %rax.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
