code: cmpxchgq %rbx, (%rax)

  maybe read:      { %rax %rbx }
  must read:       { %rax %rbx }
  maybe write:     { %rax %cf %pf %af %zf %sf %of }
  must write:      { %rax %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Opcode: cmpxchgq_r64_r64 Reason: 1
Opcode: cmpxchgq_m64_r64 Reason: 2
cmpxchgq %rbx, (%rax): Hindex0(10)
Opcode: cmpxchgq_r64_r64 Reason: 1
Opcode: cmpxchgq_m64_r64 Reason: 2
cmpxchgq %rbx, (%rax): Hindex0(10)
callq .set_cf: Hindex8(9)
movq $0xfffffffffffffffe, %rdx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
callq .read_zf_into_rcx: Hindex8(9)
adcb %cl, %bl: Hindex2(9)
xorq %rdx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
callq .read_cf_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r8d_r9d: Hindex8(9)
callq .move_r8b_to_byte_5_of_rbx: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
movq $0xffffffffffffffff, %rsi: Hindex5(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
callq .read_cf_into_rbx: Hindex8(9)
adcw %bx, %ax: Hindex2(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
movswq %si, %rbx: Hindex5(9)
movb %cl, %bh: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
callq .set_szp_for_bl: Hindex8(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
callq .clear_cf: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movsbq %r15b, %rcx: Hindex5(9)
adcb %cl, %r13b: Hindex2(9)
movslq %r13d, %rbx: Hindex5(9)
movb %dl, %ah: Hindex5(9)
movq $0x4, %rdi: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcb %al, %al: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
callq .set_szp_for_bl: Hindex8(9)
xorq %r8, %r8: Hindex1(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %ax: Hindex2(9)
popcntq %rax, %rbx: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
xorq %rcx, %rcx: Hindex1(9)
callq .read_sf_into_rbx: Hindex8(9)
movb %ah, %bl: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
movsbq %cl, %rdi: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
movslq %r12d, %rdx: Hindex5(9)
callq .move_016_008_dx_r8b_r9b: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movb %dl, %ah: Hindex5(9)
callq .move_r9b_to_byte_6_of_rbx: Hindex8(9)
popcntq %rdx, %r9: Hindex1(9)
adcb %sil, %bl: Hindex2(9)
movslq %ebx, %rbx: Hindex5(9)
adcl %ebx, %ebx: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
callq .read_zf_into_rbx: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
xorq %rcx, %rcx: Hindex1(9)
callq .read_sf_into_rbx: Hindex8(9)
movb %ah, %bl: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
movsbq %cl, %rdi: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
movslq %r12d, %rdx: Hindex5(9)
callq .move_016_008_dx_r8b_r9b: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movb %dl, %ah: Hindex5(9)
callq .move_r9b_to_byte_6_of_rbx: Hindex8(9)
popcntq %rdx, %r9: Hindex1(9)
adcb %sil, %bl: Hindex2(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcb %al, %al: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
callq .set_szp_for_bl: Hindex8(9)
movq $0x0, %rbx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
movsbq %cl, %rdi: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
movb %cl, %ah: Hindex5(9)
cmoveq %rcx, %rbx: Hindex3(9)
cmoveq %rcx, %rbx: Hindex3(9)
Formula:

%rax   : (((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? 0x1₉ : 0x0₉) + ((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? TMP_BV_64_1 : %rax

%cf    : (((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (TMP_BV_64_3[3:0] ⊕ 0xf₄) + 0x0₁ ∘ %rax[3:0])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:63] = 0x1₁
%of    : ((TMP_BV_64_4[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rax[63:63] = 0x1₁) ∧ !((TMP_BV_64_4[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:63] = 0x1₁)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_3 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_4 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address (((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? 0x1₉ : 0x0₉) + ((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? TMP_BV_64_1 : %rax was updated to
    (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? %rbx : TMP_BV_64_2 (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv ∨ !sigfpe ∧ !sigbus ∧ false
