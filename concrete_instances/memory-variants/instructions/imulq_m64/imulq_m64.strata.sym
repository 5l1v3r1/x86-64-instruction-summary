code: imulq (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %rax %rdx %cf %of }
  must write:      { %rax %rdx %cf %of }
  maybe undef:     { %pf %af %zf %sf }
  must undef:      { %pf %af %zf %sf }
  required flags:  { }

Formula:

%rax   : (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>))[63:0]
%rdx   : (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>))[127:64]

%cf    : (not (== (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>)) (sign-extend-128 (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>))[63:0])))
%pf    : <TMP_BOOL_2>
%af    : <TMP_BOOL_1>
%zf    : <TMP_BOOL_0>
%sf    : (== (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>))[63:63] <0x1|1>)
%of    : (not (== (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>)) (sign-extend-128 (mult (sign-extend-128 <TMP_BV_64_0|64>) (sign-extend-128 <%rax|64>))[63:0])))

Information about memory reads:
  Value <TMP_BV_64_0|64> (8 bytes)
    was read at address <%rax|64>.

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : (or <sigsegv> (and (and (not <sigfpe>) (not <sigbus>)) FALSE))
