code: vpaddq (%rbx), %xmm2, %xmm1

  maybe read:      { %rbx %xmm2 }
  must read:       { %rbx %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

vpaddq (%rbx), %xmm2, %xmm1: Hindex0(10)
vpaddq (%rbx), %xmm2, %xmm1: Hindex0(10)
callq .move_128_064_xmm2_r10_r11: Hindex8(9)
callq .move_128_064_xmm1_r8_r9: Hindex8(9)
orq %rbx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
orq %rbx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
Formula:

%ymm1  : (let ((a!1 ((_ extract 63 0)
             (bvadd (concat #b0 ((_ extract 127 64) %ymm2))
                    (concat #b0 ((_ extract 127 64) TMP_BV_128_0)))))
      (a!2 ((_ extract 63 0)
             (bvadd (concat #b0 ((_ extract 63 0) %ymm2))
                    (concat #b0 ((_ extract 63 0) TMP_BV_128_1))))))
  (concat #x00000000000000000000000000000000 (concat a!1 a!2)))

Information about memory reads:
  Value TMP_BV_128_0 (16 bytes)
    was read at address %rbx.
  Value TMP_BV_128_1 (16 bytes)
    was read at address %rbx.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
