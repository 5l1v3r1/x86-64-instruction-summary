code: andq (%rax), %rbx

  maybe read:      { %rax %rbx }
  must read:       { %rax %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

andq (%rax), %rbx: Hindex0(10)
andq (%rax), %rbx: Hindex0(10)
vzeroall : Hindex1(9)
callq .move_128_064_xmm1_r8_r9: Hindex8(9)
xorq %rbx, %r8: Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall : Hindex1(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_128_064_xmm1_r8_r9: Hindex8(9)
xorq %rbx, %r8: Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
movswq %bx, %r12: Hindex5(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
callq .set_szp_for_bx: Hindex8(9)
callq .read_sf_into_rbx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
xorq %rbx, %r12: Hindex1(9)
movswq %r12w, %rbx: Hindex5(9)
callq .set_szp_for_bx: Hindex8(9)
callq .move_128_064_xmm2_r10_r11: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r10_r11_xmm3: Hindex8(9)
callq .move_256_128_ymm3_xmm12_xmm13: Hindex8(9)
callq .move_128_256_xmm12_xmm13_ymm1: Hindex8(9)
callq .move_128_064_xmm3_r10_r11: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
orq %r9, %r11: Hindex1(9)
orq %r8, %r10: Hindex1(9)
callq .move_064_128_r10_r11_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_064_xmm1_r8_r9: Hindex8(9)
xorq %r8, %r12: Hindex1(9)
xorq %r9, %r13: Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm3_r10_r11: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
orq %r9, %r11: Hindex1(9)
orq %r8, %r10: Hindex1(9)
callq .move_064_128_r10_r11_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm3_r12_r13: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
xorq %r13, %r9: Hindex1(9)
xorq %r12, %r8: Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_256_128_ymm2_xmm10_xmm11: Hindex8(9)
callq .move_256_128_ymm3_xmm8_xmm9: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_064_xmm1_r8_r9: Hindex8(9)
xorq %r8, %r12: Hindex1(9)
xorq %r9, %r13: Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm3_r10_r11: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
orq %r9, %r11: Hindex1(9)
orq %r8, %r10: Hindex1(9)
callq .move_064_128_r10_r11_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm3_r12_r13: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
xorq %r13, %r9: Hindex1(9)
xorq %r12, %r8: Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall : Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
callq .move_128_256_xmm8_xmm9_ymm1: Hindex8(9)
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d: Hindex8(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_szp_for_rbx: Hindex8(9)
Formula:

%rbx   : (bvxor (bvxor (bvxor #x0000000000000000 TMP_BV_64_0) #x0000000000000000 %rbx)
       (bvor (bvxor #x0000000000000000 TMP_BV_64_0)
             (bvxor (bvxor #x0000000000000000 TMP_BV_64_0)
                    #x0000000000000000
                    %rbx)))

%cf    : false
%pf    : (let ((a!1 (bvor (bvxor #b0 ((_ extract 0 0) TMP_BV_64_2))
                 (bvxor #b0
                        ((_ extract 0 0) TMP_BV_64_3)
                        (bvxor #b0 ((_ extract 0 0) %rbx)))))
      (a!3 (bvor (bvxor #b0 ((_ extract 1 1) TMP_BV_64_5))
                 (bvxor #b0
                        ((_ extract 1 1) TMP_BV_64_6)
                        (bvxor #b0 ((_ extract 1 1) %rbx)))))
      (a!5 (bvor (bvxor #b0 ((_ extract 2 2) TMP_BV_64_8))
                 (bvxor #b0
                        ((_ extract 2 2) TMP_BV_64_9)
                        (bvxor #b0 ((_ extract 2 2) %rbx)))))
      (a!7 (bvor (bvxor #b0 ((_ extract 3 3) TMP_BV_64_11))
                 (bvxor #b0
                        ((_ extract 3 3) TMP_BV_64_12)
                        (bvxor #b0 ((_ extract 3 3) %rbx)))))
      (a!9 (bvor (bvxor #b0 ((_ extract 4 4) TMP_BV_64_14))
                 (bvxor #b0
                        ((_ extract 4 4) TMP_BV_64_15)
                        (bvxor #b0 ((_ extract 4 4) %rbx)))))
      (a!11 (bvor (bvxor #b0 ((_ extract 5 5) TMP_BV_64_17))
                  (bvxor #b0
                         ((_ extract 5 5) TMP_BV_64_18)
                         (bvxor #b0 ((_ extract 5 5) %rbx)))))
      (a!13 (bvor (bvxor #b0 ((_ extract 6 6) TMP_BV_64_20))
                  (bvxor #b0
                         ((_ extract 6 6) TMP_BV_64_21)
                         (bvxor #b0 ((_ extract 6 6) %rbx)))))
      (a!15 (bvor (bvxor #b0 ((_ extract 7 7) TMP_BV_64_23))
                  (bvxor #b0
                         ((_ extract 7 7) TMP_BV_64_24)
                         (bvxor #b0 ((_ extract 7 7) %rbx))))))
(let ((a!2 (= (bvxor #b0
                     ((_ extract 0 0) TMP_BV_64_1)
                     (bvxor #b0 ((_ extract 0 0) %rbx))
                     a!1)
              #b1))
      (a!4 (= (bvxor #b0
                     ((_ extract 1 1) TMP_BV_64_4)
                     (bvxor #b0 ((_ extract 1 1) %rbx))
                     a!3)
              #b1))
      (a!6 (= (bvxor #b0
                     ((_ extract 2 2) TMP_BV_64_7)
                     (bvxor #b0 ((_ extract 2 2) %rbx))
                     a!5)
              #b1))
      (a!8 (= (bvxor #b0
                     ((_ extract 3 3) TMP_BV_64_10)
                     (bvxor #b0 ((_ extract 3 3) %rbx))
                     a!7)
              #b1))
      (a!10 (= (bvxor #b0
                      ((_ extract 4 4) TMP_BV_64_13)
                      (bvxor #b0 ((_ extract 4 4) %rbx))
                      a!9)
               #b1))
      (a!12 (= (bvxor #b0
                      ((_ extract 5 5) TMP_BV_64_16)
                      (bvxor #b0 ((_ extract 5 5) %rbx))
                      a!11)
               #b1))
      (a!14 (= (bvxor #b0
                      ((_ extract 6 6) TMP_BV_64_19)
                      (bvxor #b0 ((_ extract 6 6) %rbx))
                      a!13)
               #b1))
      (a!16 (= (bvxor #b0
                      ((_ extract 7 7) TMP_BV_64_22)
                      (bvxor #b0 ((_ extract 7 7) %rbx))
                      a!15)
               #b1)))
  (not (xor a!2 a!4 a!6 a!8 a!10 a!12 a!14 a!16))))
%af    : TMP_BOOL_21
%zf    : (let ((a!1 (bvxor (bvxor (bvxor #x0000000000000000 TMP_BV_64_0)
                         #x0000000000000000
                         %rbx)
                  (bvor (bvxor #x0000000000000000 TMP_BV_64_0)
                        (bvxor (bvxor #x0000000000000000 TMP_BV_64_0)
                               #x0000000000000000
                               %rbx)))))
  (= a!1 #x0000000000000000))
%sf    : (let ((a!1 (bvor (bvxor #b0 ((_ extract 63 63) TMP_BV_64_26))
                 (bvxor #b0
                        ((_ extract 63 63) TMP_BV_64_27)
                        (bvxor #b0 ((_ extract 63 63) %rbx))))))
  (= (bvxor #b0
            ((_ extract 63 63) TMP_BV_64_25)
            (bvxor #b0 ((_ extract 63 63) %rbx))
            a!1)
     #b1))
%of    : false

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_3 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_4 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_5 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_6 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_7 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_8 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_9 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_10 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_11 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_12 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_13 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_14 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_15 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_16 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_17 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_18 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_19 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_20 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_21 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_22 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_23 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_24 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_25 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_26 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_27 (8 bytes)
    was read at address %rax.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
