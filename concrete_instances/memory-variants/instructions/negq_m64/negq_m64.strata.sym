code: negq (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[7:7] = 0x1₁)
%af    : false
%zf    : (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[63:63] = 0x1₁
%of    : ((TMP_BV_64_1[63:63] ⊕ 0x1₁) = 0x1₁ ↔ false) ∧ !((TMP_BV_64_1[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[63:63] = 0x1₁)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (0x0₁ ∘ (TMP_BV_64_0 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ 0x0₆₄)[63:0] (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv ∨ !sigfpe ∧ !sigbus ∧ false
