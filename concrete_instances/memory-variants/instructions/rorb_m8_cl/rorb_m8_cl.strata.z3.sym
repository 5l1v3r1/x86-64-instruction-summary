code: rorb %cl, (%rbx)

  maybe read:      { %cl %rbx }
  must read:       { %cl %rbx }
  maybe write:     { %cf %of }
  must write:      { }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

rorb %cl, (%rbx): Hindex8(10)
rorb %cl, (%rbx): Hindex8(10)
Formula:

%cf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!2 ((_ extract 7 7)
             (ext_rotate_right TMP_BV_8_0 (bvand ((_ extract 7 0) %rcx) #x1f)))))
  (or (and a!1 (= a!2 #b1)) (and (not a!1) %cf)))
%of    : (let ((a!1 ((_ extract 7 7)
             (ext_rotate_right TMP_BV_8_0 (bvand ((_ extract 7 0) %rcx) #x1f))))
      (a!2 ((_ extract 6 6)
             (ext_rotate_right TMP_BV_8_0 (bvand ((_ extract 7 0) %rcx) #x1f))))
      (a!4 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x01))))
(let ((a!3 (and (= (bvand ((_ extract 7 0) %rcx) #x1f) #x01)
                (xor (= a!1 #b1) (= a!2 #b1)))))
  (or a!3 (and a!4 TMP_BOOL_0))))

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    (ext_rotate_right TMP_BV_8_0 (bvand ((_ extract 7 0) %rcx) #x1f)) (1 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))
