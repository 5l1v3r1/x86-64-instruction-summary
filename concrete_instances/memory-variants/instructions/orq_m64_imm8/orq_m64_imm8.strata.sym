code: orq $0x0, (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Base Instruction!!
orq $0x0, (%rax): Hindex0(10)
Base Instruction!!
orq $0x0, (%rax): Hindex0(10)
orq %rcx, %rbx: Hindex1(9)
Formula:

%cf    : false
%pf    : (let ((a!1 (xor (= (bvor ((_ extract 0 0) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 1 1) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 2 2) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 3 3) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 4 4) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 5 5) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 6 6) TMP_BV_64_1) #b0) #b1)
                (= (bvor ((_ extract 7 7) TMP_BV_64_1) #b0) #b1))))
  (not a!1))
%af    : TMP_BOOL_1
%zf    : (= (bvor TMP_BV_64_1 #x0000000000000000) #x0000000000000000)
%sf    : (= (bvor ((_ extract 63 63) TMP_BV_64_1) #b0) #b1)
%of    : false

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (bvor TMP_BV_64_0 #x0000000000000000) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
