code: rcrq %cl, (%rax)

  maybe read:      { %rax %cl %cf }
  must read:       { %rax %cl %cf }
  maybe write:     { %cf %of }
  must write:      { }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

rcrq %cl, (%rax): Hindex8(10)
rcrq %cl, (%rax): Hindex8(10)
Formula:

%cf    : ((%cf ? 0x1₁ : 0x0₁) ∘ TMP_BV_64_0 rot_right 0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[64:64] = 0x1₁
%of    : (0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[7:0] = 0x1₈ ∧ (((%cf ? 0x1₁ : 0x0₁) ∘ TMP_BV_64_0 rot_right 0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[63:63] = 0x1₁ ⊕ ((%cf ? 0x1₁ : 0x0₁) ∘ TMP_BV_64_0 rot_right 0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[62:62] = 0x1₁) ∨ !((0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[7:0] = 0x1₈) ∧ (!((0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[7:0] = 0x0₈) ∧ %of ∨ !(!((0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[7:0] = 0x0₈)) ∧ TMP_BOOL_0)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    ((%cf ? 0x1₁ : 0x0₁) ∘ TMP_BV_64_0 rot_right 0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈) % 0x41₆₅)[63:0] (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv ∨ !sigfpe ∧ !sigbus ∧ false ∨ !sigfpe ∧ !sigbus ∧ false
