code: blsrl (%rcx), %ebx

  maybe read:      { %rcx }
  must read:       { %rcx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

blsrl (%rcx), %ebx: Hindex0(10)
blsrl (%rcx), %ebx: Hindex0(10)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movq $0xffffffffffffffff, %rax: Hindex5(9)
orq %rbx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
movslq %edx, %rbx: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movswq %cx, %r11: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
orq %r11, %r8: Hindex1(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .set_szp_for_ebx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_ecx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movq $0xffffffffffffffff, %rax: Hindex5(9)
orq %rbx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
callq .move_byte_5_of_rbx_to_r9b: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movq $0x8, %rbx: Hindex5(9)
callq .move_032_016_ebx_r10w_r11w: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
callq .read_pf_into_rbx: Hindex8(9)
adcb %cl, %bl: Hindex2(9)
movq %rax, %rbx: Hindex5(9)
adcb %bl, %bl: Hindex2(9)
callq .set_szp_for_ebx: Hindex8(9)
Formula:

%rbx   : (let ((a!1 ((_ extract 31 0)
             (bvadd (concat #b0 #xffffffffffffffff)
                    (concat #b0 (concat #x00000000 TMP_BV_32_1))))))
  (concat #x00000000 (bvxor (bvor TMP_BV_32_0 a!1) a!1 TMP_BV_32_2)))

%cf    : (let ((a!1 ((_ extract 47 40)
             (bvadd (concat #b0 #xffffffffffffffff)
                    (concat #b0 (concat #x00000000 TMP_BV_32_3))))))
  (= ((_ extract 8 8) (bvadd (concat #b0 a!1) (concat #b0 a!1))) #b1))
%pf    : TMP_BOOL_18
%af    : TMP_BOOL_19
%zf    : (let ((a!1 ((_ extract 31 0)
             (bvadd (concat #b0 #xffffffffffffffff)
                    (concat #b0 (concat #x00000000 TMP_BV_32_1))))))
  (= (bvxor (bvor TMP_BV_32_0 a!1) a!1 TMP_BV_32_2) #x00000000))
%sf    : (let ((a!1 ((_ extract 31 31)
             (bvadd (concat #b0 #xffffffffffffffff)
                    (concat #b0 (concat #x00000000 TMP_BV_32_1))))))
  (= (bvxor (bvor ((_ extract 31 31) TMP_BV_32_4) a!1)
            a!1
            ((_ extract 31 31) TMP_BV_32_5))
     #b1))
%of    : (let ((a!1 ((_ extract 47 47)
             (bvadd (concat #b0 #xffffffffffffffff)
                    (concat #b0 (concat #x00000000 TMP_BV_32_3)))))
      (a!2 ((_ extract 47 40)
             (bvadd (concat #b0 #xffffffffffffffff)
                    (concat #b0 (concat #x00000000 TMP_BV_32_3))))))
(let ((a!3 (= ((_ extract 7 7) (bvadd (concat #b0 a!2) (concat #b0 a!2))) #b1)))
  (and (= (= a!1 #b1) (= a!1 #b1)) (not (= (= a!1 #b1) a!3)))))

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rcx.
  Value TMP_BV_32_1 (4 bytes)
    was read at address %rcx.
  Value TMP_BV_32_2 (4 bytes)
    was read at address %rcx.
  Value TMP_BV_32_3 (4 bytes)
    was read at address %rcx.
  Value TMP_BV_32_4 (4 bytes)
    was read at address %rcx.
  Value TMP_BV_32_5 (4 bytes)
    was read at address %rcx.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
