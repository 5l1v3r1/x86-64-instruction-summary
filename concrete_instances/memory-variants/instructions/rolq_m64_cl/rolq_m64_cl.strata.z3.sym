code: rolq %cl, (%rax)

  maybe read:      { %rax %cl }
  must read:       { %rax %cl }
  maybe write:     { %cf %of }
  must write:      { }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

rolq %cl, (%rax): Hindex8(10)
rolq %cl, (%rax): Hindex8(10)
Formula:

%cf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x00)))
      (a!2 (ext_rotate_left TMP_BV_64_0
                            (concat #x00000000000000
                                    (bvand ((_ extract 7 0) %rcx) #x3f)))))
  (or (and a!1 (= ((_ extract 0 0) a!2) #b1)) (and (not a!1) %cf)))
%of    : (let ((a!1 (ext_rotate_left TMP_BV_64_0
                            (concat #x00000000000000
                                    (bvand ((_ extract 7 0) %rcx) #x3f))))
      (a!3 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x01))))
(let ((a!2 (and (= (bvand ((_ extract 7 0) %rcx) #x3f) #x01)
                (xor (= ((_ extract 63 63) a!1) #b1)
                     (= ((_ extract 0 0) a!1) #b1)))))
  (or a!2 (and a!3 TMP_BOOL_0))))

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (ext_rotate_left TMP_BV_64_0
                 (concat #x00000000000000 (bvand ((_ extract 7 0) %rcx) #x3f))) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))
