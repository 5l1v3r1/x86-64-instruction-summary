code: rclq $0x1, (%rax)

  maybe read:      { %rax %cf }
  must read:       { %rax %cf }
  maybe write:     { %cf %of }
  must write:      { %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

rclq $0x1, (%rax): Hindex0(10)
rclq $0x1, (%rax): Hindex0(10)
adcq %rbx, %rbx: Hindex2(9)
Formula:

%cf    : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 TMP_BV_64_0)
                              #b00000000000000000000000000000000000000000000000000000000000000001)
                       (concat #b0 TMP_BV_64_0))
                  (concat #b0 TMP_BV_64_1))))
  (= ((_ extract 64 64) a!1) #b1))
%of    : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 TMP_BV_64_0)
                              #b00000000000000000000000000000000000000000000000000000000000000001)
                       (concat #b0 TMP_BV_64_0))
                  (concat #b0 TMP_BV_64_1))))
(let ((a!2 (not (= (= ((_ extract 63 63) TMP_BV_64_2) #b1)
                   (= ((_ extract 63 63) a!1) #b1)))))
  (and (= (= ((_ extract 63 63) TMP_BV_64_2) #b1)
          (= ((_ extract 63 63) TMP_BV_64_3) #b1))
       a!2)))

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_3 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 TMP_BV_64_0)
                              #b00000000000000000000000000000000000000000000000000000000000000001)
                       (concat #b0 TMP_BV_64_0))
                  (concat #b0 TMP_BV_64_1))))
  ((_ extract 63 0) a!1)) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
