code: rclq $0x1, (%rax)

  maybe read:      { %rax %cf }
  must read:       { %rax %cf }
  maybe write:     { %cf %of }
  must write:      { %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : ((%cf ? 0x0₁ ∘ TMP_BV_64_0 + 0x1₆₅ : 0x0₁ ∘ TMP_BV_64_0) + 0x0₁ ∘ TMP_BV_64_1)[64:64] = 0x1₁
%of    : (TMP_BV_64_2[63:63] = 0x1₁ ↔ TMP_BV_64_3[63:63] = 0x1₁) ∧ !(TMP_BV_64_2[63:63] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ TMP_BV_64_0 + 0x1₆₅ : 0x0₁ ∘ TMP_BV_64_0) + 0x0₁ ∘ TMP_BV_64_1)[63:63] = 0x1₁)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_3 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    ((%cf ? 0x0₁ ∘ TMP_BV_64_0 + 0x1₆₅ : 0x0₁ ∘ TMP_BV_64_0) + 0x0₁ ∘ TMP_BV_64_1)[63:0] (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv ∨ !sigfpe ∧ !sigbus ∧ false
