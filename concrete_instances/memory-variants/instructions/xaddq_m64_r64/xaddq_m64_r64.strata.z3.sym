code: xaddq %rbx, (%rax)

  maybe read:      { %rax %rbx }
  must read:       { %rax %rbx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

xaddq %rbx, (%rax): Hindex0(10)
xaddq %rbx, (%rax): Hindex0(10)
movq %rbx, %rsi: Hindex5(9)
orq %rbx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
callq .move_064_032_rbx_r8d_r9d: Hindex8(9)
movq %rcx, %rbx: Hindex5(9)
callq .move_016_032_r8w_r9w_edx: Hindex8(9)
callq .move_032_016_edx_r8w_r9w: Hindex8(9)
callq .move_032_064_r8d_r9d_rcx: Hindex8(9)
Formula:

%rbx   : TMP_BV_64_0

%cf    : (= ((_ extract 64 64) (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx))) #b1)
%pf    : (let ((a!1 (= ((_ extract 0 0)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!2 (= ((_ extract 1 1)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!3 (= ((_ extract 2 2)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!4 (= ((_ extract 3 3)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!5 (= ((_ extract 4 4)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!6 (= ((_ extract 5 5)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!7 (= ((_ extract 6 6)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1))
      (a!8 (= ((_ extract 7 7)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 3 0) TMP_BV_64_2))
                    (concat #b0 ((_ extract 3 0) %rbx))))))
  (= a!1 #b1))
%zf    : (= ((_ extract 63 0) (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
   #x0000000000000000)
%sf    : (= ((_ extract 63 63) (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx))) #b1)
%of    : (let ((a!1 (= ((_ extract 63 63)
                (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx)))
              #b1)))
(let ((a!2 (not (= (= ((_ extract 63 63) TMP_BV_64_3) #b1) a!1))))
  (and (= (= ((_ extract 63 63) TMP_BV_64_3) #b1)
          (= ((_ extract 63 63) %rbx) #b1))
       a!2)))

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rax.
  Value TMP_BV_64_3 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    ((_ extract 63 0) (bvadd (concat #b0 TMP_BV_64_1) (concat #b0 %rbx))) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
