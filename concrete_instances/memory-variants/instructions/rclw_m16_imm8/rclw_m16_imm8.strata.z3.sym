code: rclw $0x0, (%rbx)

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %cf %of }
  must write:      { }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

rclw $0x0, (%rbx): Hindex8(10)
rclw $0x0, (%rbx): Hindex8(10)
Formula:

%cf    : (let ((a!1 ((_ extract 16 16)
             (ext_rotate_left (concat (ite %cf #b1 #b0) TMP_BV_16_0)
                              #b00000000000000000))))
  (= a!1 #b1))
%of    : (let ((a!1 ((_ extract 16 16)
             (ext_rotate_left (concat (ite %cf #b1 #b0) TMP_BV_16_0)
                              #b00000000000000000)))
      (a!2 ((_ extract 15 15)
             (ext_rotate_left (concat (ite %cf #b1 #b0) TMP_BV_16_0)
                              #b00000000000000000))))
  (or (and false (xor (= a!1 #b1) (= a!2 #b1)))
      (and true (or (and false %of) (and true TMP_BOOL_0)))))

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    ((_ extract 15 0)
  (ext_rotate_left (concat (ite %cf #b1 #b0) TMP_BV_16_0) #b00000000000000000)) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))
