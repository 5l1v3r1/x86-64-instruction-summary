code: andw %bx, (%rax)

  maybe read:      { %rax %bx }
  must read:       { %rax %bx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

andw %bx, (%rax): Hindex0(10)
andw %bx, (%rax): Hindex0(10)
movb %ah, %cl: Hindex5(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
xorq %rdx, %rdx: Hindex1(9)
adcb %bl, %dl: Hindex2(9)
movslq %ebx, %rax: Hindex5(9)
movq $0xffffffffffffffff, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movq $0x20, %rbx: Hindex5(9)
callq .move_016_008_cx_r12b_r13b: Hindex8(9)
callq .move_008_016_r12b_r13b_bx: Hindex8(9)
callq .move_064_032_rbx_r8d_r9d: Hindex8(9)
movq $0xffffffffffffffc0, %rbx: Hindex5(9)
movswq %cx, %rbx: Hindex5(9)
movswq %bx, %r9: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movb %cl, %bh: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
callq .set_szp_for_bl: Hindex8(9)
movb %bl, %ch: Hindex5(9)
movb %ch, %cl: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
callq .clear_cf: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movsbq %r15b, %rcx: Hindex5(9)
adcb %cl, %r13b: Hindex2(9)
movslq %r13d, %rbx: Hindex5(9)
movb %cl, %ah: Hindex5(9)
movb %ah, %cl: Hindex5(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
adcb %cl, %bl: Hindex2(9)
movb %bl, %bh: Hindex5(9)
movswq %cx, %rdx: Hindex5(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
movswq %cx, %rax: Hindex5(9)
orq %rax, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
movb %bl, %ch: Hindex5(9)
movb %ch, %cl: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
callq .clear_cf: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movsbq %r15b, %rcx: Hindex5(9)
adcb %cl, %r13b: Hindex2(9)
movslq %r13d, %rbx: Hindex5(9)
movb %cl, %ah: Hindex5(9)
xorq %rcx, %rcx: Hindex1(9)
callq .read_sf_into_rbx: Hindex8(9)
movb %ah, %bl: Hindex5(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movslq %edx, %rbx: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movswq %cx, %r11: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
orq %r11, %r8: Hindex1(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .set_szp_for_ebx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_ecx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movsbq %bl, %r12: Hindex5(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movslq %edx, %rbx: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movswq %cx, %r11: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
orq %r11, %r8: Hindex1(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .set_szp_for_ebx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_ecx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movswq %cx, %rdx: Hindex5(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
movswq %cx, %rax: Hindex5(9)
orq %rax, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
Formula:

%cf    : false
%pf    : (let ((a!1 (= (bvxor (bvor ((_ extract 0 0) TMP_BV_16_3) ((_ extract 0 0) %rbx))
                     ((_ extract 0 0) %rbx)
                     ((_ extract 0 0) TMP_BV_16_4))
              #b1))
      (a!2 (= (bvxor (bvor ((_ extract 1 1) TMP_BV_16_5) ((_ extract 1 1) %rbx))
                     ((_ extract 1 1) %rbx)
                     ((_ extract 1 1) TMP_BV_16_6))
              #b1))
      (a!3 (= (bvxor (bvor ((_ extract 2 2) TMP_BV_16_7) ((_ extract 2 2) %rbx))
                     ((_ extract 2 2) %rbx)
                     ((_ extract 2 2) TMP_BV_16_8))
              #b1))
      (a!4 (= (bvxor (bvor ((_ extract 3 3) TMP_BV_16_9) ((_ extract 3 3) %rbx))
                     ((_ extract 3 3) %rbx)
                     ((_ extract 3 3) TMP_BV_16_10))
              #b1))
      (a!5 (= (bvxor (bvor ((_ extract 4 4) TMP_BV_16_11)
                           ((_ extract 4 4) %rbx))
                     ((_ extract 4 4) %rbx)
                     ((_ extract 4 4) TMP_BV_16_12))
              #b1))
      (a!6 (= (bvxor (bvor ((_ extract 5 5) TMP_BV_16_13)
                           ((_ extract 5 5) %rbx))
                     ((_ extract 5 5) %rbx)
                     ((_ extract 5 5) TMP_BV_16_14))
              #b1))
      (a!7 (= (bvxor (bvor ((_ extract 6 6) TMP_BV_16_15)
                           ((_ extract 6 6) %rbx))
                     ((_ extract 6 6) %rbx)
                     ((_ extract 6 6) TMP_BV_16_16))
              #b1))
      (a!8 (= (bvxor (bvor ((_ extract 7 7) TMP_BV_16_17)
                           ((_ extract 7 7) %rbx))
                     ((_ extract 7 7) %rbx)
                     ((_ extract 7 7) TMP_BV_16_18))
              #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : TMP_BOOL_40
%zf    : (let ((a!1 (bvxor (bvxor ((_ extract 15 8) TMP_BV_16_1) #xff)
                  (bvor ((_ extract 15 8) %rbx)
                        (bvxor ((_ extract 15 8) TMP_BV_16_1) #xff)))))
(let ((a!2 (concat a!1
                   (bvxor (bvor ((_ extract 7 0) TMP_BV_16_2)
                                ((_ extract 7 0) %rbx))
                          ((_ extract 7 0) %rbx)
                          ((_ extract 7 0) TMP_BV_16_2)))))
  (= ((_ sign_extend 48) a!2) #x0000000000000000)))
%sf    : (let ((a!1 (bvxor (bvxor ((_ extract 15 8) TMP_BV_16_1) #xff)
                  (bvor ((_ extract 15 8) %rbx)
                        (bvxor ((_ extract 15 8) TMP_BV_16_1) #xff)))))
(let ((a!2 (concat a!1
                   (bvxor (bvor ((_ extract 7 0) TMP_BV_16_2)
                                ((_ extract 7 0) %rbx))
                          ((_ extract 7 0) %rbx)
                          ((_ extract 7 0) TMP_BV_16_2)))))
  (= ((_ extract 63 63) ((_ sign_extend 48) a!2)) #b1)))
%of    : false

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_1 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_2 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_3 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_4 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_5 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_6 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_7 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_8 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_9 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_10 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_11 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_12 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_13 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_14 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_15 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_16 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_17 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_18 (2 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (let ((a!1 (bvxor (bvxor ((_ extract 15 8) TMP_BV_16_1) #xff)
                  (bvor ((_ extract 15 8) %rbx)
                        (bvxor ((_ extract 15 8) TMP_BV_16_1) #xff)))))
  (concat a!1
          (bvxor (bvor ((_ extract 7 0) TMP_BV_16_2) ((_ extract 7 0) %rbx))
                 ((_ extract 7 0) %rbx)
                 ((_ extract 7 0) TMP_BV_16_2)))) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
