code: addl $0x0, (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

addl $0x0, (%rax): Hindex0(10)
addl $0x0, (%rax): Hindex0(10)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
callq .set_szp_for_ebx: Hindex8(9)
Formula:

%cf    : false
%pf    : (not (xor (= ((_ extract 0 0) TMP_BV_32_0) #b1)
          (= ((_ extract 1 1) TMP_BV_32_0) #b1)
          (= ((_ extract 2 2) TMP_BV_32_0) #b1)
          (= ((_ extract 3 3) TMP_BV_32_0) #b1)
          (= ((_ extract 4 4) TMP_BV_32_0) #b1)
          (= ((_ extract 5 5) TMP_BV_32_0) #b1)
          (= ((_ extract 6 6) TMP_BV_32_0) #b1)
          (= ((_ extract 7 7) TMP_BV_32_0) #b1)))
%af    : false
%zf    : (= TMP_BV_32_0 #x00000000)
%sf    : (= ((_ extract 31 31) TMP_BV_32_0) #b1)
%of    : (let ((a!1 (not (= (= ((_ extract 31 31) TMP_BV_32_2) #b1)
                   (= ((_ extract 31 31) TMP_BV_32_0) #b1)))))
  (and (= (= ((_ extract 31 31) TMP_BV_32_2) #b1) false) a!1))

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rax.
  Value TMP_BV_32_1 (4 bytes)
    was read at address %rax.
  Value TMP_BV_32_2 (4 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    TMP_BV_32_0 (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
