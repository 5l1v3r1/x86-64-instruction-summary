code: xaddb %ah, (%rbx)

  maybe read:      { %ah %rbx }
  must read:       { %ah %rbx }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

xaddb %ah, (%rbx): Hindex0(10)
xaddb %ah, (%rbx): Hindex0(10)
xorq %rcx, %rcx: Hindex1(9)
callq .read_sf_into_rbx: Hindex8(9)
movb %ah, %bl: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
movsbq %cl, %rdi: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
movslq %r12d, %rdx: Hindex5(9)
callq .move_016_008_dx_r8b_r9b: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movb %dl, %ah: Hindex5(9)
callq .move_r9b_to_byte_6_of_rbx: Hindex8(9)
popcntq %rdx, %r9: Hindex1(9)
adcb %sil, %bl: Hindex2(9)
Formula:

%rax   : (concat (concat ((_ extract 63 16) %rax) TMP_BV_8_0) ((_ extract 7 0) %rax))

%cf    : (let ((a!1 ((_ extract 8 8)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0)))))
  (= a!1 #b1))
%pf    : (let ((a!1 ((_ extract 0 0)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!2 ((_ extract 1 1)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!3 ((_ extract 2 2)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!4 ((_ extract 3 3)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!5 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!6 ((_ extract 5 5)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!7 ((_ extract 6 6)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0))))
      (a!8 ((_ extract 7 7)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0)))))
  (not (xor (= a!1 #b1)
            (= a!2 #b1)
            (= a!3 #b1)
            (= a!4 #b1)
            (= a!5 #b1)
            (= a!6 #b1)
            (= a!7 #b1)
            (= a!8 #b1))))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 11 8) %rax))
                    (concat #b0 ((_ extract 3 0) TMP_BV_8_2))))))
  (= a!1 #b1))
%zf    : (let ((a!1 ((_ extract 7 0)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0)))))
  (= a!1 #x00))
%sf    : (let ((a!1 ((_ extract 7 7)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0)))))
  (= a!1 #b1))
%of    : (let ((a!1 ((_ extract 7 7)
             (bvadd (concat #b0 ((_ extract 15 8) %rax))
                    (concat #b0 TMP_BV_8_0)))))
(let ((a!2 (not (= (= ((_ extract 15 15) %rax) #b1) (= a!1 #b1)))))
  (and (= (= ((_ extract 15 15) %rax) #b1) (= ((_ extract 7 7) TMP_BV_8_3) #b1))
       a!2)))

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rbx.
  Value TMP_BV_8_1 (1 bytes)
    was read at address %rbx.
  Value TMP_BV_8_2 (1 bytes)
    was read at address %rbx.
  Value TMP_BV_8_3 (1 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    ((_ extract 7 0)
  (bvadd (concat #b0 ((_ extract 15 8) %rax)) (concat #b0 TMP_BV_8_0))) (1 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
