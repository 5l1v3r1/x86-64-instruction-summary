code: adcb (%rax), %ah

  maybe read:      { %rax %cf }
  must read:       { %rax %cf }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

adcb (%rax), %ah: Hindex0(10)
adcb (%rax), %ah: Hindex0(10)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
callq .set_szp_for_bl: Hindex8(9)
movb %bl, %ah: Hindex5(9)
Formula:

%rax   : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (concat ((_ extract 63 16) %rax)
                   ((_ extract 7 0) (bvadd a!1 (concat #b0 TMP_BV_8_0))))))
  (concat a!2 ((_ extract 7 0) %rax))))

%cf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
  (= ((_ extract 8 8) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
%pf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (= ((_ extract 0 0) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!3 (= ((_ extract 1 1) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!4 (= ((_ extract 2 2) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!5 (= ((_ extract 3 3) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!6 (= ((_ extract 4 4) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!7 (= ((_ extract 5 5) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!8 (= ((_ extract 6 6) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
      (a!9 (= ((_ extract 7 7) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1)))
  (not (xor a!2 a!3 a!4 a!5 a!6 a!7 a!8 a!9))))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 11 8) %rax))
                    (concat #b0 ((_ extract 3 0) TMP_BV_8_1))))))
  (= a!1 #b1))
%zf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
  (= ((_ extract 7 0) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #x00))
%sf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
  (= ((_ extract 7 7) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1))
%of    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (= ((_ extract 7 7) (bvadd a!1 (concat #b0 TMP_BV_8_0))) #b1)))
(let ((a!3 (not (= (= ((_ extract 15 15) %rax) #b1) a!2))))
  (and (= (= ((_ extract 15 15) %rax) #b1) (= ((_ extract 7 7) TMP_BV_8_2) #b1))
       a!3))))

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_1 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_2 (1 bytes)
    was read at address %rax.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
