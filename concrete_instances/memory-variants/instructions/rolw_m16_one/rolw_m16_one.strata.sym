code: rolw $0x1, (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %cf %of }
  must write:      { %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (((0x0₁ ∘ TMP_BV_16_1 + 0x0₁ ∘ TMP_BV_16_1)[16:16] = 0x1₁ ? 0x0₁ ∘ TMP_BV_16_2 + 0x1₁₇ : 0x0₁ ∘ TMP_BV_16_2) + 0x0₁ ∘ TMP_BV_16_3)[16:16] = 0x1₁
%of    : (TMP_BV_16_4[15:15] = 0x1₁ ↔ TMP_BV_16_5[15:15] = 0x1₁) ∧ !(TMP_BV_16_4[15:15] = 0x1₁ ↔ (((0x0₁ ∘ TMP_BV_16_1 + 0x0₁ ∘ TMP_BV_16_1)[16:16] = 0x1₁ ? 0x0₁ ∘ TMP_BV_16_2 + 0x1₁₇ : 0x0₁ ∘ TMP_BV_16_2) + 0x0₁ ∘ TMP_BV_16_3)[15:15] = 0x1₁)

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_1 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_2 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_3 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_4 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_5 (2 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (((0x0₁ ∘ TMP_BV_16_1 + 0x0₁ ∘ TMP_BV_16_1)[16:16] = 0x1₁ ? 0x0₁ ∘ TMP_BV_16_2 + 0x1₁₇ : 0x0₁ ∘ TMP_BV_16_2) + 0x0₁ ∘ TMP_BV_16_3)[15:0] (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv ∨ !sigfpe ∧ !sigbus ∧ false
