code: addw %bx, (%rax)

  maybe read:      { %rax %bx }
  must read:       { %rax %bx }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

addw %bx, (%rax): Hindex0(10)
addw %bx, (%rax): Hindex0(10)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
Formula:

%cf    : (let ((a!1 ((_ extract 16 16)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1)))))
  (= a!1 #b1))
%pf    : (let ((a!1 ((_ extract 0 0)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!2 ((_ extract 1 1)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!3 ((_ extract 2 2)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!4 ((_ extract 3 3)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!5 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!6 ((_ extract 5 5)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!7 ((_ extract 6 6)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1))))
      (a!8 ((_ extract 7 7)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1)))))
  (not (xor (= a!1 #b1)
            (= a!2 #b1)
            (= a!3 #b1)
            (= a!4 #b1)
            (= a!5 #b1)
            (= a!6 #b1)
            (= a!7 #b1)
            (= a!8 #b1))))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 3 0) %rbx))
                    (concat #b0 ((_ extract 3 0) TMP_BV_16_2))))))
  (= a!1 #b1))
%zf    : (let ((a!1 ((_ extract 15 0)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1)))))
  (= a!1 #x0000))
%sf    : (let ((a!1 ((_ extract 15 15)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1)))))
  (= a!1 #b1))
%of    : (let ((a!1 ((_ extract 15 15)
             (bvadd (concat #b0 ((_ extract 15 0) %rbx))
                    (concat #b0 TMP_BV_16_1)))))
(let ((a!2 (not (= (= ((_ extract 15 15) %rbx) #b1) (= a!1 #b1)))))
  (and (= (= ((_ extract 15 15) %rbx) #b1)
          (= ((_ extract 15 15) TMP_BV_16_3) #b1))
       a!2)))

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_1 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_2 (2 bytes)
    was read at address %rax.
  Value TMP_BV_16_3 (2 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    ((_ extract 15 0)
  (bvadd (concat #b0 ((_ extract 15 0) %rbx)) (concat #b0 TMP_BV_16_1))) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
