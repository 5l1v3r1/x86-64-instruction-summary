code: adcl $0x0, (%rbx)

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Base Instruction!!
adcl $0x0, (%rbx): Hindex0(10)
Base Instruction!!
adcl $0x0, (%rbx): Hindex0(10)
adcl %ecx, %ebx: Hindex2(9)
Formula:

%cf    : (= ((_ extract 32 32)
     (bvadd (ite %cf
                 #b000000000000000000000000000000001
                 #b000000000000000000000000000000000)
            (concat #b0 TMP_BV_32_0)))
   #b1)
%pf    : (let ((a!1 (= ((_ extract 0 0)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!2 (= ((_ extract 1 1)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!3 (= ((_ extract 2 2)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!4 (= ((_ extract 3 3)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!5 (= ((_ extract 4 4)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!6 (= ((_ extract 5 5)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!7 (= ((_ extract 6 6)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1))
      (a!8 (= ((_ extract 7 7)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : false
%zf    : (= ((_ extract 31 0)
     (bvadd (ite %cf
                 #b000000000000000000000000000000001
                 #b000000000000000000000000000000000)
            (concat #b0 TMP_BV_32_0)))
   #x00000000)
%sf    : (= ((_ extract 31 31)
     (bvadd (ite %cf
                 #b000000000000000000000000000000001
                 #b000000000000000000000000000000000)
            (concat #b0 TMP_BV_32_0)))
   #b1)
%of    : (let ((a!1 (= ((_ extract 31 31)
                (bvadd (ite %cf
                            #b000000000000000000000000000000001
                            #b000000000000000000000000000000000)
                       (concat #b0 TMP_BV_32_0)))
              #b1)))
  (and (= false (= ((_ extract 31 31) TMP_BV_32_0) #b1)) (not (= false a!1))))

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    ((_ extract 31 0)
  (bvadd (ite %cf
              #b000000000000000000000000000000001
              #b000000000000000000000000000000000)
         (concat #b0 TMP_BV_32_0))) (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
