code: rclb %cl, (%rax)

  maybe read:      { %rax %cl %cf }
  must read:       { %rax %cl %cf }
  maybe write:     { %cf %of }
  must write:      { }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (== (rol (concat (if <%cf> then <0x1|1> else <0x0|1>) <TMP_BV_8_0|8>) (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>))[8:8] <0x1|1>)
%of    : (or (and (== (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>)[7:0] <0x1|8>) (xor (== (rol (concat (if <%cf> then <0x1|1> else <0x0|1>) <TMP_BV_8_0|8>) (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>))[8:8] <0x1|1>) (== (rol (concat (if <%cf> then <0x1|1> else <0x0|1>) <TMP_BV_8_0|8>) (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>))[7:7] <0x1|1>))) (and (not (== (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>)[7:0] <0x1|8>)) (or (and (not (== (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>)[7:0] <0x0|8>)) <%of>) (and (not (not (== (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>)[7:0] <0x0|8>))) <TMP_BOOL_0>))))

Information about memory reads:
  Value <TMP_BV_8_0|8> (1 bytes)
    was read at address <%rax|64>.

Information about memory writes:
  Address <%rax|64> was updated to
    (rol (concat (if <%cf> then <0x1|1> else <0x0|1>) <TMP_BV_8_0|8>) (mod (concat <0x0|1> (and <%rcx|64>[7:0] <0x1f|8>)) <0x9|9>))[7:0] (1 bytes).

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : (or (or <sigsegv> (and (and (not <sigfpe>) (not <sigbus>)) FALSE)) (and (and (not <sigfpe>) (not <sigbus>)) FALSE))
