code: sarq $0x1, (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

sarq $0x1, (%rax): Hindex0(10)
sarq $0x1, (%rax): Hindex0(10)
movslq %edx, %rbx: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movswq %cx, %r11: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
orq %r11, %r8: Hindex1(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .set_szp_for_ebx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_ecx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
callq .read_sf_into_rcx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_edx: Hindex8(9)
callq .move_032_016_edx_r10w_r11w: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %ax: Hindex2(9)
popcntq %rax, %rbx: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
callq .read_zf_into_rbx: Hindex8(9)
sarq %cl, %rbx: Hindex7(9)
movq $0x20, %rbx: Hindex5(9)
callq .move_016_008_cx_r12b_r13b: Hindex8(9)
callq .move_008_016_r12b_r13b_bx: Hindex8(9)
movq $0xffffffffffffffff, %rcx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
callq .set_szp_for_rbx: Hindex8(9)
Formula:

%cf    : (let ((a!1 (= ((_ extract 0 0)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1)))
  (or (and true a!1) false))
%pf    : (let ((a!1 (= ((_ extract 1 1)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!2 (= ((_ extract 2 2)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!3 (= ((_ extract 3 3)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!4 (= ((_ extract 4 4)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!5 (= ((_ extract 5 5)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!6 (= ((_ extract 6 6)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!7 (= ((_ extract 7 7)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!8 (= ((_ extract 8 8)
                (bvashr (concat TMP_BV_64_0 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : TMP_BOOL_11
%zf    : (= ((_ extract 64 1)
     (bvashr (concat TMP_BV_64_0 #b0)
             (concat #b000000000000000000000000000000000000000000000000000000000
                     #x01)))
   #x0000000000000000)
%sf    : (= ((_ extract 64 64)
     (bvashr (concat TMP_BV_64_0 #b0)
             (concat #b000000000000000000000000000000000000000000000000000000000
                     #x01)))
   #b1)
%of    : false

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    ((_ extract 64 1)
  (bvashr (concat TMP_BV_64_0 #b0)
          (concat #b000000000000000000000000000000000000000000000000000000000
                  #x01))) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
