code: vpsllw (%rax), %xmm2, %xmm1

  maybe read:      { %rax %xmm2 }
  must read:       { %rax %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

vpsllw (%rax), %xmm2, %xmm1: Hindex2(10)
vpsllw (%rax), %xmm2, %xmm1: Hindex2(10)
Formula:

%ymm1  : (let ((a!1 (concat (bvshl ((_ extract 47 32) %ymm2)
                          ((_ extract 15 0) TMP_BV_128_0))
                   (concat (bvshl ((_ extract 31 16) %ymm2)
                                  ((_ extract 15 0) TMP_BV_128_0))
                           (bvshl ((_ extract 15 0) %ymm2)
                                  ((_ extract 15 0) TMP_BV_128_0))))))
(let ((a!2 (concat (bvshl ((_ extract 79 64) %ymm2)
                          ((_ extract 15 0) TMP_BV_128_0))
                   (concat (bvshl ((_ extract 63 48) %ymm2)
                                  ((_ extract 15 0) TMP_BV_128_0))
                           a!1))))
(let ((a!3 (concat (bvshl ((_ extract 111 96) %ymm2)
                          ((_ extract 15 0) TMP_BV_128_0))
                   (concat (bvshl ((_ extract 95 80) %ymm2)
                                  ((_ extract 15 0) TMP_BV_128_0))
                           a!2))))
(let ((a!4 (concat #x00000000000000000000000000000000
                   (concat (bvshl ((_ extract 127 112) %ymm2)
                                  ((_ extract 15 0) TMP_BV_128_0))
                           a!3))))
  (ite (bvugt ((_ extract 63 0) TMP_BV_128_0) #x000000000000000f)
       (concat #x00000000000000000000000000000000
               #x00000000000000000000000000000000)
       a!4)))))

Information about memory reads:
  Value TMP_BV_128_0 (16 bytes)
    was read at address %rax.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
