code: sarw $0x1, (%rbx)

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

sarw $0x1, (%rbx): Hindex0(10)
sarw $0x1, (%rbx): Hindex0(10)
movswq %bx, %r12: Hindex5(9)
movslq %edx, %rbx: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movswq %cx, %r11: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
orq %r11, %r8: Hindex1(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .set_szp_for_ebx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_ecx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
callq .read_sf_into_rcx: Hindex8(9)
callq .move_032_016_ecx_r12w_r13w: Hindex8(9)
callq .move_016_032_r12w_r13w_edx: Hindex8(9)
callq .move_032_016_edx_r10w_r11w: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %ax: Hindex2(9)
popcntq %rax, %rbx: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
callq .read_zf_into_rbx: Hindex8(9)
sarq %cl, %rbx: Hindex7(9)
movq $0x20, %rbx: Hindex5(9)
callq .move_016_008_cx_r12b_r13b: Hindex8(9)
callq .move_008_016_r12b_r13b_bx: Hindex8(9)
movq $0xffffffffffffffff, %rcx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
callq .set_szp_for_rbx: Hindex8(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
Formula:

%cf    : (let ((a!1 ((_ extract 0 0)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01)))))
  (or (and true (= a!1 #b1)) false))
%pf    : (let ((a!1 ((_ extract 1 1)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!2 ((_ extract 2 2)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!3 ((_ extract 3 3)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!4 ((_ extract 4 4)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!5 ((_ extract 5 5)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!6 ((_ extract 6 6)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!7 ((_ extract 7 7)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01))))
      (a!8 ((_ extract 8 8)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01)))))
  (not (xor (= a!1 #b1)
            (= a!2 #b1)
            (= a!3 #b1)
            (= a!4 #b1)
            (= a!5 #b1)
            (= a!6 #b1)
            (= a!7 #b1)
            (= a!8 #b1))))
%af    : TMP_BOOL_12
%zf    : (let ((a!1 ((_ extract 64 1)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01)))))
  (= a!1 #x0000000000000000))
%sf    : (let ((a!1 ((_ extract 64 64)
             (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
                     (concat #b000000000000000000000000000000000000000000000000000000000
                             #x01)))))
  (= a!1 #b1))
%of    : false

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rbx.
  Value TMP_BV_16_1 (2 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    ((_ extract 16 1)
  (bvashr (concat ((_ sign_extend 48) TMP_BV_16_1) #b0)
          (concat #b000000000000000000000000000000000000000000000000000000000
                  #x01))) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
