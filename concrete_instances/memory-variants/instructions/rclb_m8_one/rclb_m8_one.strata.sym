code: rclb $0x1, (%rax)

  maybe read:      { %rax %cf }
  must read:       { %rax %cf }
  maybe write:     { %cf %of }
  must write:      { %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

rclb $0x1, (%rax): Hindex0(10)
rclb $0x1, (%rax): Hindex0(10)
movq $0x8, %rbx: Hindex5(9)
callq .move_032_016_ebx_r10w_r11w: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
callq .read_pf_into_rbx: Hindex8(9)
adcb %cl, %bl: Hindex2(9)
movq %rax, %rbx: Hindex5(9)
adcb %bl, %bl: Hindex2(9)
Formula:

%cf    : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 TMP_BV_8_1) #b000000001)
                       (concat #b0 TMP_BV_8_1))
                  (concat #b0 TMP_BV_8_1))))
  (= ((_ extract 8 8) a!1) #b1))
%of    : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 TMP_BV_8_1) #b000000001)
                       (concat #b0 TMP_BV_8_1))
                  (concat #b0 TMP_BV_8_1))))
(let ((a!2 (not (= (= ((_ extract 7 7) TMP_BV_8_2) #b1)
                   (= ((_ extract 7 7) a!1) #b1)))))
  (and (= (= ((_ extract 7 7) TMP_BV_8_2) #b1)
          (= ((_ extract 7 7) TMP_BV_8_3) #b1))
       a!2)))

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_1 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_2 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_3 (1 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 TMP_BV_8_1) #b000000001)
                       (concat #b0 TMP_BV_8_1))
                  (concat #b0 TMP_BV_8_1))))
  ((_ extract 7 0) a!1)) (1 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
