code: sbbq %rcx, (%rbx)

  maybe read:      { %rcx %rbx %cf }
  must read:       { %rcx %rbx %cf }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

sbbq %rcx, (%rbx): Hindex0(10)
sbbq %rcx, (%rbx): Hindex0(10)
movq $0xfffffffffffffffe, %rdx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
callq .read_zf_into_rcx: Hindex8(9)
adcb %cl, %bl: Hindex2(9)
xorq %rdx, %rbx: Hindex1(9)
callq .read_cf_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r8d_r9d: Hindex8(9)
callq .move_r8b_to_byte_5_of_rbx: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
movq $0xffffffffffffffff, %rsi: Hindex5(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
callq .read_cf_into_rbx: Hindex8(9)
adcw %bx, %ax: Hindex2(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
movswq %si, %rbx: Hindex5(9)
movb %cl, %bh: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
callq .set_szp_for_bl: Hindex8(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
callq .clear_cf: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movsbq %r15b, %rcx: Hindex5(9)
adcb %cl, %r13b: Hindex2(9)
movslq %r13d, %rbx: Hindex5(9)
movb %dl, %ah: Hindex5(9)
movq $0x4, %rdi: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcb %al, %al: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
callq .set_szp_for_bl: Hindex8(9)
xorq %r8, %r8: Hindex1(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %ax: Hindex2(9)
popcntq %rax, %rbx: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
xorq %rcx, %rcx: Hindex1(9)
callq .read_sf_into_rbx: Hindex8(9)
movb %ah, %bl: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
movsbq %cl, %rdi: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
movslq %r12d, %rdx: Hindex5(9)
callq .move_016_008_dx_r8b_r9b: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movb %dl, %ah: Hindex5(9)
callq .move_r9b_to_byte_6_of_rbx: Hindex8(9)
popcntq %rdx, %r9: Hindex1(9)
adcb %sil, %bl: Hindex2(9)
movslq %ebx, %rbx: Hindex5(9)
adcl %ebx, %ebx: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
adcq %rcx, %rbx: Hindex2(9)
callq .read_cf_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r8d_r9d: Hindex8(9)
callq .move_r8b_to_byte_5_of_rbx: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
movq $0xffffffffffffffff, %rsi: Hindex5(9)
callq .move_016_008_bx_r10b_r11b: Hindex8(9)
callq .move_016_008_cx_r8b_r9b: Hindex8(9)
callq .move_008_016_r10b_r11b_cx: Hindex8(9)
callq .move_008_016_r8b_r9b_bx: Hindex8(9)
callq .read_cf_into_rbx: Hindex8(9)
adcw %bx, %ax: Hindex2(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
movswq %si, %rbx: Hindex5(9)
movb %cl, %bh: Hindex5(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
callq .set_szp_for_bl: Hindex8(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
callq .clear_cf: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movsbq %r15b, %rcx: Hindex5(9)
adcb %cl, %r13b: Hindex2(9)
movslq %r13d, %rbx: Hindex5(9)
movb %dl, %ah: Hindex5(9)
movq $0x4, %rdi: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcb %al, %al: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
callq .set_szp_for_bl: Hindex8(9)
xorq %r8, %r8: Hindex1(9)
movq $0x40, %rbx: Hindex5(9)
movb %ah, %bl: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
callq .read_cf_into_rcx: Hindex8(9)
movb %cl, %ah: Hindex5(9)
movswq %bx, %rdx: Hindex5(9)
xorq %rbp, %rdx: Hindex1(9)
movslq %edx, %rbx: Hindex5(9)
callq .set_szp_for_bl: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %ax: Hindex2(9)
popcntq %rax, %rbx: Hindex1(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
xorq %rcx, %rcx: Hindex1(9)
callq .read_sf_into_rbx: Hindex8(9)
movb %ah, %bl: Hindex5(9)
movq $0x0, %rbx: Hindex5(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
movsbq %cl, %rdi: Hindex5(9)
adcb %dil, %bl: Hindex2(9)
movslq %r12d, %rdx: Hindex5(9)
callq .move_016_008_dx_r8b_r9b: Hindex8(9)
callq .set_of: Hindex8(9)
callq .read_of_into_rbx: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movsbq %cl, %r10: Hindex5(9)
callq .move_032_064_r10d_r11d_rbx: Hindex8(9)
movb %dl, %ah: Hindex5(9)
callq .move_r9b_to_byte_6_of_rbx: Hindex8(9)
popcntq %rdx, %r9: Hindex1(9)
adcb %sil, %bl: Hindex2(9)
movslq %ebx, %rbx: Hindex5(9)
adcl %ebx, %ebx: Hindex2(9)
adcb %bl, %bl: Hindex2(9)
Formula:

%cf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 (bvxor %rcx #xffffffffffffffff))
                       #b00000000000000000000000000000000000000000000000000000000000000001)
                (concat #b0 (bvxor %rcx #xffffffffffffffff)))))
(let ((a!3 (= ((_ extract 64 64) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1)))
  (= ((_ extract 8 8)
       (bvadd (ite a!3 #b000000000 #b011111111)
              (ite a!3 #b000000000 #b011111111)))
     #b1))))
%pf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 (bvxor %rcx #xffffffffffffffff))
                       #b00000000000000000000000000000000000000000000000000000000000000001)
                (concat #b0 (bvxor %rcx #xffffffffffffffff)))))
(let ((a!3 (= ((_ extract 0 0) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!4 (= ((_ extract 1 1) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!5 (= ((_ extract 2 2) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!6 (= ((_ extract 3 3) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!7 (= ((_ extract 4 4) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!8 (= ((_ extract 5 5) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!9 (= ((_ extract 6 6) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1))
      (a!10 (= ((_ extract 7 7) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1)))
  (not (xor a!3 a!4 a!5 a!6 a!7 a!8 a!9 a!10)))))
%af    : (let ((a!1 (bvadd (concat #b0 (bvxor ((_ extract 3 0) %rcx) #xf))
                  (concat #b0 ((_ extract 3 0) TMP_BV_64_1)))))
  (= ((_ extract 4 4) a!1) #b1))
%zf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 (bvxor %rcx #xffffffffffffffff))
                       #b00000000000000000000000000000000000000000000000000000000000000001)
                (concat #b0 (bvxor %rcx #xffffffffffffffff)))))
  (= ((_ extract 63 0) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #x0000000000000000)))
%sf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 (bvxor %rcx #xffffffffffffffff))
                       #b00000000000000000000000000000000000000000000000000000000000000001)
                (concat #b0 (bvxor %rcx #xffffffffffffffff)))))
  (= ((_ extract 63 63) (bvadd a!2 (concat #b0 TMP_BV_64_0))) #b1)))
%of    : (let ((a!1 (= (= (bvxor ((_ extract 63 63) %rcx) #b1) #b1)
              (= ((_ extract 63 63) TMP_BV_64_2) #b1)))
      (a!2 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!3 (ite a!2
                (bvadd (concat #b0 (bvxor %rcx #xffffffffffffffff))
                       #b00000000000000000000000000000000000000000000000000000000000000001)
                (concat #b0 (bvxor %rcx #xffffffffffffffff)))))
(let ((a!4 (= ((_ extract 63 63) (bvadd a!3 (concat #b0 TMP_BV_64_0))) #b1)))
(let ((a!5 (= (= (bvxor ((_ extract 63 63) %rcx) #b1) #b1) a!4)))
  (and a!1 (not a!5))))))

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rbx.
  Value TMP_BV_64_1 (8 bytes)
    was read at address %rbx.
  Value TMP_BV_64_2 (8 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 (bvxor %rcx #xffffffffffffffff))
                       #b00000000000000000000000000000000000000000000000000000000000000001)
                (concat #b0 (bvxor %rcx #xffffffffffffffff)))))
  ((_ extract 63 0) (bvadd a!2 (concat #b0 TMP_BV_64_0))))) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
