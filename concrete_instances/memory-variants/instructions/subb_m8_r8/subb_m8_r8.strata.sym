code: subb %bl, (%rax)

  maybe read:      { %rax %bl }
  must read:       { %rax %bl }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (((0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[8:8] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[8:8] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[7:7] = 0x1₁)
%af    : (0x0₁ ∘ TMP_BV_8_2[3:0] + 0x0₁ ∘ (%rbx[3:0] ⊕ 0xf₄))[4:4] = 0x1₁
%zf    : (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[7:0] = 0x0₈
%sf    : (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[7:7] = 0x1₁
%of    : (TMP_BV_8_3[7:7] = 0x1₁ ↔ (%rbx[7:7] ⊕ 0x1₁) = 0x1₁) ∧ !(TMP_BV_8_3[7:7] = 0x1₁ ↔ (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[7:7] = 0x1₁)

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_1 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_2 (1 bytes)
    was read at address %rax.
  Value TMP_BV_8_3 (1 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (0x0₁ ∘ TMP_BV_8_1 + 0x1₉ + 0x0₁ ∘ (%rbx[7:0] ⊕ 0xff₈))[7:0] (1 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv ∨ !sigfpe ∧ !sigbus ∧ false
