code: sall %cl, (%rax)

  maybe read:      { %rax %cl }
  must read:       { %rax %cl }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { }
  maybe undef:     { %cf %af %of }
  must undef:      { }
  required flags:  { }

sall %cl, (%rax): Hindex8(10)
sall %cl, (%rax): Hindex8(10)
Formula:

%cf    : (let ((a!1 (and (bvuge (bvand ((_ extract 7 0) %rcx) #x1f) #x20) TMP_BOOL_0))
      (a!2 (not (bvuge (bvand ((_ extract 7 0) %rcx) #x1f) #x20)))
      (a!3 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!4 (bvshl (concat #b0 TMP_BV_32_0)
                  (concat #b0000000000000000000000000
                          (bvand ((_ extract 7 0) %rcx) #x1f)))))
(let ((a!5 (or (and a!3 (= ((_ extract 32 32) a!4) #b1)) (and (not a!3) %cf))))
  (or a!1 (and a!2 a!5))))
%pf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!2 (bvshl (concat #b0 TMP_BV_32_0)
                  (concat #b0000000000000000000000000
                          (bvand ((_ extract 7 0) %rcx) #x1f)))))
(let ((a!3 (not (xor (= ((_ extract 0 0) a!2) #b1)
                     (= ((_ extract 1 1) a!2) #b1)
                     (= ((_ extract 2 2) a!2) #b1)
                     (= ((_ extract 3 3) a!2) #b1)
                     (= ((_ extract 4 4) a!2) #b1)
                     (= ((_ extract 5 5) a!2) #b1)
                     (= ((_ extract 6 6) a!2) #b1)
                     (= ((_ extract 7 7) a!2) #b1)))))
  (or (and a!1 a!3) (and (not a!1) %pf))))
%af    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00))))
  (or (and a!1 TMP_BOOL_1) (and (not a!1) %af)))
%zf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!2 (bvshl (concat #b0 TMP_BV_32_0)
                  (concat #b0000000000000000000000000
                          (bvand ((_ extract 7 0) %rcx) #x1f)))))
  (or (and a!1 (= ((_ extract 31 0) a!2) #x00000000)) (and (not a!1) %zf)))
%sf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!2 (bvshl (concat #b0 TMP_BV_32_0)
                  (concat #b0000000000000000000000000
                          (bvand ((_ extract 7 0) %rcx) #x1f)))))
  (or (and a!1 (= ((_ extract 31 31) a!2) #b1)) (and (not a!1) %sf)))
%of    : (let ((a!1 (and (bvuge (bvand ((_ extract 7 0) %rcx) #x1f) #x20) TMP_BOOL_0))
      (a!2 (not (bvuge (bvand ((_ extract 7 0) %rcx) #x1f) #x20)))
      (a!3 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!4 (bvshl (concat #b0 TMP_BV_32_0)
                  (concat #b0000000000000000000000000
                          (bvand ((_ extract 7 0) %rcx) #x1f))))
      (a!8 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x01))))
(let ((a!5 (or (and a!3 (= ((_ extract 32 32) a!4) #b1)) (and (not a!3) %cf))))
(let ((a!6 (not (= (or a!1 (and a!2 a!5)) (= ((_ extract 31 31) a!4) #b1)))))
(let ((a!7 (and (= (bvand ((_ extract 7 0) %rcx) #x1f) #x01) a!6)))
  (or a!7 (and a!8 %of))))))

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    (let ((a!1 (bvshl (concat #b0 TMP_BV_32_0)
                  (concat #b0000000000000000000000000
                          (bvand ((_ extract 7 0) %rcx) #x1f)))))
  ((_ extract 31 0) a!1)) (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))
