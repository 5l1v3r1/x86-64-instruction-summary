code: decl (%rax)

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %pf %af %zf %sf %of }
  must write:      { %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

decl (%rax): Hindex0(10)
decl (%rax): Hindex0(10)
movq $0xffffffffffffffff, %rcx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
Formula:

%pf    : (let ((a!1 (= ((_ extract 0 0)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!2 (= ((_ extract 1 1)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!3 (= ((_ extract 2 2)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!4 (= ((_ extract 3 3)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!5 (= ((_ extract 4 4)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!6 (= ((_ extract 5 5)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!7 (= ((_ extract 6 6)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1))
      (a!8 (= ((_ extract 7 7)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 3 0) TMP_BV_32_1)) #b01111))))
  (= a!1 #b1))
%zf    : (= ((_ extract 31 0)
     (bvadd (concat #b0 TMP_BV_32_0) #b011111111111111111111111111111111))
   #x00000000)
%sf    : (= ((_ extract 31 31)
     (bvadd (concat #b0 TMP_BV_32_0) #b011111111111111111111111111111111))
   #b1)
%of    : (let ((a!1 (= ((_ extract 31 31)
                (bvadd (concat #b0 TMP_BV_32_0)
                       #b011111111111111111111111111111111))
              #b1)))
(let ((a!2 (not (= (= ((_ extract 31 31) TMP_BV_32_2) #b1) a!1))))
  (and (= (= ((_ extract 31 31) TMP_BV_32_2) #b1) true) a!2)))

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rax.
  Value TMP_BV_32_1 (4 bytes)
    was read at address %rax.
  Value TMP_BV_32_2 (4 bytes)
    was read at address %rax.

Information about memory writes:
  Address %rax was updated to
    ((_ extract 31 0)
  (bvadd (concat #b0 TMP_BV_32_0) #b011111111111111111111111111111111)) (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))
