code: negw (%rbx)

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (#ifMInt (notBool eqMInt( TMP_BV_16_0, mi(16, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (eqMInt( extractMInt( TMP_BV_16_0, 11, 12), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 11, 12), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 0, 1)
%of    : (#ifMInt (eqMInt( extractMInt( TMP_BV_16_0, 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( TMP_BV_16_0)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    Value addMInt(mi(16, 1), negMInt( TMP_BV_16_0)) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
