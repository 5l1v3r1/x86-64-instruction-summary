code: vpermilps $0x0, (%rbx), %ymm1

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Formula:

%ymm1  : concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 0, 2), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 96, 128) #else (#ifMInt eqMInt( extractMInt( Imm8, 0, 2), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 64, 96) #else (#ifMInt eqMInt( extractMInt( Imm8, 0, 2), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 32, 64) #else extractMInt( TMP_BV_256_0, 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 2, 4), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 96, 128) #else (#ifMInt eqMInt( extractMInt( Imm8, 2, 4), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 64, 96) #else (#ifMInt eqMInt( extractMInt( Imm8, 2, 4), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 32, 64) #else extractMInt( TMP_BV_256_0, 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 4, 6), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 96, 128) #else (#ifMInt eqMInt( extractMInt( Imm8, 4, 6), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 64, 96) #else (#ifMInt eqMInt( extractMInt( Imm8, 4, 6), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 32, 64) #else extractMInt( TMP_BV_256_0, 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 6, 8), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 96, 128) #else (#ifMInt eqMInt( extractMInt( Imm8, 6, 8), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 64, 96) #else (#ifMInt eqMInt( extractMInt( Imm8, 6, 8), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 32, 64) #else extractMInt( TMP_BV_256_0, 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 0, 2), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 224, 256) #else (#ifMInt eqMInt( extractMInt( Imm8, 0, 2), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 192, 224) #else (#ifMInt eqMInt( extractMInt( Imm8, 0, 2), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 160, 192) #else extractMInt( TMP_BV_256_0, 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 2, 4), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 224, 256) #else (#ifMInt eqMInt( extractMInt( Imm8, 2, 4), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 192, 224) #else (#ifMInt eqMInt( extractMInt( Imm8, 2, 4), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 160, 192) #else extractMInt( TMP_BV_256_0, 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( Imm8, 4, 6), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 224, 256) #else (#ifMInt eqMInt( extractMInt( Imm8, 4, 6), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 192, 224) #else (#ifMInt eqMInt( extractMInt( Imm8, 4, 6), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 160, 192) #else extractMInt( TMP_BV_256_0, 128, 160) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( Imm8, 6, 8), mi(2, 0)) #then extractMInt( TMP_BV_256_0, 224, 256) #else (#ifMInt eqMInt( extractMInt( Imm8, 6, 8), mi(2, 1)) #then extractMInt( TMP_BV_256_0, 192, 224) #else (#ifMInt eqMInt( extractMInt( Imm8, 6, 8), mi(2, 2)) #then extractMInt( TMP_BV_256_0, 160, 192) #else extractMInt( TMP_BV_256_0, 128, 160) #fi) #fi) #fi))))))))

Information about memory reads:
  Value TMP_BV_256_0 (32 bytes)
    was read at address %rbx.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
