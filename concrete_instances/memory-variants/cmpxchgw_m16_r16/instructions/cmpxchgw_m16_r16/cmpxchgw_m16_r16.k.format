code: cmpxchgw %cx, (%rbx)

  maybe read:      { %ax %cx %rbx }
  must read:       { %ax %cx %rbx }
  maybe write:     { %ax %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (#ifMInt eqMInt( extractMInt( %rax, 48, 64), TMP_BV_16_0) #then %rax #else concatenateMInt( extractMInt( %rax, 0, 48), TMP_BV_16_0) #fi)

%cf    : (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : xorMInt( xorMInt( extractMInt( TMP_BV_16_0, 11, 12), extractMInt( %rax, 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 12, 13))
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 1, 2)
%of    : (#ifMInt ((eqMInt( negMInt( extractMInt( TMP_BV_16_0, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( %rax, 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( TMP_BV_16_0, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( TMP_BV_16_0)), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    (#ifMInt eqMInt( extractMInt( %rax, 48, 64), TMP_BV_16_0) #then extractMInt( %rcx, 48, 64) #else TMP_BV_16_0 #fi) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
