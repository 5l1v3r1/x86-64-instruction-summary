code: sbbw (%rcx), %bx

  maybe read:      { %rcx %bx %cf }
  must read:       { %rcx %bx %cf }
  maybe write:     { %bx %cf %pf %af %zf %sf %of }
  must write:      { %bx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

sbbw (%rcx), %bx: Hindex2(9)
sbbw (%rcx), %bx: Hindex2(9)
Formula:

%rbx   : (let ((a!1 (ite %cf
                (concat #b0 (bvnot TMP_BV_16_0))
                (bvadd (concat #b0 (bvnot TMP_BV_16_0)) #b00000000000000001))))
(let ((a!2 ((_ extract 15 0) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (concat ((_ extract 63 16) %rbx) a!2)))

%cf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot TMP_BV_16_0))
                (bvadd (concat #b0 (bvnot TMP_BV_16_0)) #b00000000000000001))))
(let ((a!2 ((_ extract 16 16) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (not (= a!2 #b1))))
%pf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot TMP_BV_16_0))
                (bvadd (concat #b0 (bvnot TMP_BV_16_0)) #b00000000000000001))))
(let ((a!2 ((_ extract 0 0) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!3 ((_ extract 1 1) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!4 ((_ extract 2 2) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!5 ((_ extract 3 3) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!6 ((_ extract 4 4) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!7 ((_ extract 5 5) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!8 ((_ extract 6 6) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx)))))
      (a!9 ((_ extract 7 7) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (not (xor (= a!2 #b1)
            (= a!3 #b1)
            (= a!4 #b1)
            (= a!5 #b1)
            (= a!6 #b1)
            (= a!7 #b1)
            (= a!8 #b1)
            (= a!9 #b1)))))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 3 0) TMP_BV_16_1))
                    (concat #b0 ((_ extract 3 0) %rbx))))))
  (= a!1 #b1))
%zf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot TMP_BV_16_0))
                (bvadd (concat #b0 (bvnot TMP_BV_16_0)) #b00000000000000001))))
(let ((a!2 ((_ extract 15 0) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (= a!2 #x0000)))
%sf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot TMP_BV_16_0))
                (bvadd (concat #b0 (bvnot TMP_BV_16_0)) #b00000000000000001))))
(let ((a!2 ((_ extract 15 15) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (= a!2 #b1)))
%of    : (let ((a!1 (= (= (bvnot ((_ extract 15 15) TMP_BV_16_0)) #b1)
              (= ((_ extract 15 15) %rbx) #b1)))
      (a!2 (ite %cf
                (concat #b0 (bvnot TMP_BV_16_0))
                (bvadd (concat #b0 (bvnot TMP_BV_16_0)) #b00000000000000001))))
(let ((a!3 ((_ extract 15 15) (bvadd a!2 (concat #b0 ((_ extract 15 0) %rbx))))))
(let ((a!4 (= (= (bvnot ((_ extract 15 15) TMP_BV_16_0)) #b1) (= a!3 #b1))))
  (and a!1 (not a!4)))))

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rcx.
  Value TMP_BV_16_1 (2 bytes)
    was read at address %rcx.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))
