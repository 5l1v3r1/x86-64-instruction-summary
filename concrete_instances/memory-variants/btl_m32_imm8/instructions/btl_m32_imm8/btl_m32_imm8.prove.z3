



(declare-const TMP_BV_8 (_ BitVec 8))
(declare-const TMP_BV_16 (_ BitVec 16))
(declare-const TMP_BV_32 (_ BitVec 32))
(declare-const TMP_BV_64 (_ BitVec 64))
(declare-const TMP_BV_128 (_ BitVec 128))
(declare-const TMP_BV_256 (_ BitVec 256))
(declare-const TMP_BOOL Bool)
(declare-const rbx (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rip (_ BitVec 64))
(declare-const ymm1 (_ BitVec 256))
(declare-const ymm2 (_ BitVec 256))
(declare-const ymm3 (_ BitVec 256))
(declare-const ymm0 (_ BitVec 256))
(declare-const zf Bool)
(declare-const sf Bool)
(declare-const cf Bool)
(declare-const pf Bool)
(declare-const af Bool)
(declare-const of Bool)



; Uninterpreted binary function declaration
(declare-fun add_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun add_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun sub_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun sub_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun mul_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun mul_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun maxcmp_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 1))
(declare-fun maxcmp_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 1))
(declare-fun mincmp_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 1))
(declare-fun mincmp_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 1))

(declare-fun idiv_quotient_int8   ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun idiv_remainder_int8  ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun idiv_quotient_int16  ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun idiv_remainder_int16 ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun idiv_quotient_int32  ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun idiv_remainder_int32 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun idiv_quotient_int64  ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun idiv_remainder_int64 ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_quotient_int8   ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun div_remainder_int8  ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun div_quotient_int16  ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun div_remainder_int16 ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun div_quotient_int32  ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_remainder_int32 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_quotient_int64  ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_remainder_int64 ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))

; Uninterpreted unary function declaration
(declare-fun approx_reciprocal_double       ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun approx_reciprocal_single       ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun sqrt_double                    ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun sqrt_single                    ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun approx_reciprocal_sqrt_double  ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun approx_reciprocal_sqrt_single  ((_ BitVec 32)) (_ BitVec 32) )

(declare-fun cvt_single_to_double           ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_double_to_single           ((_ BitVec 64)) (_ BitVec 32) )

(declare-fun cvt_single_to_int32            ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_single_to_int32_truncate   ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_single_to_int64            ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_double_to_int32            ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_double_to_int32_truncate   ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_double_to_int64            ((_ BitVec 64)) (_ BitVec 64) )

(declare-fun cvt_int32_to_single            ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_int32_to_double            ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_int64_to_single            ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_int64_to_double            ((_ BitVec 64)) (_ BitVec 64) )

; Uninterpreted ternary function declaration
(declare-fun vfmadd132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmadd132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmsub132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmsub132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))


( push )
( echo "btl_m32_imm8::af")
(assert (not (=
TMP_BOOL

TMP_BOOL
)))
(check-sat)
( pop )



( push )
( echo "btl_m32_imm8::cf")
(assert (not (=
(let ((a!1 (concat #b0
((_ extract 47 40)
(bvadd (concat #b0 #xffffffffffffffff)
(concat #b0 #x0000000000000000)))))
(a!2 (concat #x00000000
((_ extract 31 0)
(bvadd (concat #b0 #xffffffffffffffff)
(concat #b0 #x0000000000000000))))))
(let ((a!3 (ite (= ((_ extract 8 8) (bvadd a!1 a!1)) #b1)
(bvadd (concat #b0 (bvxor #x0000000000000000 a!2))
#b00000000000000000000000000000000000000000000000000000000000000001)
(concat #b0 (bvxor #x0000000000000000 a!2)))))
(let ((a!4 ((_ extract 63 63)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!5 ((_ extract 62 62)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!6 ((_ extract 61 61)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!7 ((_ extract 60 60)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!9 ((_ extract 59 59)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!10 ((_ extract 58 58)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!11 ((_ extract 57 57)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!12 ((_ extract 56 56)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!14 ((_ extract 55 55)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!15 ((_ extract 54 54)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!16 ((_ extract 53 53)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!17 ((_ extract 52 52)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!19 ((_ extract 51 51)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!20 ((_ extract 50 50)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!21 ((_ extract 49 49)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!22 ((_ extract 48 48)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!25 ((_ extract 47 47)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!26 ((_ extract 46 46)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!27 ((_ extract 45 45)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!28 ((_ extract 44 44)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!30 ((_ extract 43 43)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!31 ((_ extract 42 42)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!32 ((_ extract 41 41)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!33 ((_ extract 40 40)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!35 ((_ extract 39 39)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!36 ((_ extract 38 38)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!37 ((_ extract 37 37)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!38 ((_ extract 36 36)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!40 ((_ extract 35 35)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!41 ((_ extract 34 34)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!42 ((_ extract 33 33)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!43 ((_ extract 32 32)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!46 ((_ extract 31 31)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!47 ((_ extract 30 30)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!48 ((_ extract 29 29)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!49 ((_ extract 28 28)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!51 ((_ extract 27 27)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!52 ((_ extract 26 26)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!53 ((_ extract 25 25)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!54 ((_ extract 24 24)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!56 ((_ extract 23 23)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!57 ((_ extract 22 22)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!58 ((_ extract 21 21)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!59 ((_ extract 20 20)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!61 ((_ extract 19 19)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!62 ((_ extract 18 18)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!63 ((_ extract 17 17)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!64 ((_ extract 16 16)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!67 ((_ extract 15 15)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!68 ((_ extract 14 14)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!69 ((_ extract 13 13)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!70 ((_ extract 12 12)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!72 ((_ extract 11 11)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!73 ((_ extract 10 10)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!74 ((_ extract 9 9)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!75 ((_ extract 8 8)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!77 ((_ extract 7 7)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!78 ((_ extract 6 6)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!79 ((_ extract 5 5)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!80 ((_ extract 4 4)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!82 ((_ extract 3 3)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!83 ((_ extract 2 2)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!84 ((_ extract 1 1)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2)))))
(a!85 ((_ extract 0 0)
(bvadd a!3 (concat #b0 (bvxor #x0000000000000000 a!2))))))
(let ((a!8 (bvadd (concat #b00 (bvadd (concat #b0 a!4) (concat #b0 a!5)))
(concat #b00 (bvadd (concat #b0 a!6) (concat #b0 a!7)))))
(a!13 (bvadd (concat #b00 (bvadd (concat #b0 a!9) (concat #b0 a!10)))
(concat #b00 (bvadd (concat #b0 a!11) (concat #b0 a!12)))))
(a!18 (bvadd (concat #b00 (bvadd (concat #b0 a!14) (concat #b0 a!15)))
(concat #b00 (bvadd (concat #b0 a!16) (concat #b0 a!17)))))
(a!23 (bvadd (concat #b00 (bvadd (concat #b0 a!19) (concat #b0 a!20)))
(concat #b00 (bvadd (concat #b0 a!21) (concat #b0 a!22)))))
(a!29 (bvadd (concat #b00 (bvadd (concat #b0 a!25) (concat #b0 a!26)))
(concat #b00 (bvadd (concat #b0 a!27) (concat #b0 a!28)))))
(a!34 (bvadd (concat #b00 (bvadd (concat #b0 a!30) (concat #b0 a!31)))
(concat #b00 (bvadd (concat #b0 a!32) (concat #b0 a!33)))))
(a!39 (bvadd (concat #b00 (bvadd (concat #b0 a!35) (concat #b0 a!36)))
(concat #b00 (bvadd (concat #b0 a!37) (concat #b0 a!38)))))
(a!44 (bvadd (concat #b00 (bvadd (concat #b0 a!40) (concat #b0 a!41)))
(concat #b00 (bvadd (concat #b0 a!42) (concat #b0 a!43)))))
(a!50 (bvadd (concat #b00 (bvadd (concat #b0 a!46) (concat #b0 a!47)))
(concat #b00 (bvadd (concat #b0 a!48) (concat #b0 a!49)))))
(a!55 (bvadd (concat #b00 (bvadd (concat #b0 a!51) (concat #b0 a!52)))
(concat #b00 (bvadd (concat #b0 a!53) (concat #b0 a!54)))))
(a!60 (bvadd (concat #b00 (bvadd (concat #b0 a!56) (concat #b0 a!57)))
(concat #b00 (bvadd (concat #b0 a!58) (concat #b0 a!59)))))
(a!65 (bvadd (concat #b00 (bvadd (concat #b0 a!61) (concat #b0 a!62)))
(concat #b00 (bvadd (concat #b0 a!63) (concat #b0 a!64)))))
(a!71 (bvadd (concat #b00 (bvadd (concat #b0 a!67) (concat #b0 a!68)))
(concat #b00 (bvadd (concat #b0 a!69) (concat #b0 a!70)))))
(a!76 (bvadd (concat #b00 (bvadd (concat #b0 a!72) (concat #b0 a!73)))
(concat #b00 (bvadd (concat #b0 a!74) (concat #b0 a!75)))))
(a!81 (bvadd (concat #b00 (bvadd (concat #b0 a!77) (concat #b0 a!78)))
(concat #b00 (bvadd (concat #b0 a!79) (concat #b0 a!80)))))
(a!86 (bvadd (concat #b00 (bvadd (concat #b0 a!82) (concat #b0 a!83)))
(concat #b00 (bvadd (concat #b0 a!84) (concat #b0 a!85))))))
(let ((a!24 (bvadd (concat #x00 (bvadd (concat #x0 a!8) (concat #x0 a!13)))
(concat #x00 (bvadd (concat #x0 a!18) (concat #x0 a!23)))))
(a!45 (bvadd (concat #x00 (bvadd (concat #x0 a!29) (concat #x0 a!34)))
(concat #x00 (bvadd (concat #x0 a!39) (concat #x0 a!44)))))
(a!66 (bvadd (concat #x00 (bvadd (concat #x0 a!50) (concat #x0 a!55)))
(concat #x00 (bvadd (concat #x0 a!60) (concat #x0 a!65)))))
(a!87 (bvadd (concat #x00 (bvadd (concat #x0 a!71) (concat #x0 a!76)))
(concat #x00 (bvadd (concat #x0 a!81) (concat #x0 a!86))))))
(let ((a!88 (bvadd (concat #x00000000
(bvadd (concat #x0000 a!24) (concat #x0000 a!45)))
(concat #x00000000
(bvadd (concat #x0000 a!66) (concat #x0000 a!87))))))
(let ((a!89 ((_ extract 7 0)
(bvadd (concat #b0 ((_ extract 31 0) a!88))
#b011111111111111111111111111111111))))
(let ((a!90 (concat #b000000000000000000000000000000000000000000000000000000000
(bvand (bvxor (bvor #x00 a!89) a!89) #x3f))))
(let ((a!91 ((_ extract 64 1)
(bvlshr (concat (concat #x00000000 TMP_BV_32) #b0) a!90))))
(let ((a!92 (= ((_ extract 0 0)
(bvashr (concat a!91 #b0)
(concat #b000000000000000000000000000000000000000000000000000000000
#x01)))
#b1)))
(or (and true a!92) false)))))))))))

(= ((_ extract 0 0) (bvlshr TMP_BV_8 #x00)) #b1)
)))
(check-sat)
( pop )



( push )
( echo "btl_m32_imm8::of")
(assert (not (=
TMP_BOOL

TMP_BOOL
)))
(check-sat)
( pop )



( push )
( echo "btl_m32_imm8::pf")
(assert (not (=
TMP_BOOL

TMP_BOOL
)))
(check-sat)
( pop )



( push )
( echo "btl_m32_imm8::sf")
(assert (not (=
TMP_BOOL

TMP_BOOL
)))
(check-sat)
( pop )



