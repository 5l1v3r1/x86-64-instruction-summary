code: decb (%rbx)

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %pf %af %zf %sf %of }
  must write:      { %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt eqMInt( extractMInt( TMP_BV_8_0, 4, 8), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( subMInt( TMP_BV_8_0, mi(8, 1)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( subMInt( TMP_BV_8_0, mi(8, 1)), 0, 1)
%of    : (#ifMInt (eqMInt( extractMInt( TMP_BV_8_0, 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( TMP_BV_8_0, 1, 8), mi(7, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    Value subMInt( TMP_BV_8_0, mi(8, 1)) (1 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
