code: shrl $0x0, (%rbx)

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { }
  maybe undef:     { %cf %af %of }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (#ifMInt ((ugeMInt( andMInt( Imm8, mi(8, 31)), mi(8, 32)) andBool TMP_BOOL_0) orBool ((notBool ugeMInt( andMInt( Imm8, mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 32, 33), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0)))) andBool %cf)))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 24, 25), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0)))) andBool %pf)) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0))) andBool TMP_BOOL_2) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0)))) andBool %af)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 0, 32), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0)))) andBool %zf)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt (((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0)))) andBool %sf)) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt ((eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( TMP_BV_32_0, 0, 1), mi(1, 1))) orBool ((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0))) andBool TMP_BOOL_1) orBool ((notBool (notBool eqMInt( andMInt( Imm8, mi(8, 31)), mi(8, 0)))) andBool %of)))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    extractMInt( lshrMInt( concatenateMInt( TMP_BV_32_0, mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( Imm8, mi(8, 31))))), 0, 32) (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
