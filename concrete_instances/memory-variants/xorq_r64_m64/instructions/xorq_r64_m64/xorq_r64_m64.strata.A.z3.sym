code: xorq (%rcx), %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : (bvxor %rbx TMP_BV_64_0)


%cf    : #b0

%pf    : (let ((a!1 (xor (= (bvxor ((_ extract 0 0) %rbx) ((_ extract 0 0) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 1 1) %rbx) ((_ extract 1 1) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 2 2) %rbx) ((_ extract 2 2) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 3 3) %rbx) ((_ extract 3 3) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 4 4) %rbx) ((_ extract 4 4) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 5 5) %rbx) ((_ extract 5 5) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 6 6) %rbx) ((_ extract 6 6) TMP_BV_64_1))
                   #b1)
                (= (bvxor ((_ extract 7 7) %rbx) ((_ extract 7 7) TMP_BV_64_1))
                   #b1))))
  (ite (not a!1) #b1 #b0))

%af    : (ite TMP_BOOL_1 #b1 #b0)

%zf    : (ite (= (bvxor %rbx TMP_BV_64_1) #x0000000000000000) #b1 #b0)

%sf    : (bvxor ((_ extract 63 63) %rbx) ((_ extract 63 63) TMP_BV_64_1))

%of    : #b0


Information about memory reads:
  Value TMP_BV_64_0
 (8 bytes)
    was read at address %rcx
.
  Value TMP_BV_64_1
 (8 bytes)
    was read at address %rcx
.

sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

