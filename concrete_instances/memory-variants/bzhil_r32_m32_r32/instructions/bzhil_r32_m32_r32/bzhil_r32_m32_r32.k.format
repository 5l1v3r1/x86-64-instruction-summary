code: bzhil %edx, (%rcx), %ebx

  maybe read:      { %rcx %edx }
  must read:       { %rcx %edx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi2 }

Formula:

%rbx   : concatenateMInt( mi(32, 0), (#ifMInt ultMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 1, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( TMP_BV_32_0, 2, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( TMP_BV_32_0, 3, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( TMP_BV_32_0, 4, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( TMP_BV_32_0, 5, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( TMP_BV_32_0, 6, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( TMP_BV_32_0, 7, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( TMP_BV_32_0, 8, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( TMP_BV_32_0, 9, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( TMP_BV_32_0, 10, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( TMP_BV_32_0, 11, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( TMP_BV_32_0, 12, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( TMP_BV_32_0, 13, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( TMP_BV_32_0, 14, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( TMP_BV_32_0, 15, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( TMP_BV_32_0, 16, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( TMP_BV_32_0, 17, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( TMP_BV_32_0, 18, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( TMP_BV_32_0, 19, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( TMP_BV_32_0, 20, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( TMP_BV_32_0, 21, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( TMP_BV_32_0, 22, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( TMP_BV_32_0, 23, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( TMP_BV_32_0, 24, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( TMP_BV_32_0, 25, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( TMP_BV_32_0, 26, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( TMP_BV_32_0, 27, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( TMP_BV_32_0, 28, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( TMP_BV_32_0, 29, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( TMP_BV_32_0, 30, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( TMP_BV_32_0, 31, 32)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else TMP_BV_32_0 #fi))

%cf    : (#ifMInt ugeMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt TMP_BOOL_0 #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_1 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 1, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( TMP_BV_32_0, 2, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( TMP_BV_32_0, 3, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( TMP_BV_32_0, 4, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( TMP_BV_32_0, 5, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( TMP_BV_32_0, 6, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( TMP_BV_32_0, 7, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( TMP_BV_32_0, 8, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( TMP_BV_32_0, 9, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( TMP_BV_32_0, 10, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( TMP_BV_32_0, 11, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( TMP_BV_32_0, 12, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( TMP_BV_32_0, 13, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( TMP_BV_32_0, 14, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( TMP_BV_32_0, 15, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( TMP_BV_32_0, 16, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( TMP_BV_32_0, 17, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( TMP_BV_32_0, 18, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( TMP_BV_32_0, 19, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( TMP_BV_32_0, 20, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( TMP_BV_32_0, 21, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( TMP_BV_32_0, 22, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( TMP_BV_32_0, 23, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( TMP_BV_32_0, 24, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( TMP_BV_32_0, 25, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( TMP_BV_32_0, 26, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( TMP_BV_32_0, 27, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( TMP_BV_32_0, 28, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( TMP_BV_32_0, 29, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( TMP_BV_32_0, 30, 32)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( TMP_BV_32_0, 31, 32)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else TMP_BV_32_0 #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt ultMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then mi(1, 0) #else extractMInt( TMP_BV_32_0, 0, 1) #fi)
%of    : mi(1, 0)

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rcx.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
