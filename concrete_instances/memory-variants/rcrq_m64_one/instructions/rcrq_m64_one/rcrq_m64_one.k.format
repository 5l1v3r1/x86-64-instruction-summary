code: rcrq $0x1, (%rbx)

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %cf %of }
  must write:      { %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : extractMInt( ror( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_64_0), uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65))), 0, 1)
%of    : (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_64_0), uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_64_0), uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0))) andBool TMP_BOOL_0) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0)))) andBool %of)))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    extractMInt( ror( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_64_0), uremMInt( concatenateMInt( mi(57, 0), andMInt( Imm8, mi(8, 63))), mi(65, 65))), 1, 65) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
