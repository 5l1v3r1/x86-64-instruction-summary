code: negl (%rbx)

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (#ifMInt (notBool eqMInt( TMP_BV_32_0, mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (eqMInt( extractMInt( TMP_BV_32_0, 27, 28), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 27, 28), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 0, 1)
%of    : (#ifMInt (eqMInt( extractMInt( TMP_BV_32_0, 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( TMP_BV_32_0)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    addMInt(mi(32, 1), negMInt( TMP_BV_32_0)) (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
