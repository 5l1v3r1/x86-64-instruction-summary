code: orq $0x0, (%rbx)

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%cf    : #b0

%pf    : (let ((a!1 (not (xor (= ((_ extract 0 0) TMP_BV_64_0) #b1)
                     (= ((_ extract 1 1) TMP_BV_64_0) #b1)
                     (= ((_ extract 2 2) TMP_BV_64_0) #b1)
                     (= ((_ extract 3 3) TMP_BV_64_0) #b1)
                     (= ((_ extract 4 4) TMP_BV_64_0) #b1)
                     (= ((_ extract 5 5) TMP_BV_64_0) #b1)
                     (= ((_ extract 6 6) TMP_BV_64_0) #b1)
                     (= ((_ extract 7 7) TMP_BV_64_0) #b1)))))
  (ite a!1 #b1 #b0))

%af    : (ite TMP_BOOL_0 #b1 #b0)

%zf    : (ite (= TMP_BV_64_0 #x0000000000000000) #b1 #b0)

%sf    : ((_ extract 63 63) TMP_BV_64_0)

%of    : #b0


Information about memory reads:
  Value TMP_BV_64_0
 (8 bytes)
    was read at address %rbx
.

Information about memory writes:
  Address %rbx
 was updated to
    TMP_BV_64_0
 (8 bytes).

sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : (or sigsegv
    (and (not sigfpe) (not sigbus) false)
    (and (not sigfpe) (not sigbus) false))

