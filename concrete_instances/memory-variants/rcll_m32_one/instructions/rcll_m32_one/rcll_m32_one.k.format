code: rcll $0x1, (%rbx)

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %cf %of }
  must write:      { %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_32_0), mi(33, 1)), 0, 1)
%of    : (#ifMInt (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_32_0), mi(33, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_32_0), mi(33, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    Value extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), TMP_BV_32_0), mi(33, 1)), 1, 33) (4 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
