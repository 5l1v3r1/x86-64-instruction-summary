code: adcw $0x0, (%rbx)

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 0, 1)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : xorMInt( xorMInt( extractMInt( Imm8, 3, 4), extractMInt( TMP_BV_16_0, 11, 12)), extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 12, 13))
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 1, 2)
%of    : (#ifMInt ((eqMInt( extractMInt( mi(16, svalueMInt(Imm8)), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( TMP_BV_16_0, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(16, svalueMInt(Imm8)), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_16_0 (2 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    Value extractMInt( addMInt( (#ifMInt %cf #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(Imm8))) #fi), concatenateMInt( mi(1, 0), TMP_BV_16_0)), 1, 17) (2 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
