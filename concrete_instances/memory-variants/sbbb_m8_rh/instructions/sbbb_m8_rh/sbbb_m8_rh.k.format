code: sbbb %ah, (%rbx)

  maybe read:      { %ah %rbx %cf }
  must read:       { %ah %rbx %cf }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : xorMInt( xorMInt( extractMInt( %rax, 51, 52), extractMInt( TMP_BV_8_0, 3, 4)), extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 4, 5))
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 1, 2)
%of    : (#ifMInt ((eqMInt( negMInt( extractMInt( %rax, 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( TMP_BV_8_0, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( %rax, 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_8_0 (1 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    extractMInt( addMInt( (#ifMInt %cf #then concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rax, 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), TMP_BV_8_0)), 1, 9) (1 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
