code: popcntl (%rcx), %ebx

  maybe read:      { %rcx }
  must read:       { %rcx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { popcnt }

Formula:

%rbx   : concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 0, 1)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 1, 2)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 2, 3)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 3, 4)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 4, 5)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 5, 6)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 6, 7)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 7, 8)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 8, 9)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 9, 10)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 10, 11)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 11, 12)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 12, 13)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 13, 14)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 14, 15)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 15, 16)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 16, 17)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 17, 18)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 18, 19)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 19, 20)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 20, 21)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 21, 22)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 22, 23)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 23, 24)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 24, 25)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 25, 26)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 26, 27)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 27, 28)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 28, 29)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 29, 30)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 30, 31)), concatenateMInt( mi(1, 0), extractMInt( TMP_BV_32_0, 31, 32))))))))))))

%cf    : mi(1, 0)
%pf    : mi(1, 0)
%af    : mi(1, 0)
%zf    : (#ifMInt eqMInt( TMP_BV_32_0, mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : mi(1, 0)
%of    : mi(1, 0)

Information about memory reads:
  Value TMP_BV_32_0 (4 bytes)
    was read at address %rcx.

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : (sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
