code: sarq %cl, (%rbx)

  maybe read:      { %cl %rbx }
  must read:       { %cl %rbx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { }
  maybe undef:     { %af %of }
  must undef:      { }
  required flags:  { }

Formula:

%cf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x00)))
      (a!2 (bvashr (concat TMP_BV_64_0 #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x3f)))))
(let ((a!3 (or (and a!1 (= ((_ extract 0 0) a!2) #b1)) (and (not a!1) %cf))))
  (ite a!3 #b1 #b0)))

%pf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x00)))
      (a!2 (bvashr (concat TMP_BV_64_0 #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x3f)))))
(let ((a!3 (not (xor (= ((_ extract 1 1) a!2) #b1)
                     (= ((_ extract 2 2) a!2) #b1)
                     (= ((_ extract 3 3) a!2) #b1)
                     (= ((_ extract 4 4) a!2) #b1)
                     (= ((_ extract 5 5) a!2) #b1)
                     (= ((_ extract 6 6) a!2) #b1)
                     (= ((_ extract 7 7) a!2) #b1)
                     (= ((_ extract 8 8) a!2) #b1)))))
  (ite (or (and a!1 a!3) (and (not a!1) %pf)) #b1 #b0)))

%zf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x00)))
      (a!2 (bvashr (concat TMP_BV_64_0 #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x3f)))))
(let ((a!3 (or (and a!1 (= ((_ extract 64 1) a!2) #x0000000000000000))
               (and (not a!1) %zf))))
  (ite a!3 #b1 #b0)))

%sf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x00)))
      (a!2 (bvashr (concat TMP_BV_64_0 #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x3f)))))
(let ((a!3 (or (and a!1 (= ((_ extract 64 64) a!2) #b1)) (and (not a!1) %sf))))
  (ite a!3 #b1 #b0)))

%of    : (let ((a!1 (and (= (bvand ((_ extract 7 0) %rcx) #x3f) #x01) false))
      (a!2 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x01)))
      (a!3 (not (= (bvand ((_ extract 7 0) %rcx) #x3f) #x00))))
(let ((a!4 (and a!2 (or (and a!3 TMP_BOOL_0) (and (not a!3) %of)))))
  (ite (or a!1 a!4) #b1 #b0)))


Information about memory reads:
  Value TMP_BV_64_0
 (8 bytes)
    was read at address %rbx
.

Information about memory writes:
  Address %rbx
 was updated to
    (let ((a!1 (bvashr (concat TMP_BV_64_0 #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x3f)))))
  ((_ extract 64 1) a!1))
 (8 bytes).

sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))

