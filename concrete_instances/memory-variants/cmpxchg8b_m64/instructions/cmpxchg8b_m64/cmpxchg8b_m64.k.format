code: cmpxchg8b (%rbx)

  maybe read:      { %eax %edx %rbx }
  must read:       { %eax %edx %rbx }
  maybe write:     { %rax %rcx %rdx %rbx %zf }
  must write:      { %zf }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cx8 }

Formula:

%rax   : (#ifMInt eqMInt( concatenateMInt( extractMInt( %rdx, 32, 64), extractMInt( %rax, 32, 64)), TMP_BV_64_0) #then %rax #else concatenateMInt( mi(32, 0), extractMInt( TMP_BV_64_0, 32, 64)) #fi)
%rdx   : (#ifMInt eqMInt( concatenateMInt( extractMInt( %rdx, 32, 64), extractMInt( %rax, 32, 64)), TMP_BV_64_0) #then %rdx #else concatenateMInt( mi(32, 0), extractMInt( TMP_BV_64_0, 0, 32)) #fi)

%zf    : (#ifMInt eqMInt( concatenateMInt( extractMInt( %rdx, 32, 64), extractMInt( %rax, 32, 64)), TMP_BV_64_0) #then mi(1, 1) #else mi(1, 0) #fi)

Information about memory reads:
  Value TMP_BV_64_0 (8 bytes)
    was read at address %rbx.

Information about memory writes:
  Address %rbx was updated to
    (#ifMInt eqMInt( concatenateMInt( extractMInt( %rdx, 32, 64), extractMInt( %rax, 32, 64)), TMP_BV_64_0) #then concatenateMInt( extractMInt( %rcx, 32, 64), extractMInt( %rbx, 32, 64)) #else TMP_BV_64_0 #fi) (8 bytes).

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : ((sigsegv orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE)) orBool (((notBool sigfpe) andBool (notBool sigbus)) andBool FALSE))
