code: sbbb %cl, %bl

  maybe read:      { %cl %bl %cf }
  must read:       { %cl %bl %cf }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 (bvadd a!2 (concat #b0 (bvxor ((_ extract 7 0) %rcx) #xff)))))
  (concat ((_ extract 63 8) %rbx) ((_ extract 7 0) a!3)))))

%cf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 (bvadd a!2 (concat #b0 (bvxor ((_ extract 7 0) %rcx) #xff)))))
(let ((a!4 (bvadd (ite (= ((_ extract 8 8) a!3) #b1) #b000000000 #b011111111)
                  (ite (= ((_ extract 8 8) a!3) #b1) #b000000000 #b011111111))))
  (= ((_ extract 8 8) a!4) #b1)))))
%pf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 (bvadd a!2 (concat #b0 (bvxor ((_ extract 7 0) %rcx) #xff)))))
  (not (xor (= ((_ extract 0 0) a!3) #b1)
            (= ((_ extract 1 1) a!3) #b1)
            (= ((_ extract 2 2) a!3) #b1)
            (= ((_ extract 3 3) a!3) #b1)
            (= ((_ extract 4 4) a!3) #b1)
            (= ((_ extract 5 5) a!3) #b1)
            (= ((_ extract 6 6) a!3) #b1)
            (= ((_ extract 7 7) a!3) #b1))))))
%af    : (let ((a!1 (bvadd (concat #b0 ((_ extract 3 0) %rbx))
                  (concat #b0 (bvxor ((_ extract 3 0) %rcx) #xf)))))
  (= ((_ extract 4 4) a!1) #b1))
%zf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 (bvadd a!2 (concat #b0 (bvxor ((_ extract 7 0) %rcx) #xff)))))
  (= ((_ extract 7 0) a!3) #x00))))
%sf    : (let ((a!1 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!2 (ite a!1
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 (bvadd a!2 (concat #b0 (bvxor ((_ extract 7 0) %rcx) #xff)))))
  (= ((_ extract 7 7) a!3) #b1))))
%of    : (let ((a!1 (= (= ((_ extract 7 7) %rbx) #b1)
              (= (bvxor ((_ extract 7 7) %rcx) #b1) #b1)))
      (a!2 (= ((_ extract 8 8)
                (bvadd (ite %cf #b000000000 #b011111111)
                       (ite %cf #b000000000 #b011111111)))
              #b1)))
(let ((a!3 (ite a!2
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!4 (bvadd a!3 (concat #b0 (bvxor ((_ extract 7 0) %rcx) #xff)))))
(let ((a!5 (not (= (= ((_ extract 7 7) %rbx) #b1) (= ((_ extract 7 7) a!4) #b1)))))
  (and a!1 a!5)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
