code: sarb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 56), extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8))

%cf    : (#ifMInt (eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 8, 9), mi(1, 1)) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt ((notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)))) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (TMP_BOOL_1 orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt (eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8), mi(8, 0)) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt (eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( %rbx, 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
