code: orl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

orl %ecx, %ebx: Hindex1(9)
orl %ecx, %ebx: Hindex1(9)
Formula:

%rbx   : (concat #x00000000 (bvor ((_ extract 31 0) %rbx) ((_ extract 31 0) %rcx)))

%cf    : false
%pf    : (let ((a!1 (xor (= (bvor ((_ extract 0 0) %rbx) ((_ extract 0 0) %rcx)) #b1)
                (= (bvor ((_ extract 1 1) %rbx) ((_ extract 1 1) %rcx)) #b1)
                (= (bvor ((_ extract 2 2) %rbx) ((_ extract 2 2) %rcx)) #b1)
                (= (bvor ((_ extract 3 3) %rbx) ((_ extract 3 3) %rcx)) #b1)
                (= (bvor ((_ extract 4 4) %rbx) ((_ extract 4 4) %rcx)) #b1)
                (= (bvor ((_ extract 5 5) %rbx) ((_ extract 5 5) %rcx)) #b1)
                (= (bvor ((_ extract 6 6) %rbx) ((_ extract 6 6) %rcx)) #b1)
                (= (bvor ((_ extract 7 7) %rbx) ((_ extract 7 7) %rcx)) #b1))))
  (not a!1))
%af    : TMP_BOOL_0
%zf    : (= (bvor ((_ extract 31 0) %rbx) ((_ extract 31 0) %rcx)) #x00000000)
%sf    : (= (bvor ((_ extract 31 31) %rbx) ((_ extract 31 31) %rcx)) #b1)
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
