code: incq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %pf %af %zf %sf %of }
  must write:      { %rbx %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (bvadd %rbx #x0000000000000001)


%pf    : (let ((a!1 (xor (= ((_ extract 0 0) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 1 1) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 2 2) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 3 3) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 4 4) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 5 5) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 6 6) (bvadd %rbx #x0000000000000001)) #b1)
                (= ((_ extract 7 7) (bvadd %rbx #x0000000000000001)) #b1))))
  (ite (not a!1) #b1 #b0))

%af    : (ite (= ((_ extract 3 0) %rbx) #xf) #b1 #b0)

%zf    : (ite (= (bvadd %rbx #x0000000000000001) #x0000000000000000) #b1 #b0)

%sf    : ((_ extract 63 63) (bvadd %rbx #x0000000000000001))

%of    : (let ((a!1 (and (not (= ((_ extract 63 63) %rbx) #b1))
                (= ((_ extract 62 0) %rbx)
                   #b111111111111111111111111111111111111111111111111111111111111111))))
  (ite a!1 #b1 #b0))


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

