code: sbbq %rcx, %rbx

  maybe read:      { %rcx %rbx %cf }
  must read:       { %rcx %rbx %cf }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

sbbq %rcx, %rbx: Hindex2(9)
sbbq %rcx, %rbx: Hindex2(9)
Formula:

%rbx   : (let ((a!1 (ite %cf
                (concat #b0 (bvnot %rcx))
                (bvadd (concat #b0 (bvnot %rcx))
                       #b00000000000000000000000000000000000000000000000000000000000000001))))
  ((_ extract 63 0) (bvadd a!1 (concat #b0 %rbx))))

%cf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot %rcx))
                (bvadd (concat #b0 (bvnot %rcx))
                       #b00000000000000000000000000000000000000000000000000000000000000001))))
(let ((a!2 (= ((_ extract 64 64) (bvadd a!1 (concat #b0 %rbx))) #b1)))
  (not a!2)))
%pf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot %rcx))
                (bvadd (concat #b0 (bvnot %rcx))
                       #b00000000000000000000000000000000000000000000000000000000000000001))))
(let ((a!2 (= ((_ extract 0 0) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!3 (= ((_ extract 1 1) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!4 (= ((_ extract 2 2) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!5 (= ((_ extract 3 3) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!6 (= ((_ extract 4 4) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!7 (= ((_ extract 5 5) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!8 (= ((_ extract 6 6) (bvadd a!1 (concat #b0 %rbx))) #b1))
      (a!9 (= ((_ extract 7 7) (bvadd a!1 (concat #b0 %rbx))) #b1)))
  (not (xor a!2 a!3 a!4 a!5 a!6 a!7 a!8 a!9))))
%af    : (let ((a!1 ((_ extract 4 4)
             (bvadd (concat #b0 ((_ extract 3 0) %rcx))
                    (concat #b0 ((_ extract 3 0) %rbx))))))
  (= a!1 #b1))
%zf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot %rcx))
                (bvadd (concat #b0 (bvnot %rcx))
                       #b00000000000000000000000000000000000000000000000000000000000000001))))
  (= ((_ extract 63 0) (bvadd a!1 (concat #b0 %rbx))) #x0000000000000000))
%sf    : (let ((a!1 (ite %cf
                (concat #b0 (bvnot %rcx))
                (bvadd (concat #b0 (bvnot %rcx))
                       #b00000000000000000000000000000000000000000000000000000000000000001))))
  (= ((_ extract 63 63) (bvadd a!1 (concat #b0 %rbx))) #b1))
%of    : (let ((a!1 (= (= (bvnot ((_ extract 63 63) %rcx)) #b1)
              (= ((_ extract 63 63) %rbx) #b1)))
      (a!2 (ite %cf
                (concat #b0 (bvnot %rcx))
                (bvadd (concat #b0 (bvnot %rcx))
                       #b00000000000000000000000000000000000000000000000000000000000000001))))
(let ((a!3 (= ((_ extract 63 63) (bvadd a!2 (concat #b0 %rbx))) #b1)))
(let ((a!4 (= (= (bvnot ((_ extract 63 63) %rcx)) #b1) a!3)))
  (and a!1 (not a!4)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
