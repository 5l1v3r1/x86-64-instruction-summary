code: rclq $0x1, %rbx

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 %rbx)
                              #b00000000000000000000000000000000000000000000000000000000000000001)
                       (concat #b0 %rbx))
                  (concat #b0 %rbx))))
  ((_ extract 63 0) a!1))

%cf    : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 %rbx)
                              #b00000000000000000000000000000000000000000000000000000000000000001)
                       (concat #b0 %rbx))
                  (concat #b0 %rbx))))
  (= ((_ extract 64 64) a!1) #b1))
%of    : (let ((a!1 (bvadd (ite %cf
                       (bvadd (concat #b0 %rbx)
                              #b00000000000000000000000000000000000000000000000000000000000000001)
                       (concat #b0 %rbx))
                  (concat #b0 %rbx))))
(let ((a!2 (not (= (= ((_ extract 63 63) %rbx) #b1)
                   (= ((_ extract 63 63) a!1) #b1)))))
  (and (= (= ((_ extract 63 63) %rbx) #b1) (= ((_ extract 63 63) %rbx) #b1))
       a!2)))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
