code: salb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64))), 1, 9))

%cf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64))), 0, 1)
%pf    : getParity(extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64))), 1, 9))
%af    : (#ifMInt TMP_BOOL_3 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64))), 1, 2)
%of    : (#ifMInt ((eqMInt( extractMInt( %rbx, 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( %rbx, 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( %rbx, 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
