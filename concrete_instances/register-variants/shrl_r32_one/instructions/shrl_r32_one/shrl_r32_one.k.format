code: shrl $0x1, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( mi(32, 0), extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32))

%cf    : extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 32, 33)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_2 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 1)
%of    : extractMInt( %rbx, 32, 33)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
