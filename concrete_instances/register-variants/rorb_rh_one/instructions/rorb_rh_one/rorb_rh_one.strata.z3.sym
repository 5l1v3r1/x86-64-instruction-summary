code: rorb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %of }
  must write:      { %ah %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (let ((a!1 (concat ((_ sign_extend 48)
                     (concat ((_ extract 15 8) %rax) ((_ extract 15 8) %rax)))
                   #b0)))
(let ((a!2 (concat ((_ extract 63 16) %rax)
                   ((_ extract 8 1)
                     (bvashr a!1
                             (concat #b000000000000000000000000000000000000000000000000000000000
                                     #x01))))))
  (concat a!2 ((_ extract 7 0) %rax))))

%cf    : (let ((a!1 (concat ((_ sign_extend 48)
                     (concat ((_ extract 15 8) %rax) ((_ extract 15 8) %rax)))
                   #b0)))
(let ((a!2 (concat #b0
                   ((_ extract 8 1)
                     (bvashr a!1
                             (concat #b000000000000000000000000000000000000000000000000000000000
                                     #x01))))))
  (= ((_ extract 8 8) (bvadd a!2 a!2)) #b1)))
%of    : (let ((a!1 (concat ((_ sign_extend 48)
                     (concat ((_ extract 15 8) %rax) ((_ extract 15 8) %rax)))
                   #b0)))
(let ((a!2 (= ((_ extract 8 8)
                (bvashr a!1
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!3 (concat #b0
                   ((_ extract 8 1)
                     (bvashr a!1
                             (concat #b000000000000000000000000000000000000000000000000000000000
                                     #x01))))))
(let ((a!4 (= a!2 (= ((_ extract 7 7) (bvadd a!3 a!3)) #b1))))
  (and (= a!2 a!2) (not a!4)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
