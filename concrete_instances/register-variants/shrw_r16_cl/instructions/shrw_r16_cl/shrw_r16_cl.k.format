code: shrw %cl, %bx

  maybe read:      { %cl %bx }
  must read:       { %cl %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx }
  maybe undef:     { %cf %af %of }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 0, 16))

%cf    : (#ifMInt ((ugeMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 16)) andBool TMP_BOOL_0) orBool ((notBool ugeMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 16, 17), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %cf)))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %pf)) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool TMP_BOOL_1) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %af)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 0, 16), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %zf)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( %rbx, 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %sf)) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt ((eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( %rbx, 48, 49), mi(1, 1))) orBool ((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 1))) andBool %of)) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
