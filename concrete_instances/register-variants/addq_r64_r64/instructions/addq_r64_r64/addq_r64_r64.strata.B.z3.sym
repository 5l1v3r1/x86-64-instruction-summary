code: addq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : ((_ extract 63 0) (bvadd (concat #b0 %rcx) (concat #b0 %rbx)))


%cf    : ((_ extract 64 64) (bvadd (concat #b0 %rcx) (concat #b0 %rbx)))

%pf    : (let ((a!1 (= ((_ extract 0 0) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!2 (= ((_ extract 1 1) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!3 (= ((_ extract 2 2) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!4 (= ((_ extract 3 3) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!5 (= ((_ extract 4 4) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!6 (= ((_ extract 5 5) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!7 (= ((_ extract 6 6) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1))
      (a!8 (= ((_ extract 7 7) (bvadd (concat #b0 %rcx) (concat #b0 %rbx))) #b1)))
  (ite (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)) #b1 #b0))

%af    : ((_ extract 4 4)
  (bvadd (concat #b0 ((_ extract 3 0) %rcx))
         (concat #b0 ((_ extract 3 0) %rbx))))

%zf    : (let ((a!1 (= ((_ extract 63 0) (bvadd (concat #b0 %rcx) (concat #b0 %rbx)))
              #x0000000000000000)))
  (ite a!1 #b1 #b0))

%sf    : ((_ extract 63 63) (bvadd (concat #b0 %rcx) (concat #b0 %rbx)))

%of    : (let ((a!1 (= ((_ extract 63 63) (bvadd (concat #b0 %rcx) (concat #b0 %rbx)))
              #b1)))
(let ((a!2 (not (= (= ((_ extract 63 63) %rcx) #b1) a!1))))
(let ((a!3 (and (= (= ((_ extract 63 63) %rcx) #b1)
                   (= ((_ extract 63 63) %rbx) #b1))
                a!2)))
  (ite a!3 #b1 #b0))))


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

