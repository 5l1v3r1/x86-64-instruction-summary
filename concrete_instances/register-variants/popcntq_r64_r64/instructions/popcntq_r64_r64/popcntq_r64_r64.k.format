code: popcntq %rcx, %rbx

  maybe read:      { %rcx }
  must read:       { %rcx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { popcnt }

Formula:

%rbx   : addMInt( concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 0, 1)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 1, 2)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 2, 3)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 3, 4)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 4, 5)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 5, 6)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 6, 7)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 7, 8)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 8, 9)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 9, 10)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 10, 11)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 11, 12)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 12, 13)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 13, 14)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 14, 15)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 15, 16)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 16, 17)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 17, 18)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 18, 19)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 19, 20)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 20, 21)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 21, 22)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 22, 23)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 23, 24)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 24, 25)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 25, 26)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 26, 27)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 27, 28)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 28, 29)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 29, 30)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 30, 31)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 31, 32)))))))))))), concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 32, 33)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 33, 34)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 34, 35)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 35, 36)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 36, 37)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 37, 38)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 38, 39)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 39, 40)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 40, 41)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 41, 42)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 42, 43)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 43, 44)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 44, 45)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 45, 46)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 46, 47)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 47, 48)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 48, 49)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 49, 50)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 50, 51)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 51, 52)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 52, 53)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 53, 54)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 54, 55)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 55, 56)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 56, 57)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 57, 58)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 58, 59)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 59, 60)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 60, 61)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 61, 62)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 62, 63)), concatenateMInt( mi(1, 0), extractMInt( %rcx, 63, 64)))))))))))))

%cf    : mi(1, 0)
%pf    : mi(1, 0)
%af    : mi(1, 0)
%zf    : (#ifMInt eqMInt( %rcx, mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : mi(1, 0)
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
