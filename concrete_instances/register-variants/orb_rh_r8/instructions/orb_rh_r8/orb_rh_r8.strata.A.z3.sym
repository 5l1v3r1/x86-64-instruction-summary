code: orb %bl, %ah

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rax   : (concat (concat ((_ extract 63 16) %rax)
                (bvor ((_ extract 15 8) %rax) ((_ extract 7 0) %rbx)))
        ((_ extract 7 0) %rax))


%cf    : #b0

%pf    : (let ((a!1 (xor (= (bvor ((_ extract 8 8) %rax) ((_ extract 0 0) %rbx)) #b1)
                (= (bvor ((_ extract 9 9) %rax) ((_ extract 1 1) %rbx)) #b1)
                (= (bvor ((_ extract 10 10) %rax) ((_ extract 2 2) %rbx)) #b1)
                (= (bvor ((_ extract 11 11) %rax) ((_ extract 3 3) %rbx)) #b1)
                (= (bvor ((_ extract 12 12) %rax) ((_ extract 4 4) %rbx)) #b1)
                (= (bvor ((_ extract 13 13) %rax) ((_ extract 5 5) %rbx)) #b1)
                (= (bvor ((_ extract 14 14) %rax) ((_ extract 6 6) %rbx)) #b1)
                (= (bvor ((_ extract 15 15) %rax) ((_ extract 7 7) %rbx)) #b1))))
  (ite (not a!1) #b1 #b0))

%af    : (ite TMP_BOOL_6 #b1 #b0)

%zf    : (let ((a!1 (bvor ((_ sign_extend 48)
                   (concat ((_ extract 15 8) %rax) ((_ extract 15 8) %rax)))
                 ((_ sign_extend 48)
                   (concat ((_ extract 7 0) %rbx) ((_ extract 7 0) %rbx))))))
  (ite (= a!1 #x0000000000000000) #b1 #b0))

%sf    : (let ((a!1 ((_ extract 63 63)
             ((_ sign_extend 48)
               (concat ((_ extract 15 8) %rax) ((_ extract 15 8) %rax)))))
      (a!2 ((_ extract 63 63)
             ((_ sign_extend 48)
               (concat ((_ extract 7 0) %rbx) ((_ extract 7 0) %rbx))))))
  (bvor a!1 a!2))

%of    : #b0


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

