code: sarb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rax   : (let ((a!1 ((_ sign_extend 48)
             ((_ extract 15 0) ((_ sign_extend 56) ((_ extract 15 8) %rax))))))
(let ((a!2 (concat ((_ extract 63 16) %rax)
                   ((_ extract 8 1)
                     (bvashr (concat a!1 #b0)
                             (concat #b000000000000000000000000000000000000000000000000000000000
                                     #x01))))))
  (concat a!2 ((_ extract 7 0) %rax))))


%cf    : (let ((a!1 ((_ sign_extend 48)
             ((_ extract 15 0) ((_ sign_extend 56) ((_ extract 15 8) %rax))))))
(let ((a!2 (= ((_ extract 0 0)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1)))
  (ite (or (and true a!2) false) #b1 #b0)))

%pf    : (let ((a!1 ((_ sign_extend 48)
             ((_ extract 15 0) ((_ sign_extend 56) ((_ extract 15 8) %rax))))))
(let ((a!2 (= ((_ extract 1 1)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!3 (= ((_ extract 2 2)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!4 (= ((_ extract 3 3)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!5 (= ((_ extract 4 4)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!6 (= ((_ extract 5 5)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!7 (= ((_ extract 6 6)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!8 (= ((_ extract 7 7)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1))
      (a!9 (= ((_ extract 8 8)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #b1)))
  (ite (not (xor a!2 a!3 a!4 a!5 a!6 a!7 a!8 a!9)) #b1 #b0)))

%af    : (ite TMP_BOOL_12 #b1 #b0)

%zf    : (let ((a!1 ((_ sign_extend 48)
             ((_ extract 15 0) ((_ sign_extend 56) ((_ extract 15 8) %rax))))))
(let ((a!2 (= ((_ extract 64 1)
                (bvashr (concat a!1 #b0)
                        (concat #b000000000000000000000000000000000000000000000000000000000
                                #x01)))
              #x0000000000000000)))
  (ite a!2 #b1 #b0)))

%sf    : (let ((a!1 ((_ sign_extend 48)
             ((_ extract 15 0) ((_ sign_extend 56) ((_ extract 15 8) %rax))))))
  ((_ extract 64 64)
    (bvashr (concat a!1 #b0)
            (concat #b000000000000000000000000000000000000000000000000000000000
                    #x01))))

%of    : #b0


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

