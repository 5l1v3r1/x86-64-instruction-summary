code: rcrb $0x1, %bl

  maybe read:      { %bl %cf }
  must read:       { %bl %cf }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 ((_ extract 7 0)
             (ext_rotate_right (concat (ite %cf #b1 #b0) ((_ extract 7 0) %rbx))
                               #b000000001))))
  (concat ((_ extract 63 8) %rbx) a!1))

%cf    : (let ((a!1 ((_ extract 8 8)
             (ext_rotate_right (concat (ite %cf #b1 #b0) ((_ extract 7 0) %rbx))
                               #b000000001))))
  (= a!1 #b1))
%of    : (let ((a!1 ((_ extract 7 7)
             (ext_rotate_right (concat (ite %cf #b1 #b0) ((_ extract 7 0) %rbx))
                               #b000000001)))
      (a!2 ((_ extract 6 6)
             (ext_rotate_right (concat (ite %cf #b1 #b0) ((_ extract 7 0) %rbx))
                               #b000000001))))
  (or (and true (xor (= a!1 #b1) (= a!2 #b1)))
      (and false (or (and true %of) (and false TMP_BOOL_0)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
