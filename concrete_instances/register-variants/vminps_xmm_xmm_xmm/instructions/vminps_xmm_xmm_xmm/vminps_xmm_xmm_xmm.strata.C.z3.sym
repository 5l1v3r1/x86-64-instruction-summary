code: vminps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

vminps %xmm3, %xmm2, %xmm1: Hindex8(9)
vminps %xmm3, %xmm2, %xmm1: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r10_r11: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r10_r11_xmm3: Hindex8(9)
callq .move_256_128_ymm3_xmm12_xmm13: Hindex8(9)
callq .move_128_256_xmm12_xmm13_ymm1: Hindex8(9)
vminps %ymm1, %ymm14, %ymm1: Hindex0(9)
Formula:

%ymm1  : (let ((a!1 (ite (= (mincmp_single ((_ extract 127 96) %ymm2)
                                  ((_ extract 127 96) %ymm3))
                   #b1)
                ((_ extract 127 96) %ymm2)
                ((_ extract 127 96) %ymm3)))
      (a!2 (ite (= (mincmp_single ((_ extract 95 64) %ymm2)
                                  ((_ extract 95 64) %ymm3))
                   #b1)
                ((_ extract 95 64) %ymm2)
                ((_ extract 95 64) %ymm3)))
      (a!3 (ite (= (mincmp_single ((_ extract 63 32) %ymm2)
                                  ((_ extract 63 32) %ymm3))
                   #b1)
                ((_ extract 63 32) %ymm2)
                ((_ extract 63 32) %ymm3)))
      (a!4 (ite (= (mincmp_single ((_ extract 31 0) %ymm2)
                                  ((_ extract 31 0) %ymm3))
                   #b1)
                ((_ extract 31 0) %ymm2)
                ((_ extract 31 0) %ymm3))))
(let ((a!5 (concat #x00000000 (concat a!1 (concat a!2 (concat a!3 a!4))))))
  (concat #x00000000 (concat #x00000000 (concat #x00000000 a!5)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
