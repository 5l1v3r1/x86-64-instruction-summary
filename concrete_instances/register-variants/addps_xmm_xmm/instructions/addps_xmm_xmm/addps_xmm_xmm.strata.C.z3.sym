code: addps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

addps %xmm2, %xmm1: Hindex8(9)
addps %xmm2, %xmm1: Hindex8(9)
callq .move_128_064_xmm2_r10_r11: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r10_r11_xmm3: Hindex8(9)
callq .move_256_128_ymm3_xmm12_xmm13: Hindex8(9)
callq .move_128_256_xmm12_xmm13_ymm1: Hindex8(9)
callq .move_128_064_xmm2_r8_r9: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r8_r9_xmm1: Hindex8(9)
vaddps %ymm10, %ymm11, %ymm3: Hindex0(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7: Hindex8(9)
callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1: Hindex8(9)
Formula:

%ymm1  : (let ((a!1 (concat (concat (add_single ((_ extract 127 96) %ymm1)
                                       ((_ extract 127 96) %ymm2))
                           (add_single ((_ extract 95 64) %ymm1)
                                       ((_ extract 95 64) %ymm2)))
                   (add_single ((_ extract 63 32) %ymm1)
                               ((_ extract 63 32) %ymm2)))))
  (concat ((_ extract 255 128) %ymm1)
          (concat a!1
                  (add_single ((_ extract 31 0) %ymm1) ((_ extract 31 0) %ymm2)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
