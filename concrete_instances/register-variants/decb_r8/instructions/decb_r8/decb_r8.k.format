code: decb %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %pf %af %zf %sf %of }
  must write:      { %bl %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 56), subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)))

%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt eqMInt( extractMInt( %rbx, 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( subMInt( extractMInt( %rbx, 56, 64), mi(8, 1)), 0, 1)
%of    : (#ifMInt (eqMInt( extractMInt( %rbx, 56, 57), mi(1, 1)) andBool eqMInt( extractMInt( %rbx, 57, 64), mi(7, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
