code: decb %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %pf %af %zf %sf %of }
  must write:      { %bl %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (concat ((_ extract 63 8) %rbx) (bvsub ((_ extract 7 0) %rbx) #x01))


%pf    : (let ((a!1 (= ((_ extract 0 0) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!2 (= ((_ extract 1 1) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!3 (= ((_ extract 2 2) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!4 (= ((_ extract 3 3) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!5 (= ((_ extract 4 4) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!6 (= ((_ extract 5 5) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!7 (= ((_ extract 6 6) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1))
      (a!8 (= ((_ extract 7 7) (bvsub ((_ extract 7 0) %rbx) #x01)) #b1)))
  (ite (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)) #b1 #b0))

%af    : (ite (= ((_ extract 3 0) %rbx) #x0) #b1 #b0)

%zf    : (ite (= (bvsub ((_ extract 7 0) %rbx) #x01) #x00) #b1 #b0)

%sf    : ((_ extract 7 7) (bvsub ((_ extract 7 0) %rbx) #x01))

%of    : (ite (and (= ((_ extract 7 7) %rbx) #b1) (= ((_ extract 6 0) %rbx) #b0000000))
     #b1
     #b0)


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

