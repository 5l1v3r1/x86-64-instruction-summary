code: rcll %cl, %ebx

  maybe read:      { %cl %ebx %cf }
  must read:       { %cl %ebx %cf }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

rcll %cl, %ebx: Hindex7(9)
rcll %cl, %ebx: Hindex7(9)
Formula:

%rbx   : (let ((a!1 (bvurem (concat #b0000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x1f))
                   #b000000000000000000000000000100001)))
(let ((a!2 ((_ extract 31 0)
             (ext_rotate_left (concat (ite %cf #b1 #b0) ((_ extract 31 0) %rbx))
                              a!1))))
  (concat #x00000000 a!2)))

%cf    : (let ((a!1 (bvurem (concat #b0000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x1f))
                   #b000000000000000000000000000100001)))
(let ((a!2 ((_ extract 32 32)
             (ext_rotate_left (concat (ite %cf #b1 #b0) ((_ extract 31 0) %rbx))
                              a!1))))
  (= a!2 #b1)))
%of    : (let ((a!1 (bvurem (concat #b0000000000000000000000000
                           (bvand ((_ extract 7 0) %rcx) #x1f))
                   #b000000000000000000000000000100001)))
(let ((a!2 ((_ extract 32 32)
             (ext_rotate_left (concat (ite %cf #b1 #b0) ((_ extract 31 0) %rbx))
                              a!1)))
      (a!3 ((_ extract 31 31)
             (ext_rotate_left (concat (ite %cf #b1 #b0) ((_ extract 31 0) %rbx))
                              a!1)))
      (a!4 (and (not (= ((_ extract 7 0) a!1) #x00)) %of))
      (a!5 (not (not (= ((_ extract 7 0) a!1) #x00)))))
(let ((a!6 (and (not (= ((_ extract 7 0) a!1) #x01))
                (or a!4 (and a!5 TMP_BOOL_0)))))
  (or (and (= ((_ extract 7 0) a!1) #x01) (xor (= a!2 #b1) (= a!3 #b1))) a!6))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
