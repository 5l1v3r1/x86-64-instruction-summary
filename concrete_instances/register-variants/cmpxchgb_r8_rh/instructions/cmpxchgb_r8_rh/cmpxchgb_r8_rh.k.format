code: cmpxchgb %bh, %cl

  maybe read:      { %al %cl %bh }
  must read:       { %al %cl %bh }
  maybe write:     { %al %cl %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (#ifMInt eqMInt( extractMInt( %rax, 56, 64), extractMInt( %rcx, 56, 64)) #then %rax #else concatenateMInt( extractMInt( %rax, 0, 56), extractMInt( %rcx, 56, 64)) #fi)
%rcx   : concatenateMInt( extractMInt( %rcx, 0, 56), (#ifMInt eqMInt( extractMInt( %rax, 56, 64), extractMInt( %rcx, 56, 64)) #then extractMInt( %rbx, 48, 56) #else extractMInt( %rcx, 56, 64) #fi))

%cf    : (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : xorMInt( xorMInt( extractMInt( %rcx, 59, 60), extractMInt( %rax, 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 4, 5))
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 1, 2)
%of    : (#ifMInt ((eqMInt( negMInt( extractMInt( %rcx, 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( %rax, 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( %rcx, 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( %rcx, 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
