code: rolb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %of }
  must write:      { %ah %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (concat (concat ((_ extract 63 16) %rax)
                (ext_rotate_left ((_ extract 15 8) %rax) #x01))
        ((_ extract 7 0) %rax))

%cf    : (let ((a!1 (= ((_ extract 0 0) (ext_rotate_left ((_ extract 15 8) %rax) #x01))
              #b1)))
  (ite (or (and true a!1) (and false %cf)) #b1 #b0))
%of    : (let ((a!1 (= ((_ extract 7 7) (ext_rotate_left ((_ extract 15 8) %rax) #x01))
              #b1))
      (a!2 (= ((_ extract 0 0) (ext_rotate_left ((_ extract 15 8) %rax) #x01))
              #b1)))
  (ite (or (and true (xor a!1 a!2)) (and false TMP_BOOL_0)) #b1 #b0))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
