code: rolq $0x1, %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), %rbx), concatenateMInt( mi(1, 0), %rbx)), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), %rbx), mi(65, 1)) #else concatenateMInt( mi(1, 0), %rbx) #fi), concatenateMInt( mi(1, 0), %rbx)), 1, 65)

%cf    : extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), %rbx), concatenateMInt( mi(1, 0), %rbx)), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), %rbx), mi(65, 1)) #else concatenateMInt( mi(1, 0), %rbx) #fi), concatenateMInt( mi(1, 0), %rbx)), 0, 1)
%of    : (#ifMInt ((eqMInt( extractMInt( %rbx, 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( %rbx, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( %rbx, 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), %rbx), concatenateMInt( mi(1, 0), %rbx)), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), %rbx), mi(65, 1)) #else concatenateMInt( mi(1, 0), %rbx) #fi), concatenateMInt( mi(1, 0), %rbx)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
