code: maxps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

maxps %xmm2, %xmm1: Hindex8(9)
maxps %xmm2, %xmm1: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
callq .move_128_064_xmm2_r12_r13: Hindex8(9)
vzeroall: Hindex1(9)
callq .move_064_128_r12_r13_xmm1: Hindex8(9)
vmaxps %ymm3, %ymm11, %ymm1: Hindex0(9)
callq .move_128_64_xmm2_xmm8_xmm9: Hindex8(9)
callq .move_64_128_xmm8_xmm9_xmm1: Hindex8(9)
Formula:

%ymm1  : (let ((a!1 (ite (= (maxcmp_single ((_ extract 127 96) %ymm1)
                                  ((_ extract 127 96) %ymm2))
                   #b1)
                ((_ extract 127 96) %ymm1)
                ((_ extract 127 96) %ymm2)))
      (a!2 (ite (= (maxcmp_single ((_ extract 95 64) %ymm1)
                                  ((_ extract 95 64) %ymm2))
                   #b1)
                ((_ extract 95 64) %ymm1)
                ((_ extract 95 64) %ymm2)))
      (a!3 (ite (= (maxcmp_single ((_ extract 63 32) %ymm1)
                                  ((_ extract 63 32) %ymm2))
                   #b1)
                ((_ extract 63 32) %ymm1)
                ((_ extract 63 32) %ymm2)))
      (a!4 (ite (= (maxcmp_single ((_ extract 31 0) %ymm1)
                                  ((_ extract 31 0) %ymm2))
                   #b1)
                ((_ extract 31 0) %ymm1)
                ((_ extract 31 0) %ymm2))))
  (concat ((_ extract 255 128) %ymm1)
          (concat a!1 (concat a!2 (concat a!3 a!4)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
