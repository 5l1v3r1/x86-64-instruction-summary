code: cmpxchgq %rcx, %rbx

  maybe read:      { %rax %rcx %rbx }
  must read:       { %rax %rcx %rbx }
  maybe write:     { %rax %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rax %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (ite (= %rax %rbx) %rax %rbx)

%rbx   : (ite (= %rax %rbx) %rcx %rbx)


%cf    : (let ((a!1 ((_ extract 64 64)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
  (ite (not (= a!1 #b1)) #b1 #b0))

%pf    : (let ((a!1 ((_ extract 0 0)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!2 ((_ extract 1 1)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!3 ((_ extract 2 2)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!4 ((_ extract 3 3)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!5 ((_ extract 4 4)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!6 ((_ extract 5 5)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!7 ((_ extract 6 6)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax))))
      (a!8 ((_ extract 7 7)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
  (ite (not (xor (= a!1 #b1)
                 (= a!2 #b1)
                 (= a!3 #b1)
                 (= a!4 #b1)
                 (= a!5 #b1)
                 (= a!6 #b1)
                 (= a!7 #b1)
                 (= a!8 #b1)))
       #b1
       #b0))

%zf    : (let ((a!1 ((_ extract 63 0)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
  (ite (= a!1 #x0000000000000000) #b1 #b0))

%sf    : ((_ extract 63 63)
  (bvadd (concat #b0 (bvnot %rbx))
         #b00000000000000000000000000000000000000000000000000000000000000001
         (concat #b0 %rax)))

%of    : (let ((a!1 (= (= (bvnot ((_ extract 63 63) %rbx)) #b1)
              (= ((_ extract 63 63) %rax) #b1)))
      (a!2 ((_ extract 63 63)
             (bvadd (concat #b0 (bvnot %rbx))
                    #b00000000000000000000000000000000000000000000000000000000000000001
                    (concat #b0 %rax)))))
(let ((a!3 (= (= (bvnot ((_ extract 63 63) %rbx)) #b1) (= a!2 #b1))))
  (ite (and a!1 (not a!3)) #b1 #b0)))


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

