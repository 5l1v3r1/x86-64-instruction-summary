code: tzcntw %cx, %bx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %bx %cf %zf }
  must write:      { %bx %cf %zf }
  maybe undef:     { %pf %af %sf %of }
  must undef:      { %pf %af %sf %of }
  required flags:  { bmi1 }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64))), 0, 1), mi(1, 1)) #then mi(16, 256) #else mi(16, 0) #fi), mi(16, 0)) #then extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 1, 2)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 2, 3)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 3, 4)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 4, 5)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 5, 6)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 6, 7)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 7, 8)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 8, 9)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 9, 10)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 10, 11)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 11, 12)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 12, 13)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 13, 14)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 14, 15)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 15, 16)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 16, 17)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 17, 18)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 18, 19)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 19, 20)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 20, 21)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 21, 22)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 22, 23)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 23, 24)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 24, 25)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 25, 26)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 26, 27)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 27, 28)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 28, 29)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 29, 30)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 30, 31)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 31, 32)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 32, 33)))))))))))), concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 33, 34)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 34, 35)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 35, 36)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 36, 37)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 37, 38)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 38, 39)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 39, 40)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 40, 41)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 41, 42)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 42, 43)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 43, 44)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 44, 45)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 45, 46)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 46, 47)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 47, 48)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 48, 49)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 49, 50)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 50, 51)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 51, 52)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 52, 53)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 53, 54)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 54, 55)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 55, 56)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 56, 57)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 58)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 58, 59)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 59, 60)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 60, 61)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 61, 62)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 62, 63)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 63, 64)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 64, 65))))))))))))), 32, 64)), mi(33, 4294967295)), 17, 33) #else mi(16, 16) #fi))

%cf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 65)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64))), 0, 1)
%pf    : (#ifMInt TMP_BOOL_29 #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_30 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 1, 2)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 2, 3)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 3, 4)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 4, 5)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 5, 6)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 6, 7)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 7, 8)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 8, 9)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 9, 10)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 10, 11)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 11, 12)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 12, 13)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 13, 14)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 14, 15)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 15, 16)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 16, 17)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 17, 18)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 18, 19)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 19, 20)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 20, 21)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 21, 22)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 22, 23)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 23, 24)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 24, 25)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 25, 26)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 26, 27)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 27, 28)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 28, 29)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 29, 30)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 30, 31)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 31, 32)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 32, 33)))))))))))), concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 33, 34)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 34, 35)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 35, 36)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 36, 37)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 37, 38)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 38, 39)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 39, 40)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 40, 41)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 41, 42)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 42, 43)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 43, 44)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 44, 45)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 45, 46)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 46, 47)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 47, 48)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 48, 49)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 49, 50)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 50, 51)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 51, 52)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 52, 53)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 53, 54)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 54, 55)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 55, 56)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 56, 57)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 57, 58)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 58, 59)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 59, 60)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 60, 61)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 61, 62)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 62, 63)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 63, 64)), concatenateMInt( mi(1, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 17, 25))), 0, 1), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65)))) #fi), concatenateMInt( mi(1, 0), xorMInt( concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 48, 64))), 32, 64))), 33, 65))))), 64, 65))))))))))))), 32, 64)), mi(33, 4294967295)), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt TMP_BOOL_31 #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt TMP_BOOL_32 #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
