code: negl %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( mi(32, 0), addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))))

%cf    : (#ifMInt (notBool eqMInt( extractMInt( %rbx, 32, 64), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (eqMInt( extractMInt( %rbx, 60, 61), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 28, 29), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 0, 1)
%of    : (#ifMInt (eqMInt( extractMInt( %rbx, 32, 33), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( %rbx, 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
