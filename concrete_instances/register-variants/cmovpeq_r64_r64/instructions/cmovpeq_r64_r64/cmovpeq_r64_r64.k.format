code: cmovpeq %rcx, %rbx

  maybe read:      { %rcx %pf }
  must read:       { %rcx %pf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Formula:

%rbx   : (#ifMInt eqMInt( (#ifMInt eqMInt( concatenateMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt %pf #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt %pf #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))), 0, 1), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt %pf #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt %pf #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))), 1, 9), mi(8, 0)) #then mi(8, 1) #else mi(8, 0) #fi)), mi(32, 0)) #then mi(8, 2) #else mi(8, 0) #fi), mi(8, 0)) #then %rcx #else %rbx #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
