code: andq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : xorMInt( xorMInt( xorMInt( mi(64, 0), %rcx), xorMInt( mi(64, 0), %rbx)), orMInt( xorMInt( mi(64, 0), %rcx), xorMInt( xorMInt( mi(64, 0), %rcx), xorMInt( mi(64, 0), %rbx))))

%cf    : mi(1, 0)
%pf    : (#ifMInt (notBool (((((((eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 63, 64)), xorMInt( mi(1, 0), extractMInt( %rbx, 63, 64))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 63, 64)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 63, 64)), xorMInt( mi(1, 0), extractMInt( %rbx, 63, 64))))), mi(1, 1)) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 62, 63)), xorMInt( mi(1, 0), extractMInt( %rbx, 62, 63))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 62, 63)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 62, 63)), xorMInt( mi(1, 0), extractMInt( %rbx, 62, 63))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 61, 62)), xorMInt( mi(1, 0), extractMInt( %rbx, 61, 62))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 61, 62)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 61, 62)), xorMInt( mi(1, 0), extractMInt( %rbx, 61, 62))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 60, 61)), xorMInt( mi(1, 0), extractMInt( %rbx, 60, 61))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 60, 61)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 60, 61)), xorMInt( mi(1, 0), extractMInt( %rbx, 60, 61))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 59, 60)), xorMInt( mi(1, 0), extractMInt( %rbx, 59, 60))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 59, 60)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 59, 60)), xorMInt( mi(1, 0), extractMInt( %rbx, 59, 60))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 58, 59)), xorMInt( mi(1, 0), extractMInt( %rbx, 58, 59))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 58, 59)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 58, 59)), xorMInt( mi(1, 0), extractMInt( %rbx, 58, 59))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 57, 58)), xorMInt( mi(1, 0), extractMInt( %rbx, 57, 58))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 57, 58)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 57, 58)), xorMInt( mi(1, 0), extractMInt( %rbx, 57, 58))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 56, 57)), xorMInt( mi(1, 0), extractMInt( %rbx, 56, 57))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 56, 57)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 56, 57)), xorMInt( mi(1, 0), extractMInt( %rbx, 56, 57))))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_20 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( xorMInt( xorMInt( xorMInt( mi(64, 0), %rcx), xorMInt( mi(64, 0), %rbx)), orMInt( xorMInt( mi(64, 0), %rcx), xorMInt( xorMInt( mi(64, 0), %rcx), xorMInt( mi(64, 0), %rbx)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 0, 1)), xorMInt( mi(1, 0), extractMInt( %rbx, 0, 1))), orMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 0, 1)), xorMInt( xorMInt( mi(1, 0), extractMInt( %rcx, 0, 1)), xorMInt( mi(1, 0), extractMInt( %rbx, 0, 1)))))
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
