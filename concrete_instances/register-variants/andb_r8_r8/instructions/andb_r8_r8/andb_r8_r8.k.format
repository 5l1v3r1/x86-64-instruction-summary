code: andb %cl, %bl

  maybe read:      { %cl %bl }
  must read:       { %cl %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 56), xorMInt( xorMInt( orMInt( extractMInt( %rbx, 56, 64), extractMInt( %rcx, 56, 64)), extractMInt( %rcx, 56, 64)), extractMInt( %rbx, 56, 64)))

%cf    : mi(1, 0)
%pf    : (#ifMInt (notBool (((((((eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 63, 64), extractMInt( %rcx, 63, 64)), extractMInt( %rcx, 63, 64)), extractMInt( %rbx, 63, 64)), mi(1, 1)) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 62, 63), extractMInt( %rcx, 62, 63)), extractMInt( %rcx, 62, 63)), extractMInt( %rbx, 62, 63)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 61, 62), extractMInt( %rcx, 61, 62)), extractMInt( %rcx, 61, 62)), extractMInt( %rbx, 61, 62)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 60, 61), extractMInt( %rcx, 60, 61)), extractMInt( %rcx, 60, 61)), extractMInt( %rbx, 60, 61)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 59, 60), extractMInt( %rcx, 59, 60)), extractMInt( %rcx, 59, 60)), extractMInt( %rbx, 59, 60)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 58, 59), extractMInt( %rcx, 58, 59)), extractMInt( %rcx, 58, 59)), extractMInt( %rbx, 58, 59)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 57, 58), extractMInt( %rcx, 57, 58)), extractMInt( %rcx, 57, 58)), extractMInt( %rbx, 57, 58)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( %rbx, 56, 57), extractMInt( %rcx, 56, 57)), extractMInt( %rcx, 56, 57)), extractMInt( %rbx, 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_9 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( xorMInt( xorMInt( orMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 56, 64))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 56, 64))), 32, 64)), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 56, 64))), 32, 64)), extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 56, 64))), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : xorMInt( xorMInt( orMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 56, 64))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 56, 64))), 32, 33)), extractMInt( mi(64, svalueMInt(extractMInt( %rcx, 56, 64))), 32, 33)), extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 56, 64))), 32, 33))
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
