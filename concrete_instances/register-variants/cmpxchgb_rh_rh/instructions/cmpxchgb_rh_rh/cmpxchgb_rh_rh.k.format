code: cmpxchgb %ch, %bh

  maybe read:      { %al %ch %bh }
  must read:       { %al %ch %bh }
  maybe write:     { %al %bh %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : concatenateMInt( extractMInt( %rax, 0, 56), extractMInt( %rbx, 48, 56))
%rbx   : concatenateMInt( concatenateMInt( extractMInt( %rbx, 0, 48), (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 48, 56), mi(8, 255)))), 1, 9), mi(8, 0)) #then extractMInt( %rcx, 48, 56) #else extractMInt( %rbx, 48, 56) #fi)), extractMInt( %rbx, 56, 64))

%cf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 48, 56), mi(8, 255)))), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)
%pf    : getParity(extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 48, 56), mi(8, 255)))), 1, 9))
%af    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 60, 64)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 52, 56), mi(4, 15)))), 0, 1)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 48, 56), mi(8, 255)))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 48, 56), mi(8, 255)))), 1, 2)
%of    : (#ifMInt ((eqMInt( extractMInt( %rax, 56, 57), mi(1, 1)) ==Bool eqMInt( xorMInt( extractMInt( %rbx, 48, 49), mi(1, 1)), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( %rax, 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( %rbx, 48, 56), mi(8, 255)))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
