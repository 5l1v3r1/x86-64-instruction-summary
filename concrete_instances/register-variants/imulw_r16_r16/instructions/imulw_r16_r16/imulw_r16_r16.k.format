code: imulw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %of }
  must write:      { %bx %cf %of }
  maybe undef:     { %pf %af %zf %sf }
  must undef:      { %pf %af %zf %sf }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( %rbx, 48, 64))), mi(32, svalueMInt(extractMInt( %rcx, 48, 64)))), 16, 32))

%cf    : (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( %rbx, 48, 64))), mi(32, svalueMInt(extractMInt( %rcx, 48, 64)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( %rbx, 48, 64))), mi(32, svalueMInt(extractMInt( %rcx, 48, 64)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt TMP_BOOL_2 #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_1 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt TMP_BOOL_0 #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( %rbx, 48, 64))), mi(32, svalueMInt(extractMInt( %rcx, 48, 64)))), 16, 17)
%of    : (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( %rbx, 48, 64))), mi(32, svalueMInt(extractMInt( %rcx, 48, 64)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( %rbx, 48, 64))), mi(32, svalueMInt(extractMInt( %rcx, 48, 64)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
