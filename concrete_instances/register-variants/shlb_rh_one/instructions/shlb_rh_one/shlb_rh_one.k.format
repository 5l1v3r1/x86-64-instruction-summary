code: shlb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rax   : concatenateMInt( concatenateMInt( extractMInt( %rax, 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 1, 9)), extractMInt( %rax, 56, 64))

%cf    : (#ifMInt ((FALSE andBool TMP_BOOL_0) orBool (TRUE andBool ((TRUE andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1))) orBool (FALSE andBool %cf)))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt ((TRUE andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))))) orBool (FALSE andBool %pf)) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt ((TRUE andBool TMP_BOOL_1) orBool (FALSE andBool %af)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt ((TRUE andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 1, 9), mi(8, 0))) orBool (FALSE andBool %zf)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt ((TRUE andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) orBool (FALSE andBool %sf)) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt ((TRUE andBool (notBool (((FALSE andBool TMP_BOOL_0) orBool (TRUE andBool ((TRUE andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1))) orBool (FALSE andBool %cf)))) ==Bool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))))) orBool (FALSE andBool %of)) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
