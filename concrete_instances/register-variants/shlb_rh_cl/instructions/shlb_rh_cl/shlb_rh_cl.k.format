code: shlb %cl, %ah

  maybe read:      { %ah %cl }
  must read:       { %ah %cl }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah }
  maybe undef:     { %cf %af %of }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : concatenateMInt( concatenateMInt( extractMInt( %rax, 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 1, 9)), extractMInt( %rax, 56, 64))

%cf    : (#ifMInt ((ugeMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 8)) andBool TMP_BOOL_0) orBool ((notBool ugeMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %cf)))) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %pf)) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool TMP_BOOL_2) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %af)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %zf)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %sf)) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt ((eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 8)) andBool TMP_BOOL_0) orBool ((notBool ugeMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %cf)))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool TMP_BOOL_1) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %of)))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
