code: cmovnpq %rcx, %rbx

  maybe read:      { %rcx %pf }
  must read:       { %rcx %pf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Formula:

%rbx   : (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( addMInt( (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt %pf #then mi(9, 1) #else mi(9, 0) #fi), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(16, 0), getParity(mi(8, 16))), mi(17, 65535)), 1, 9))), 1, 2), mi(1, 1)) #then mi(9, 0) #else mi(9, 1) #fi), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))))), 9, 17)), (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt %pf #then mi(9, 1) #else mi(9, 0) #fi), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(16, 0), getParity(mi(8, 16))), mi(17, 65535)), 1, 9))), 1, 2), mi(1, 1)) #then mi(9, 0) #else mi(9, 1) #fi)), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rcx, 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rcx, 48, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), extractMInt( %rcx, 48, 64)))), 1, 17), mi(16, 0)) #then %rcx #else %rbx #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
