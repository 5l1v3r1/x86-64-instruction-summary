code: sbbb %bl, %ah

  maybe read:      { %ah %bl %cf }
  must read:       { %ah %bl %cf }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : (let ((a!1 (ite (= (ite %cf #b0 #b1) #b1)
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (bvadd a!1 (concat #b0 (bvxor ((_ extract 7 0) %rbx) #xff)))))
  (concat (concat ((_ extract 63 16) %rax) ((_ extract 7 0) a!2))
          ((_ extract 7 0) %rax))))


%cf    : (let ((a!1 (ite (= (ite %cf #b0 #b1) #b1)
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (bvadd a!1 (concat #b0 (bvxor ((_ extract 7 0) %rbx) #xff)))))
  (ite (= ((_ extract 8 8) a!2) #b1) #b0 #b1)))

%pf    : (let ((a!1 (ite (= (ite %cf #b0 #b1) #b1)
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (bvadd a!1 (concat #b0 (bvxor ((_ extract 7 0) %rbx) #xff)))))
(let ((a!3 (not (xor (= ((_ extract 0 0) a!2) #b1)
                     (= ((_ extract 1 1) a!2) #b1)
                     (= ((_ extract 2 2) a!2) #b1)
                     (= ((_ extract 3 3) a!2) #b1)
                     (= ((_ extract 4 4) a!2) #b1)
                     (= ((_ extract 5 5) a!2) #b1)
                     (= ((_ extract 6 6) a!2) #b1)
                     (= ((_ extract 7 7) a!2) #b1)))))
  (ite a!3 #b1 #b0))))

%af    : (let ((a!1 (bvadd (concat #b0 ((_ extract 11 8) %rax))
                  (concat #b0 (bvxor ((_ extract 3 0) %rbx) #xf)))))
  ((_ extract 4 4) a!1))

%zf    : (let ((a!1 (ite (= (ite %cf #b0 #b1) #b1)
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (bvadd a!1 (concat #b0 (bvxor ((_ extract 7 0) %rbx) #xff)))))
  (ite (= ((_ extract 7 0) a!2) #x00) #b1 #b0)))

%sf    : (let ((a!1 (ite (= (ite %cf #b0 #b1) #b1)
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!2 (bvadd a!1 (concat #b0 (bvxor ((_ extract 7 0) %rbx) #xff)))))
  ((_ extract 7 7) a!2)))

%of    : (let ((a!1 (= (= ((_ extract 15 15) %rax) #b1)
              (= (bvxor ((_ extract 7 7) %rbx) #b1) #b1)))
      (a!2 (ite (= (ite %cf #b0 #b1) #b1)
                (bvadd (concat #b0 ((_ extract 15 8) %rax)) #b000000001)
                (concat #b0 ((_ extract 15 8) %rax)))))
(let ((a!3 (bvadd a!2 (concat #b0 (bvxor ((_ extract 7 0) %rbx) #xff)))))
(let ((a!4 (not (= (= ((_ extract 15 15) %rax) #b1)
                   (= ((_ extract 7 7) a!3) #b1)))))
  (ite (and a!1 a!4) #b1 #b0))))


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

