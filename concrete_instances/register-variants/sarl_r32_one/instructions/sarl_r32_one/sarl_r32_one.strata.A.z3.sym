code: sarl $0x1, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 (bvashr (concat ((_ sign_extend 32) ((_ extract 31 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  (concat #x00000000 ((_ extract 32 1) a!1)))

%cf    : (let ((a!1 (bvashr (concat ((_ sign_extend 32) ((_ extract 31 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  (or (and true (= ((_ extract 0 0) a!1) #b1)) false))
%pf    : (let ((a!1 (bvashr (concat ((_ sign_extend 32) ((_ extract 31 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  (not (xor (= ((_ extract 1 1) a!1) #b1)
            (= ((_ extract 2 2) a!1) #b1)
            (= ((_ extract 3 3) a!1) #b1)
            (= ((_ extract 4 4) a!1) #b1)
            (= ((_ extract 5 5) a!1) #b1)
            (= ((_ extract 6 6) a!1) #b1)
            (= ((_ extract 7 7) a!1) #b1)
            (= ((_ extract 8 8) a!1) #b1))))
%af    : TMP_BOOL_11
%zf    : (let ((a!1 (bvashr (concat ((_ sign_extend 32) ((_ extract 31 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  (= ((_ extract 64 1) a!1) #x0000000000000000))
%sf    : (let ((a!1 (bvashr (concat ((_ sign_extend 32) ((_ extract 31 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  (= ((_ extract 64 64) a!1) #b1))
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
