code: negq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (bvneg %rbx)

%cf    : (ite (not (= %rbx #x0000000000000000)) #b1 #b0)
%pf    : (let ((a!1 (xor (= ((_ extract 0 0) (bvneg %rbx)) #b1)
                (= ((_ extract 1 1) (bvneg %rbx)) #b1)
                (= ((_ extract 2 2) (bvneg %rbx)) #b1)
                (= ((_ extract 3 3) (bvneg %rbx)) #b1)
                (= ((_ extract 4 4) (bvneg %rbx)) #b1)
                (= ((_ extract 5 5) (bvneg %rbx)) #b1)
                (= ((_ extract 6 6) (bvneg %rbx)) #b1)
                (= ((_ extract 7 7) (bvneg %rbx)) #b1))))
  (ite (not a!1) #b1 #b0))
%af    : (let ((a!1 (and (= ((_ extract 3 3) %rbx) #b1)
                (= ((_ extract 3 3) (bvneg %rbx)) #b1))))
  (ite a!1 #b1 #b0))
%zf    : (ite (= (bvneg %rbx) #x0000000000000000) #b1 #b0)
%sf    : (ite (= ((_ extract 63 63) (bvneg %rbx)) #b1) #b1 #b0)
%of    : (let ((a!1 (and (= ((_ extract 63 63) %rbx) #b1)
                (= ((_ extract 63 63) (bvneg %rbx)) #b1))))
  (ite a!1 #b1 #b0))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
