code: negq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), %rbx)), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 65)

%cf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), %rbx)), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)
%pf    : getParity(extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), %rbx)), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 57, 65))
%af    : mi(1, 0)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), %rbx)), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), %rbx)), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 2)
%of    : (#ifMInt ((eqMInt( xorMInt( mi(1, 1), extractMInt( %rbx, 0, 1)), mi(1, 1)) ==Bool FALSE) andBool (notBool (eqMInt( xorMInt( mi(1, 1), extractMInt( %rbx, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), %rbx)), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
