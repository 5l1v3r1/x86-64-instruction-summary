code: rorw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %of }
  must write:      { %bx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 (bvashr (concat ((_ sign_extend 48) ((_ extract 15 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
(let ((a!2 (or (and true (= ((_ extract 0 0) a!1) #b1)) false)))
(let ((a!3 (ite a!2
                (bvadd (concat #b0 ((_ extract 16 9) a!1)) #b000000001)
                (concat #b0 ((_ extract 16 9) a!1)))))
(let ((a!4 ((_ extract 7 0) (bvadd a!3 (concat #b0 ((_ extract 16 9) a!1))))))
(let ((a!5 (bvashr (concat ((_ sign_extend 48) (concat a!4 a!4)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  (concat ((_ extract 63 16) %rbx)
          (concat ((_ extract 8 1) a!5) ((_ extract 8 1) a!1))))))))


%cf    : (let ((a!1 (bvashr (concat ((_ sign_extend 48) ((_ extract 15 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
(let ((a!2 (or (and true (= ((_ extract 0 0) a!1) #b1)) false)))
(let ((a!3 (ite a!2
                (bvadd (concat #b0 ((_ extract 16 9) a!1)) #b000000001)
                (concat #b0 ((_ extract 16 9) a!1)))))
(let ((a!4 ((_ extract 7 0) (bvadd a!3 (concat #b0 ((_ extract 16 9) a!1))))))
(let ((a!5 (bvashr (concat ((_ sign_extend 48) (concat a!4 a!4)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
  ((_ extract 8 8)
    (bvadd (concat #b0 ((_ extract 8 1) a!5))
           (concat #b0 ((_ extract 8 1) a!5)))))))))

%of    : (let ((a!1 (bvashr (concat ((_ sign_extend 48) ((_ extract 15 0) %rbx)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
(let ((a!2 (or (and true (= ((_ extract 0 0) a!1) #b1)) false)))
(let ((a!3 (ite a!2
                (bvadd (concat #b0 ((_ extract 16 9) a!1)) #b000000001)
                (concat #b0 ((_ extract 16 9) a!1)))))
(let ((a!4 ((_ extract 7 0) (bvadd a!3 (concat #b0 ((_ extract 16 9) a!1))))))
(let ((a!5 (bvashr (concat ((_ sign_extend 48) (concat a!4 a!4)) #b0)
                   (concat #b000000000000000000000000000000000000000000000000000000000
                           #x01))))
(let ((a!6 ((_ extract 7 7)
             (bvadd (concat #b0 ((_ extract 8 1) a!5))
                    (concat #b0 ((_ extract 8 1) a!5))))))
(let ((a!7 (not (= (= ((_ extract 8 8) a!5) #b1) (= a!6 #b1)))))
(let ((a!8 (and (= (= ((_ extract 8 8) a!5) #b1) (= ((_ extract 8 8) a!5) #b1))
                a!7)))
  (ite a!8 #b1 #b0)))))))))


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

