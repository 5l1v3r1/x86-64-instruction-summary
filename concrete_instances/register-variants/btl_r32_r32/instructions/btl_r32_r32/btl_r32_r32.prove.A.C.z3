



(declare-const TMP_BV_8 (_ BitVec 8))
(declare-const TMP_BV_16 (_ BitVec 16))
(declare-const TMP_BV_32 (_ BitVec 32))
(declare-const TMP_BV_64 (_ BitVec 64))
(declare-const TMP_BV_128 (_ BitVec 128))
(declare-const TMP_BV_256 (_ BitVec 256))
(declare-const TMP_BOOL Bool)
(declare-const rbx (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rip (_ BitVec 64))
(declare-const ymm0 (_ BitVec 256))
(declare-const ymm1 (_ BitVec 256))
(declare-const ymm2 (_ BitVec 256))
(declare-const ymm3 (_ BitVec 256))
(declare-const ymm4 (_ BitVec 256))
(declare-const ymm5 (_ BitVec 256))
(declare-const ymm6 (_ BitVec 256))
(declare-const ymm7 (_ BitVec 256))
(declare-const ymm8 (_ BitVec 256))
(declare-const ymm9 (_ BitVec 256))
(declare-const ymm10 (_ BitVec 256))
(declare-const ymm11 (_ BitVec 256))
(declare-const ymm12 (_ BitVec 256))
(declare-const ymm13 (_ BitVec 256))
(declare-const ymm14 (_ BitVec 256))
(declare-const ymm15 (_ BitVec 256))
(declare-const zf Bool)
(declare-const sf Bool)
(declare-const cf Bool)
(declare-const pf Bool)
(declare-const af Bool)
(declare-const of Bool)

; Uninterpreted binary function declaration
(declare-fun comisd ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 2))
(declare-fun comiss ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 2))
(declare-fun    cvt_single_to_fp16_rm   ((_ BitVec 32) (_ BitVec 8)) (_ BitVec 16) )
(declare-fun    cvt_single_to_int32_rm  ((_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) )
(declare-fun    cvt_double_to_int64_rm  ((_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) )

(declare-fun add_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun add_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun sub_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun sub_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun mul_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun mul_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun maxcmp_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 1))
(declare-fun maxcmp_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 1))
(declare-fun mincmp_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 1))
(declare-fun mincmp_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 1))

(declare-fun idiv_quotient_int8   ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun idiv_remainder_int8  ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun idiv_quotient_int16  ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun idiv_remainder_int16 ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun idiv_quotient_int32  ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun idiv_remainder_int32 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun idiv_quotient_int64  ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun idiv_remainder_int64 ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_quotient_int8   ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun div_remainder_int8  ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun div_quotient_int16  ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun div_remainder_int16 ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun div_quotient_int32  ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_remainder_int32 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_quotient_int64  ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_remainder_int64 ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))

; Uninterpreted unary function declaration
(declare-fun    cvt_half_to_single      ((_ BitVec 16)) (_ BitVec 32) )
(declare-fun    cvt_double_to_int64_truncate     ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun    cvt_single_to_int64_truncate     ((_ BitVec 32)) (_ BitVec 64) )

(declare-fun approx_reciprocal_double       ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun approx_reciprocal_single       ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun sqrt_double                    ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun sqrt_single                    ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun approx_reciprocal_sqrt_double  ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun approx_reciprocal_sqrt_single  ((_ BitVec 32)) (_ BitVec 32) )

(declare-fun cvt_single_to_double           ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_double_to_single           ((_ BitVec 64)) (_ BitVec 32) )

(declare-fun cvt_single_to_int32            ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_single_to_int32_truncate   ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_single_to_int64            ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_double_to_int32            ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_double_to_int32_truncate   ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_double_to_int64            ((_ BitVec 64)) (_ BitVec 64) )

(declare-fun cvt_int32_to_single            ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_int32_to_double            ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_int64_to_single            ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_int64_to_double            ((_ BitVec 64)) (_ BitVec 64) )

; Uninterpreted ternary function declaration
(declare-fun cmp_double_pred ((_ BitVec 64) (_ BitVec 64) (_ BitVec 8)) (_ BitVec 1))
(declare-fun cmp_single_pred ((_ BitVec 32) (_ BitVec 32) (_ BitVec 8)) (_ BitVec 1))

(declare-fun vfmadd132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmadd231_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd231_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmadd213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd213_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub231_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub231_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub213_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmadd132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmsub132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmsub132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmadd213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd231_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmsub213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd213_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))


( push )
( echo "btl_r32_r32::af")
(assert (not (=
(ite TMP_BOOL #b1 #b0)

(ite TMP_BOOL #b1 #b0)
)))
(check-sat)
( pop )



( push )
( echo "btl_r32_r32::cf")
(assert (not (=
(let ((a!1 (concat #b0
((_ extract 47 40)
(bvadd (concat #b0 #xffffffffffffffff)
(concat #b000000000000000000000000000000000
#x00000000)))))
(a!2 (concat #b000000000000000000000000000000000
((_ extract 31 0)
(bvadd (concat #b0 #xffffffffffffffff)
(concat #b000000000000000000000000000000000
#x00000000))))))
(let ((a!3 (ite (= ((_ extract 8 8) (bvadd a!1 a!1)) #b1)
(bvadd a!2
#b00000000000000000000000000000000000000000000000000000000000000001)
a!2)))
(let ((a!4 (bvadd (concat #b0 ((_ extract 63 63) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 62 62) (bvadd a!3 a!2)))))
(a!5 (bvadd (concat #b0 ((_ extract 61 61) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 60 60) (bvadd a!3 a!2)))))
(a!6 (bvadd (concat #b0 ((_ extract 59 59) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 58 58) (bvadd a!3 a!2)))))
(a!7 (bvadd (concat #b0 ((_ extract 57 57) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 56 56) (bvadd a!3 a!2)))))
(a!9 (bvadd (concat #b0 ((_ extract 55 55) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 54 54) (bvadd a!3 a!2)))))
(a!10 (bvadd (concat #b0 ((_ extract 53 53) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 52 52) (bvadd a!3 a!2)))))
(a!11 (bvadd (concat #b0 ((_ extract 51 51) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 50 50) (bvadd a!3 a!2)))))
(a!12 (bvadd (concat #b0 ((_ extract 49 49) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 48 48) (bvadd a!3 a!2)))))
(a!14 (bvadd (concat #b0 ((_ extract 47 47) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 46 46) (bvadd a!3 a!2)))))
(a!15 (bvadd (concat #b0 ((_ extract 45 45) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 44 44) (bvadd a!3 a!2)))))
(a!16 (bvadd (concat #b0 ((_ extract 43 43) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 42 42) (bvadd a!3 a!2)))))
(a!17 (bvadd (concat #b0 ((_ extract 41 41) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 40 40) (bvadd a!3 a!2)))))
(a!19 (bvadd (concat #b0 ((_ extract 39 39) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 38 38) (bvadd a!3 a!2)))))
(a!20 (bvadd (concat #b0 ((_ extract 37 37) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 36 36) (bvadd a!3 a!2)))))
(a!21 (bvadd (concat #b0 ((_ extract 35 35) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 34 34) (bvadd a!3 a!2)))))
(a!22 (bvadd (concat #b0 ((_ extract 33 33) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 32 32) (bvadd a!3 a!2)))))
(a!25 (bvadd (concat #b0 ((_ extract 31 31) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 30 30) (bvadd a!3 a!2)))))
(a!26 (bvadd (concat #b0 ((_ extract 29 29) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 28 28) (bvadd a!3 a!2)))))
(a!27 (bvadd (concat #b0 ((_ extract 27 27) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 26 26) (bvadd a!3 a!2)))))
(a!28 (bvadd (concat #b0 ((_ extract 25 25) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 24 24) (bvadd a!3 a!2)))))
(a!30 (bvadd (concat #b0 ((_ extract 23 23) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 22 22) (bvadd a!3 a!2)))))
(a!31 (bvadd (concat #b0 ((_ extract 21 21) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 20 20) (bvadd a!3 a!2)))))
(a!32 (bvadd (concat #b0 ((_ extract 19 19) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 18 18) (bvadd a!3 a!2)))))
(a!33 (bvadd (concat #b0 ((_ extract 17 17) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 16 16) (bvadd a!3 a!2)))))
(a!35 (bvadd (concat #b0 ((_ extract 15 15) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 14 14) (bvadd a!3 a!2)))))
(a!36 (bvadd (concat #b0 ((_ extract 13 13) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 12 12) (bvadd a!3 a!2)))))
(a!37 (bvadd (concat #b0 ((_ extract 11 11) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 10 10) (bvadd a!3 a!2)))))
(a!38 (bvadd (concat #b0 ((_ extract 9 9) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 8 8) (bvadd a!3 a!2)))))
(a!40 (bvadd (concat #b0 ((_ extract 7 7) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 6 6) (bvadd a!3 a!2)))))
(a!41 (bvadd (concat #b0 ((_ extract 5 5) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 4 4) (bvadd a!3 a!2)))))
(a!42 (bvadd (concat #b0 ((_ extract 3 3) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 2 2) (bvadd a!3 a!2)))))
(a!43 (bvadd (concat #b0 ((_ extract 1 1) (bvadd a!3 a!2)))
(concat #b0 ((_ extract 0 0) (bvadd a!3 a!2))))))
(let ((a!8 (bvadd (concat #x0 (bvadd (concat #b00 a!4) (concat #b00 a!5)))
(concat #x0 (bvadd (concat #b00 a!6) (concat #b00 a!7)))))
(a!13 (bvadd (concat #x0 (bvadd (concat #b00 a!9) (concat #b00 a!10)))
(concat #x0 (bvadd (concat #b00 a!11) (concat #b00 a!12)))))
(a!18 (bvadd (concat #x0 (bvadd (concat #b00 a!14) (concat #b00 a!15)))
(concat #x0 (bvadd (concat #b00 a!16) (concat #b00 a!17)))))
(a!23 (bvadd (concat #x0 (bvadd (concat #b00 a!19) (concat #b00 a!20)))
(concat #x0 (bvadd (concat #b00 a!21) (concat #b00 a!22)))))
(a!29 (bvadd (concat #x0 (bvadd (concat #b00 a!25) (concat #b00 a!26)))
(concat #x0 (bvadd (concat #b00 a!27) (concat #b00 a!28)))))
(a!34 (bvadd (concat #x0 (bvadd (concat #b00 a!30) (concat #b00 a!31)))
(concat #x0 (bvadd (concat #b00 a!32) (concat #b00 a!33)))))
(a!39 (bvadd (concat #x0 (bvadd (concat #b00 a!35) (concat #b00 a!36)))
(concat #x0 (bvadd (concat #b00 a!37) (concat #b00 a!38)))))
(a!44 (bvadd (concat #x0 (bvadd (concat #b00 a!40) (concat #b00 a!41)))
(concat #x0 (bvadd (concat #b00 a!42) (concat #b00 a!43))))))
(let ((a!24 (bvadd (concat #x0000 (bvadd (concat #x00 a!8) (concat #x00 a!13)))
(concat #x0000 (bvadd (concat #x00 a!18) (concat #x00 a!23)))))
(a!45 (bvadd (concat #x0000 (bvadd (concat #x00 a!29) (concat #x00 a!34)))
(concat #x0000 (bvadd (concat #x00 a!39) (concat #x00 a!44))))))
(let ((a!46 (concat #b0
((_ extract 31 0)
(bvadd (concat #x00000000 a!24) (concat #x00000000 a!45))))))
(let ((a!47 (bvxor (bvor ((_ extract 7 0) rcx)
((_ extract 7 0)
(bvadd a!46 #b011111111111111111111111111111111)))
((_ extract 7 0)
(bvadd a!46 #b011111111111111111111111111111111)))))
(let ((a!48 (bvlshr (concat (concat #x00000000 ((_ extract 31 0) rbx)) #b0)
(concat #b000000000000000000000000000000000000000000000000000000000
(bvand a!47 #x3f)))))
(let ((a!49 ((_ extract 0 0)
(bvashr (concat ((_ extract 64 1) a!48) #b0)
(concat #b000000000000000000000000000000000000000000000000000000000
#x01)))))
(ite (or (and true (= a!49 #b1)) false) #b1 #b0))))))))))

(let ((a!1 (bvlshr ((_ extract 31 0) rbx)
((_ sign_extend 0)
(bvand ((_ extract 31 0) rcx) #x0000001f)))))
(ite (= ((_ extract 0 0) a!1) #b1) #b1 #b0))
)))
(check-sat)
( pop )



( push )
( echo "btl_r32_r32::of")
(assert (not (=
(ite TMP_BOOL #b1 #b0)

(ite TMP_BOOL #b1 #b0)
)))
(check-sat)
( pop )



( push )
( echo "btl_r32_r32::pf")
(assert (not (=
(ite TMP_BOOL #b1 #b0)

(ite TMP_BOOL #b1 #b0)
)))
(check-sat)
( pop )



( push )
( echo "btl_r32_r32::sf")
(assert (not (=
(ite TMP_BOOL #b1 #b0)

(ite TMP_BOOL #b1 #b0)
)))
(check-sat)
( pop )



