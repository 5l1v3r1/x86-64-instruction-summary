code: vfmsubadd213pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

Formula:

%ymm1  : concatenateMInt( concatenateMInt( concatenateMInt( mi(128, 0), extractMInt( vfmsub132_double(extractMInt( %ymm2, 128, 192), xorMInt( mi(64, 0), extractMInt( %ymm3, 128, 192)), extractMInt( %ymm1, 128, 192)), 0, 56)), extractMInt( vfmsub132_double(extractMInt( %ymm2, 128, 192), xorMInt( mi(64, 0), extractMInt( %ymm3, 128, 192)), extractMInt( %ymm1, 128, 192)), 56, 64)), vfmsub132_double(extractMInt( %ymm2, 192, 256), vfmsub132_double(vfnmsub132_double((#ifMInt eqMInt( mincmp_double(mi(64, 0), concatenateMInt( mi(32, 0), extractMInt( %ymm3, 128, 160))), mi(1, 1)) #then mi(64, 0) #else concatenateMInt( mi(32, 0), extractMInt( %ymm3, 128, 160)) #fi), concatenateMInt( mi(32, 0), extractMInt( %ymm3, 128, 160)), (#ifMInt eqMInt( mincmp_double(mi(64, 0), concatenateMInt( mi(32, 0), extractMInt( %ymm3, 128, 160))), mi(1, 1)) #then mi(64, 0) #else concatenateMInt( mi(32, 0), extractMInt( %ymm3, 128, 160)) #fi)), extractMInt( %ymm3, 192, 256), extractMInt( %ymm3, 192, 256)), extractMInt( %ymm1, 192, 256)))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
