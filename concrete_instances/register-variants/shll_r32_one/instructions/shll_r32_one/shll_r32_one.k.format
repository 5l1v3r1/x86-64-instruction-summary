code: shll $0x1, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 1, 33))

%cf    : (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 0, 1), mi(1, 1)) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt ((notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1)))) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (TMP_BOOL_2 orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 1, 33), mi(32, 0)) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 1, 2), mi(1, 1)) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt (((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 0, 1), mi(1, 1)) orBool FALSE) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 32, 64)), uvalueMInt(mi(33, 1))), 1, 2), mi(1, 1))) orBool FALSE) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
