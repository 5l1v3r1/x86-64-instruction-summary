code: rclw $0x1, %bx

  maybe read:      { %bx %cf }
  must read:       { %bx %cf }
  maybe write:     { %bx %cf %of }
  must write:      { %bx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 0) %rbx)) #b00000000000000001)
                (concat #b0 ((_ extract 15 0) %rbx)))))
(let ((a!2 ((_ extract 15 0) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (concat ((_ extract 63 16) %rbx) a!2)))

%cf    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 0) %rbx)) #b00000000000000001)
                (concat #b0 ((_ extract 15 0) %rbx)))))
(let ((a!2 ((_ extract 16 16) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
  (= a!2 #b1)))
%of    : (let ((a!1 (ite %cf
                (bvadd (concat #b0 ((_ extract 15 0) %rbx)) #b00000000000000001)
                (concat #b0 ((_ extract 15 0) %rbx)))))
(let ((a!2 ((_ extract 15 15) (bvadd a!1 (concat #b0 ((_ extract 15 0) %rbx))))))
(let ((a!3 (not (= (= ((_ extract 15 15) %rbx) #b1) (= a!2 #b1)))))
  (and (= (= ((_ extract 15 15) %rbx) #b1) (= ((_ extract 15 15) %rbx) #b1))
       a!3))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
