code: sbbb %ah, %bl

  maybe read:      { %ah %bl %cf }
  must read:       { %ah %bl %cf }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 56), extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 1, 9))

%cf    : (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 60, 64)), concatenateMInt( mi(1, 0), xorMInt( mi(4, 15), extractMInt( %rax, 52, 56)))), 0, 1)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 1, 2)
%of    : (#ifMInt ((eqMInt( extractMInt( %rbx, 56, 57), mi(1, 1)) ==Bool eqMInt( xorMInt( mi(1, 1), extractMInt( %rax, 48, 49)), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( %rbx, 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt( (#ifMInt %cf #then mi(1, 0) #else mi(1, 1) #fi), mi(1, 1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( %rbx, 56, 64)) #fi), concatenateMInt( mi(1, 0), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
