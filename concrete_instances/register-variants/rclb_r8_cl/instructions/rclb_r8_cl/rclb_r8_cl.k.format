code: rclb %cl, %bl

  maybe read:      { %cl %bl %cf }
  must read:       { %cl %bl %cf }
  maybe write:     { %bl %cf %of }
  must write:      { %bl }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 56), extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9))), 1, 9))

%cf    : extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9))), 0, 1)
%of    : (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool %of) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool TMP_BOOL_0)))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
