code: andw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), concatenateMInt( xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56)), extractMInt( %rcx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56))), xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64))))))

%cf    : mi(1, 0)
%pf    : (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( %rbx, 63, 64), xorMInt( extractMInt( %rcx, 63, 64), orMInt( extractMInt( %rcx, 63, 64), extractMInt( %rbx, 63, 64)))), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( %rbx, 62, 63), xorMInt( extractMInt( %rcx, 62, 63), orMInt( extractMInt( %rcx, 62, 63), extractMInt( %rbx, 62, 63)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 61, 62), xorMInt( extractMInt( %rcx, 61, 62), orMInt( extractMInt( %rcx, 61, 62), extractMInt( %rbx, 61, 62)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 60, 61), xorMInt( extractMInt( %rcx, 60, 61), orMInt( extractMInt( %rcx, 60, 61), extractMInt( %rbx, 60, 61)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 59, 60), xorMInt( extractMInt( %rcx, 59, 60), orMInt( extractMInt( %rcx, 59, 60), extractMInt( %rbx, 59, 60)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 58, 59), xorMInt( extractMInt( %rcx, 58, 59), orMInt( extractMInt( %rcx, 58, 59), extractMInt( %rbx, 58, 59)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 57, 58), xorMInt( extractMInt( %rcx, 57, 58), orMInt( extractMInt( %rcx, 57, 58), extractMInt( %rbx, 57, 58)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 56, 57), xorMInt( extractMInt( %rcx, 56, 57), orMInt( extractMInt( %rcx, 56, 57), extractMInt( %rbx, 56, 57)))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_39 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( mi(64, svalueMInt(concatenateMInt( xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56)), extractMInt( %rcx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56))), xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64))))))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( mi(64, svalueMInt(concatenateMInt( xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56)), extractMInt( %rcx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56))), xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64))))))), 0, 1)
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
