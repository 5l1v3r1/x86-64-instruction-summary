code: andw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), concatenateMInt( xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56)), extractMInt( %rcx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56))), xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64))))))

%cf    : mi(1, 0)
%pf    : getParity(xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64)))))
%af    : (#ifMInt TMP_BOOL_39 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( mi(64, svalueMInt(concatenateMInt( xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56)), extractMInt( %rcx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56))), xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64))))))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( mi(64, svalueMInt(concatenateMInt( xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56)), extractMInt( %rcx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rbx, 48, 56))), xorMInt( extractMInt( %rbx, 56, 64), xorMInt( extractMInt( %rcx, 56, 64), orMInt( extractMInt( %rcx, 56, 64), extractMInt( %rbx, 56, 64))))))), 0, 1)
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
