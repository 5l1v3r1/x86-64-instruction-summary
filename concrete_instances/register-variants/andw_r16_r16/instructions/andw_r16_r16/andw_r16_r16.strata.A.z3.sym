code: andw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 (bvxor (bvxor ((_ extract 15 8) %rbx) #xff)
                  (bvor ((_ extract 15 8) %rcx)
                        (bvxor ((_ extract 15 8) %rbx) #xff)))))
(let ((a!2 (concat a!1
                   (bvxor (bvor ((_ extract 7 0) %rbx) ((_ extract 7 0) %rcx))
                          ((_ extract 7 0) %rcx)
                          ((_ extract 7 0) %rbx)))))
  (concat ((_ extract 63 16) %rbx) a!2)))


%cf    : #b0

%pf    : (let ((a!1 (= (bvxor (bvor ((_ extract 0 0) %rbx) ((_ extract 0 0) %rcx))
                     ((_ extract 0 0) %rcx)
                     ((_ extract 0 0) %rbx))
              #b1))
      (a!2 (= (bvxor (bvor ((_ extract 1 1) %rbx) ((_ extract 1 1) %rcx))
                     ((_ extract 1 1) %rcx)
                     ((_ extract 1 1) %rbx))
              #b1))
      (a!3 (= (bvxor (bvor ((_ extract 2 2) %rbx) ((_ extract 2 2) %rcx))
                     ((_ extract 2 2) %rcx)
                     ((_ extract 2 2) %rbx))
              #b1))
      (a!4 (= (bvxor (bvor ((_ extract 3 3) %rbx) ((_ extract 3 3) %rcx))
                     ((_ extract 3 3) %rcx)
                     ((_ extract 3 3) %rbx))
              #b1))
      (a!5 (= (bvxor (bvor ((_ extract 4 4) %rbx) ((_ extract 4 4) %rcx))
                     ((_ extract 4 4) %rcx)
                     ((_ extract 4 4) %rbx))
              #b1))
      (a!6 (= (bvxor (bvor ((_ extract 5 5) %rbx) ((_ extract 5 5) %rcx))
                     ((_ extract 5 5) %rcx)
                     ((_ extract 5 5) %rbx))
              #b1))
      (a!7 (= (bvxor (bvor ((_ extract 6 6) %rbx) ((_ extract 6 6) %rcx))
                     ((_ extract 6 6) %rcx)
                     ((_ extract 6 6) %rbx))
              #b1))
      (a!8 (= (bvxor (bvor ((_ extract 7 7) %rbx) ((_ extract 7 7) %rcx))
                     ((_ extract 7 7) %rcx)
                     ((_ extract 7 7) %rbx))
              #b1)))
  (ite (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)) #b1 #b0))

%af    : (ite TMP_BOOL_39 #b1 #b0)

%zf    : (let ((a!1 (bvxor (bvxor ((_ extract 15 8) %rbx) #xff)
                  (bvor ((_ extract 15 8) %rcx)
                        (bvxor ((_ extract 15 8) %rbx) #xff)))))
(let ((a!2 (concat a!1
                   (bvxor (bvor ((_ extract 7 0) %rbx) ((_ extract 7 0) %rcx))
                          ((_ extract 7 0) %rcx)
                          ((_ extract 7 0) %rbx)))))
  (ite (= ((_ sign_extend 48) a!2) #x0000000000000000) #b1 #b0)))

%sf    : (let ((a!1 (bvxor (bvxor ((_ extract 15 8) %rbx) #xff)
                  (bvor ((_ extract 15 8) %rcx)
                        (bvxor ((_ extract 15 8) %rbx) #xff)))))
(let ((a!2 (concat a!1
                   (bvxor (bvor ((_ extract 7 0) %rbx) ((_ extract 7 0) %rcx))
                          ((_ extract 7 0) %rcx)
                          ((_ extract 7 0) %rbx)))))
  ((_ extract 63 63) ((_ sign_extend 48) a!2))))

%of    : #b0


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

