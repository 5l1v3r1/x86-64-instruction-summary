code: blsrl %ecx, %ebx

  maybe read:      { %ecx }
  must read:       { %ecx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

Formula:

%rbx   : concatenateMInt( mi(32, 0), xorMInt( extractMInt( %rcx, 32, 64), xorMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 33, 65), orMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 33, 65), extractMInt( %rcx, 32, 64)))))

%cf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))), 0, 1)
%pf    : (#ifMInt TMP_BOOL_16 #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_17 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( xorMInt( extractMInt( %rcx, 32, 64), xorMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 33, 65), orMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 33, 65), extractMInt( %rcx, 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : xorMInt( extractMInt( %rcx, 32, 33), xorMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 33, 34), orMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 33, 34), extractMInt( %rcx, 32, 33))))
%of    : (#ifMInt ((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 2), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 2), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 2), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( %rcx, 32, 64))), 17, 25)), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
