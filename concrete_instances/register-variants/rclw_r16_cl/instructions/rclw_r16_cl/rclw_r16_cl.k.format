code: rclw %cl, %bx

  maybe read:      { %cl %bx %cf }
  must read:       { %cl %bx %cf }
  maybe write:     { %bx %cf %of }
  must write:      { %bx }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17))), 1, 17))

%cf    : extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17))), 0, 1)
%of    : (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt %cf #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( %rbx, 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0))) andBool TMP_BOOL_0) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0)))) andBool %of)))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
