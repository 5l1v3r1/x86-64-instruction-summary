code: popcntw %cx, %bx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %bx %cf %pf %af %zf %sf %of }
  must write:      { %bx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { popcnt }

Formula:

%rbx   : (let ((a!1 (concat #b00
                   (bvadd (concat #b0 ((_ extract 15 15) %rcx))
                          (concat #b0 ((_ extract 14 14) %rcx)))))
      (a!2 (concat #b00
                   (bvadd (concat #b0 ((_ extract 13 13) %rcx))
                          (concat #b0 ((_ extract 12 12) %rcx)))))
      (a!3 (concat #b00
                   (bvadd (concat #b0 ((_ extract 11 11) %rcx))
                          (concat #b0 ((_ extract 10 10) %rcx)))))
      (a!4 (concat #b00
                   (bvadd (concat #b0 ((_ extract 9 9) %rcx))
                          (concat #b0 ((_ extract 8 8) %rcx)))))
      (a!6 (concat #b00
                   (bvadd (concat #b0 ((_ extract 7 7) %rcx))
                          (concat #b0 ((_ extract 6 6) %rcx)))))
      (a!7 (concat #b00
                   (bvadd (concat #b0 ((_ extract 5 5) %rcx))
                          (concat #b0 ((_ extract 4 4) %rcx)))))
      (a!8 (concat #b00
                   (bvadd (concat #b0 ((_ extract 3 3) %rcx))
                          (concat #b0 ((_ extract 2 2) %rcx)))))
      (a!9 (concat #b00
                   (bvadd (concat #b0 ((_ extract 1 1) %rcx))
                          (concat #b0 ((_ extract 0 0) %rcx))))))
(let ((a!5 (concat #x00
                   (bvadd (concat #x0 (bvadd a!1 a!2))
                          (concat #x0 (bvadd a!3 a!4)))))
      (a!10 (concat #x00
                    (bvadd (concat #x0 (bvadd a!6 a!7))
                           (concat #x0 (bvadd a!8 a!9))))))
  (concat ((_ extract 63 16) %rbx) (bvadd a!5 a!10))))

%cf    : false
%pf    : false
%af    : false
%zf    : (= ((_ extract 15 0) %rcx) #x0000)
%sf    : false
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
