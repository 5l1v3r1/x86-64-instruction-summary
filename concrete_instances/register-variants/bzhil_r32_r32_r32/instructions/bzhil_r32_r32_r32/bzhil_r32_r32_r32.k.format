code: bzhil %edx, %ecx, %ebx

  maybe read:      { %ecx %edx }
  must read:       { %ecx %edx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi2 }

Formula:

%rbx   : concatenateMInt( mi(32, 0), (#ifMInt ultMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( %rcx, 33, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( %rcx, 34, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( %rcx, 35, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( %rcx, 36, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( %rcx, 37, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( %rcx, 38, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( %rcx, 39, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( %rcx, 40, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( %rcx, 41, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( %rcx, 42, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( %rcx, 43, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( %rcx, 44, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( %rcx, 45, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( %rcx, 46, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( %rcx, 47, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( %rcx, 48, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( %rcx, 49, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( %rcx, 50, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( %rcx, 51, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( %rcx, 52, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( %rcx, 53, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( %rcx, 54, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( %rcx, 55, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( %rcx, 56, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( %rcx, 57, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( %rcx, 58, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( %rcx, 59, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( %rcx, 60, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( %rcx, 61, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( %rcx, 62, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( %rcx, 63, 64)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else extractMInt( %rcx, 32, 64) #fi))

%cf    : (#ifMInt ugeMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt TMP_BOOL_0 #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_1 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( %rcx, 33, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( %rcx, 34, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( %rcx, 35, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( %rcx, 36, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( %rcx, 37, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( %rcx, 38, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( %rcx, 39, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( %rcx, 40, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( %rcx, 41, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( %rcx, 42, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( %rcx, 43, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( %rcx, 44, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( %rcx, 45, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( %rcx, 46, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( %rcx, 47, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( %rcx, 48, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( %rcx, 49, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( %rcx, 50, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( %rcx, 51, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( %rcx, 52, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( %rcx, 53, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( %rcx, 54, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( %rcx, 55, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( %rcx, 56, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( %rcx, 57, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( %rcx, 58, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( %rcx, 59, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( %rcx, 60, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( %rcx, 61, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( %rcx, 62, 64)) #else (#ifMInt eqMInt( extractMInt( %rdx, 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( %rcx, 63, 64)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else extractMInt( %rcx, 32, 64) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt ultMInt( extractMInt( %rdx, 56, 64), mi(8, 32)) #then mi(1, 0) #else extractMInt( %rcx, 32, 33) #fi)
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
