code: vpunpckhwd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Formula:

%ymm1  : concatenateMInt( concatenateMInt( xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 0, 16)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 16, 32)), mi(32, 0))), xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 16, 32)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 16, 32)), mi(32, 0))), orMInt( concatenateMInt( extractMInt( %ymm3, 0, 32), concatenateMInt( extractMInt( %ymm3, 16, 32), extractMInt( %ymm3, 16, 32))), concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 16, 32)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 16, 32)), mi(32, 0)))))), xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 32, 48)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 48, 64)), mi(32, 0))), xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 48, 64)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 48, 64)), mi(32, 0))), orMInt( concatenateMInt( extractMInt( %ymm3, 32, 64), concatenateMInt( extractMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 48, 64)), mi(32, 0)), 16, 32), extractMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 48, 64)), mi(32, 0)), 16, 32))), concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 48, 64)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 48, 64)), mi(32, 0))))))), concatenateMInt( xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 128, 144)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 144, 160)), mi(32, 0))), xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 144, 160)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 144, 160)), mi(32, 0))), orMInt( concatenateMInt( extractMInt( %ymm3, 128, 160), concatenateMInt( extractMInt( %ymm3, 144, 160), extractMInt( %ymm3, 144, 160))), concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 144, 160)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 144, 160)), mi(32, 0)))))), xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 160, 176)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm2, 176, 192)), mi(32, 0))), xorMInt( concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 176, 192)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 176, 192)), mi(32, 0))), orMInt( concatenateMInt( extractMInt( %ymm3, 160, 192), concatenateMInt( extractMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 176, 192)), mi(32, 0)), 16, 32), extractMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 176, 192)), mi(32, 0)), 16, 32))), concatenateMInt( sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 176, 192)), mi(32, 0)), sub_single(concatenateMInt( mi(16, 0), extractMInt( %ymm3, 176, 192)), mi(32, 0))))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
