code: andb %bh, %ah

  maybe read:      { %ah %bh }
  must read:       { %ah %bh }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rax   : concatenateMInt( concatenateMInt( extractMInt( %rax, 0, 48), xorMInt( orMInt( xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)), extractMInt( %rbx, 48, 56)), xorMInt( mi(8, 255), extractMInt( %rax, 48, 56)))), extractMInt( %rax, 56, 64))

%cf    : mi(1, 0)
%pf    : (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( %rbx, 55, 56), xorMInt( extractMInt( %rax, 55, 56), orMInt( extractMInt( %rax, 55, 56), extractMInt( %rbx, 55, 56)))), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( %rbx, 54, 55), xorMInt( extractMInt( %rax, 54, 55), orMInt( extractMInt( %rax, 54, 55), extractMInt( %rbx, 54, 55)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 53, 54), xorMInt( extractMInt( %rax, 53, 54), orMInt( extractMInt( %rax, 53, 54), extractMInt( %rbx, 53, 54)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 52, 53), xorMInt( extractMInt( %rax, 52, 53), orMInt( extractMInt( %rax, 52, 53), extractMInt( %rbx, 52, 53)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 51, 52), xorMInt( extractMInt( %rax, 51, 52), orMInt( extractMInt( %rax, 51, 52), extractMInt( %rbx, 51, 52)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 50, 51), xorMInt( extractMInt( %rax, 50, 51), orMInt( extractMInt( %rax, 50, 51), extractMInt( %rbx, 50, 51)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 49, 50), xorMInt( extractMInt( %rax, 49, 50), orMInt( extractMInt( %rax, 49, 50), extractMInt( %rbx, 49, 50)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( %rbx, 48, 49), xorMInt( extractMInt( %rax, 48, 49), orMInt( extractMInt( %rax, 48, 49), extractMInt( %rbx, 48, 49)))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_26 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 48, 56))), 32, 64), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rax, 48, 56))), 32, 64), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rax, 48, 56))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 48, 56))), 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 48, 56))), 32, 33), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rax, 48, 56))), 32, 33), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( %rax, 48, 56))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( %rbx, 48, 56))), 32, 33))))
%of    : mi(1, 0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
