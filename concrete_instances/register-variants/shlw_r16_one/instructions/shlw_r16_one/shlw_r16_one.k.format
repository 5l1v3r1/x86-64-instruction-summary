code: shlw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( extractMInt( %rbx, 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 1, 17))

%cf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 0, 1)
%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt TMP_BOOL_8 #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 1, 2)
%of    : (#ifMInt ((eqMInt( extractMInt( %rbx, 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( %rbx, 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( %rbx, 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64)), concatenateMInt( mi(1, 0), extractMInt( %rbx, 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
