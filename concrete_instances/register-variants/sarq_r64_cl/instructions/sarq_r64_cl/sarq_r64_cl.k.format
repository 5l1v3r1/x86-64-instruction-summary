code: sarq %cl, %rbx

  maybe read:      { %cl %rbx }
  must read:       { %cl %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx }
  maybe undef:     { %af %of }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 0, 64)

%cf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 64, 65), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0)))) andBool %cf)) #then mi(1, 1) #else mi(1, 0) #fi)
%pf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 56, 57), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0)))) andBool %pf)) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0))) andBool TMP_BOOL_0) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0)))) andBool %af)) #then mi(1, 1) #else mi(1, 0) #fi)
%zf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 0, 64), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0)))) andBool %zf)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( %rbx, mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 0)))) andBool %sf)) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt ((eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 1)) andBool FALSE) orBool ((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 63)), mi(8, 1))) andBool %of)) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
