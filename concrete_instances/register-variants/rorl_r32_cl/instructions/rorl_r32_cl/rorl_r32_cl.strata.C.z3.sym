code: rorl %cl, %ebx

  maybe read:      { %cl %ebx }
  must read:       { %cl %ebx }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

rorl %cl, %ebx: Hindex7(9)
rorl %cl, %ebx: Hindex7(9)
Formula:

%rbx   : (let ((a!1 (ext_rotate_right ((_ extract 31 0) %rbx)
                             (concat #x000000
                                     (bvand ((_ extract 7 0) %rcx) #x1f)))))
  (concat #x00000000 a!1))

%cf    : (let ((a!1 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x00)))
      (a!2 (ext_rotate_right ((_ extract 31 0) %rbx)
                             (concat #x000000
                                     (bvand ((_ extract 7 0) %rcx) #x1f)))))
  (or (and a!1 (= ((_ extract 31 31) a!2) #b1)) (and (not a!1) %cf)))
%of    : (let ((a!1 (ext_rotate_right ((_ extract 31 0) %rbx)
                             (concat #x000000
                                     (bvand ((_ extract 7 0) %rcx) #x1f))))
      (a!3 (not (= (bvand ((_ extract 7 0) %rcx) #x1f) #x01))))
(let ((a!2 (and (= (bvand ((_ extract 7 0) %rcx) #x1f) #x01)
                (xor (= ((_ extract 31 31) a!1) #b1)
                     (= ((_ extract 30 30) a!1) #b1)))))
  (or a!2 (and a!3 TMP_BOOL_0))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
