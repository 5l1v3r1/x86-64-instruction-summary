code: rorl %cl, %ebx

  maybe read:      { %cl %ebx }
  must read:       { %cl %ebx }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx }
  maybe undef:     { %of }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : concatenateMInt( mi(32, 0), ror( extractMInt( %rbx, 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)))))

%cf    : (#ifMInt (((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( %rbx, 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 0)))) andBool %cf)) #then mi(1, 1) #else mi(1, 0) #fi)
%of    : (#ifMInt ((eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( %rbx, 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( %rbx, 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( %rcx, 56, 64), mi(8, 31)), mi(8, 1))) andBool TMP_BOOL_0)) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
