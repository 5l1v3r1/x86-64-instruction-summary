code: negw %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %pf %af %zf %sf %of }
  must write:      { %bx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

negw %bx: Hindex1(9)
negw %bx: Hindex1(9)
Formula:

%rbx   : (concat ((_ extract 63 16) %rbx) (bvneg ((_ extract 15 0) %rbx)))

%cf    : (not (= ((_ extract 15 0) %rbx) #x0000))
%pf    : (let ((a!1 (= ((_ extract 0 0) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!2 (= ((_ extract 1 1) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!3 (= ((_ extract 2 2) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!4 (= ((_ extract 3 3) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!5 (= ((_ extract 4 4) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!6 (= ((_ extract 5 5) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!7 (= ((_ extract 6 6) (bvneg ((_ extract 15 0) %rbx))) #b1))
      (a!8 (= ((_ extract 7 7) (bvneg ((_ extract 15 0) %rbx))) #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : (let ((a!1 (= ((_ extract 3 3) (bvneg ((_ extract 15 0) %rbx))) #b1)))
  (and (= ((_ extract 3 3) %rbx) #b1) a!1))
%zf    : (= (bvneg ((_ extract 15 0) %rbx)) #x0000)
%sf    : (= ((_ extract 15 15) (bvneg ((_ extract 15 0) %rbx))) #b1)
%of    : (let ((a!1 (= ((_ extract 15 15) (bvneg ((_ extract 15 0) %rbx))) #b1)))
  (and (= ((_ extract 15 15) %rbx) #b1) a!1))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
