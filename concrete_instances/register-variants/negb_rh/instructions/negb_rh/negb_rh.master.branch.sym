code: negb %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

negb %ah: Hindex1(9)
negb %ah: Hindex1(9)
Formula:

%rax   : (concat (concat ((_ extract 63 16) %rax) (bvneg ((_ extract 15 8) %rax)))
        ((_ extract 7 0) %rax))

%cf    : (not (= ((_ extract 15 8) %rax) #x00))
%pf    : (let ((a!1 (= ((_ extract 0 0) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!2 (= ((_ extract 1 1) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!3 (= ((_ extract 2 2) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!4 (= ((_ extract 3 3) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!5 (= ((_ extract 4 4) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!6 (= ((_ extract 5 5) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!7 (= ((_ extract 6 6) (bvneg ((_ extract 15 8) %rax))) #b1))
      (a!8 (= ((_ extract 7 7) (bvneg ((_ extract 15 8) %rax))) #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : (let ((a!1 (= ((_ extract 3 3) (bvneg ((_ extract 15 8) %rax))) #b1)))
  (and (= ((_ extract 11 11) %rax) #b1) a!1))
%zf    : (= (bvneg ((_ extract 15 8) %rax)) #x00)
%sf    : (= ((_ extract 7 7) (bvneg ((_ extract 15 8) %rax))) #b1)
%of    : (let ((a!1 (= ((_ extract 7 7) (bvneg ((_ extract 15 8) %rax))) #b1)))
  (and (= ((_ extract 15 15) %rax) #b1) a!1))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
