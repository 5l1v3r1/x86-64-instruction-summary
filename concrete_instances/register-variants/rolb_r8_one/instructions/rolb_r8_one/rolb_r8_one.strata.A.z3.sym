code: rolb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (let ((a!1 ((_ extract 8 8)
             (bvadd (concat #b0 ((_ extract 7 0) %rbx))
                    (concat #b0 ((_ extract 7 0) %rbx))))))
(let ((a!2 (ite (= a!1 #b1)
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 ((_ extract 7 0) (bvadd a!2 (concat #b0 ((_ extract 7 0) %rbx))))))
  (concat ((_ extract 63 8) %rbx) a!3))))

%cf    : (let ((a!1 ((_ extract 8 8)
             (bvadd (concat #b0 ((_ extract 7 0) %rbx))
                    (concat #b0 ((_ extract 7 0) %rbx))))))
(let ((a!2 (ite (= a!1 #b1)
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 ((_ extract 8 8) (bvadd a!2 (concat #b0 ((_ extract 7 0) %rbx))))))
  (= a!3 #b1))))
%of    : (let ((a!1 ((_ extract 8 8)
             (bvadd (concat #b0 ((_ extract 7 0) %rbx))
                    (concat #b0 ((_ extract 7 0) %rbx))))))
(let ((a!2 (ite (= a!1 #b1)
                (bvadd (concat #b0 ((_ extract 7 0) %rbx)) #b000000001)
                (concat #b0 ((_ extract 7 0) %rbx)))))
(let ((a!3 ((_ extract 7 7) (bvadd a!2 (concat #b0 ((_ extract 7 0) %rbx))))))
(let ((a!4 (not (= (= ((_ extract 7 7) %rbx) #b1) (= a!3 #b1)))))
  (and (= (= ((_ extract 7 7) %rbx) #b1) (= ((_ extract 7 7) %rbx) #b1)) a!4)))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
