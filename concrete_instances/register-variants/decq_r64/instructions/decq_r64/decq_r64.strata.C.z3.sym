code: decq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %pf %af %zf %sf %of }
  must write:      { %rbx %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : (bvsub %rbx #x0000000000000001)

%pf    : (let ((a!1 (xor (= ((_ extract 0 0) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 1 1) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 2 2) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 3 3) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 4 4) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 5 5) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 6 6) (bvsub %rbx #x0000000000000001)) #b1)
                (= ((_ extract 7 7) (bvsub %rbx #x0000000000000001)) #b1))))
  (ite (not a!1) #b1 #b0))
%af    : (ite (= ((_ extract 3 0) %rbx) #x0) #b1 #b0)
%zf    : (ite (= (bvsub %rbx #x0000000000000001) #x0000000000000000) #b1 #b0)
%sf    : (ite (= ((_ extract 63 63) (bvsub %rbx #x0000000000000001)) #b1) #b1 #b0)
%of    : (ite (and (= ((_ extract 63 63) %rbx) #b1)
          (= ((_ extract 62 0) %rbx)
             #b000000000000000000000000000000000000000000000000000000000000000))
     #b1
     #b0)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
