code: decq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %pf %af %zf %sf %of }
  must write:      { %rbx %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : ((_ extract 63 0) (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))

%pf    : (let ((a!1 (= ((_ extract 0 0)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!2 (= ((_ extract 1 1)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!3 (= ((_ extract 2 2)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!4 (= ((_ extract 3 3)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!5 (= ((_ extract 4 4)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!6 (= ((_ extract 5 5)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!7 (= ((_ extract 6 6)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1))
      (a!8 (= ((_ extract 7 7)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1)))
  (not (xor a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8)))
%af    : (let ((a!1 ((_ extract 4 4) (bvadd #b01111 (concat #b0 ((_ extract 3 0) %rbx))))))
  (= a!1 #b1))
%zf    : (= ((_ extract 63 0) (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
   #x0000000000000000)
%sf    : (= ((_ extract 63 63) (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
   #b1)
%of    : (let ((a!1 (= ((_ extract 63 63)
                (bvadd (concat #b0 #xffffffffffffffff) (concat #b0 %rbx)))
              #b1)))
  (and (= true (= ((_ extract 63 63) %rbx) #b1)) (not (= true a!1))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
