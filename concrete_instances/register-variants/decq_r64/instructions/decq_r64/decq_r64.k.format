code: decq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %pf %af %zf %sf %of }
  must write:      { %rbx %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rbx   : extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), %rbx)), 1, 65)

%pf    : getParity(extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), %rbx)), 57, 65))
%af    : extractMInt( addMInt( mi(5, 15), concatenateMInt( mi(1, 0), extractMInt( %rbx, 60, 64))), 0, 1)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), %rbx)), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), %rbx)), 1, 2)
%of    : (#ifMInt ((TRUE ==Bool eqMInt( extractMInt( %rbx, 0, 1), mi(1, 1))) andBool (notBool (TRUE ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), %rbx)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
