code: decb %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %pf %af %zf %sf %of }
  must write:      { %ah %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Formula:

%rax   : concatenateMInt( concatenateMInt( extractMInt( %rax, 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 1, 9)), extractMInt( %rax, 56, 64))

%pf    : (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
%af    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 52, 56)), mi(5, 15)), 0, 1)
%zf    : (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
%sf    : extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 1, 2)
%of    : (#ifMInt ((eqMInt( extractMInt( %rax, 48, 49), mi(1, 1)) ==Bool TRUE) andBool (notBool (eqMInt( extractMInt( %rax, 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( %rax, 48, 56)), mi(9, 255)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
