code: blsmskl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

blsmskl %ecx, %ebx: Hindex8(9)
blsmskl %ecx, %ebx: Hindex8(9)
movq $0x0, %rbx: Hindex5(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
callq .clear_cf: Hindex8(9)
adcl %ecx, %ebx: Hindex2(9)
movq $0xffffffffffffffff, %rax: Hindex5(9)
orq %rbx, %rbx: Hindex1(9)
adcq %rcx, %rbx: Hindex2(9)
callq .move_byte_5_of_rbx_to_r9b: Hindex8(9)
movswq %bx, %r10: Hindex5(9)
movslq %ebx, %rbx: Hindex5(9)
callq .move_032_016_ecx_r8w_r9w: Hindex8(9)
callq .move_064_032_rbx_r10d_r11d: Hindex8(9)
movq %r10, %rcx: Hindex5(9)
callq .move_016_032_r8w_r9w_ebx: Hindex8(9)
xorq %rcx, %rbx: Hindex1(9)
callq .set_szp_for_ebx: Hindex8(9)
movq $0x8, %rbx: Hindex5(9)
callq .move_032_016_ebx_r10w_r11w: Hindex8(9)
xorq %rax, %rax: Hindex1(9)
adcb %al, %al: Hindex2(9)
adcw %cx, %bx: Hindex2(9)
callq .set_szp_for_bx: Hindex8(9)
callq .read_pf_into_rbx: Hindex8(9)
adcb %cl, %bl: Hindex2(9)
movq %rax, %rbx: Hindex5(9)
adcb %bl, %bl: Hindex2(9)
Formula:

%rbx   : (let ((a!1 (bvadd (concat #b0 #xffffffffffffffff)
                  (concat #b0 (concat #x00000000 ((_ extract 31 0) %rcx))))))
  (bvxor (concat #x00000000 ((_ extract 31 0) %rcx))
         (concat #x00000000 ((_ extract 31 0) a!1))))

%cf    : (let ((a!1 (bvadd (concat #b0 #xffffffffffffffff)
                  (concat #b0 (concat #x00000000 ((_ extract 31 0) %rcx))))))
(let ((a!2 ((_ extract 8 8)
             (bvadd (concat #b0 ((_ extract 47 40) a!1))
                    (concat #b0 ((_ extract 47 40) a!1))))))
  (= a!2 #b1)))
%pf    : TMP_BOOL_4
%af    : TMP_BOOL_5
%zf    : (let ((a!1 (bvadd (concat #b0 #xffffffffffffffff)
                  (concat #b0 (concat #x00000000 ((_ extract 31 0) %rcx))))))
  (= (bvxor ((_ extract 31 0) %rcx) ((_ extract 31 0) a!1)) #x00000000))
%sf    : (let ((a!1 (bvadd (concat #b0 #xffffffffffffffff)
                  (concat #b0 (concat #x00000000 ((_ extract 31 0) %rcx))))))
  (= (bvxor ((_ extract 31 31) %rcx) ((_ extract 31 31) a!1)) #b1))
%of    : (let ((a!1 (bvadd (concat #b0 #xffffffffffffffff)
                  (concat #b0 (concat #x00000000 ((_ extract 31 0) %rcx))))))
(let ((a!2 ((_ extract 7 7)
             (bvadd (concat #b0 ((_ extract 47 40) a!1))
                    (concat #b0 ((_ extract 47 40) a!1))))))
(let ((a!3 (not (= (= ((_ extract 47 47) a!1) #b1) (= a!2 #b1)))))
  (and (= (= ((_ extract 47 47) a!1) #b1) (= ((_ extract 47 47) a!1) #b1)) a!3))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
