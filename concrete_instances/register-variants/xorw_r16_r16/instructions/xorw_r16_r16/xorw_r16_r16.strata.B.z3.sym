code: xorw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Formula:

%rbx   : (concat ((_ extract 63 16) %rbx)
        (bvxor ((_ extract 15 0) %rbx) ((_ extract 15 0) %rcx)))


%cf    : #b0

%pf    : (let ((a!1 (xor (= (bvxor ((_ extract 0 0) %rbx) ((_ extract 0 0) %rcx)) #b1)
                (= (bvxor ((_ extract 1 1) %rbx) ((_ extract 1 1) %rcx)) #b1)
                (= (bvxor ((_ extract 2 2) %rbx) ((_ extract 2 2) %rcx)) #b1)
                (= (bvxor ((_ extract 3 3) %rbx) ((_ extract 3 3) %rcx)) #b1)
                (= (bvxor ((_ extract 4 4) %rbx) ((_ extract 4 4) %rcx)) #b1)
                (= (bvxor ((_ extract 5 5) %rbx) ((_ extract 5 5) %rcx)) #b1)
                (= (bvxor ((_ extract 6 6) %rbx) ((_ extract 6 6) %rcx)) #b1)
                (= (bvxor ((_ extract 7 7) %rbx) ((_ extract 7 7) %rcx)) #b1))))
  (ite (not a!1) #b1 #b0))

%af    : (ite TMP_BOOL_0 #b1 #b0)

%zf    : (ite (= (bvxor ((_ extract 15 0) %rbx) ((_ extract 15 0) %rcx)) #x0000) #b1 #b0)

%sf    : (bvxor ((_ extract 15 15) %rbx) ((_ extract 15 15) %rcx))

%of    : #b0


sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : sigsegv

